
Tripwire_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006468  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08106700  08106700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08106738  08106738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08106740  08106740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08106744  08106744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  08106748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000158  10000010  08106758  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000168  08106758  00020168  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016dd3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000290f  00000000  00000000  00036e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a0  00000000  00000000  00039728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010d0  00000000  00000000  0003a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c09  00000000  00000000  0003b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017adc  00000000  00000000  000755a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001826e5  00000000  00000000  0008d07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020f762  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004be0  00000000  00000000  0020f7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081066e8 	.word	0x081066e8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081066e8 	.word	0x081066e8

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__aeabi_d2uiz>:
 8100a74:	004a      	lsls	r2, r1, #1
 8100a76:	d211      	bcs.n	8100a9c <__aeabi_d2uiz+0x28>
 8100a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100a7c:	d211      	bcs.n	8100aa2 <__aeabi_d2uiz+0x2e>
 8100a7e:	d50d      	bpl.n	8100a9c <__aeabi_d2uiz+0x28>
 8100a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100a88:	d40e      	bmi.n	8100aa8 <__aeabi_d2uiz+0x34>
 8100a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100a96:	fa23 f002 	lsr.w	r0, r3, r2
 8100a9a:	4770      	bx	lr
 8100a9c:	f04f 0000 	mov.w	r0, #0
 8100aa0:	4770      	bx	lr
 8100aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100aa6:	d102      	bne.n	8100aae <__aeabi_d2uiz+0x3a>
 8100aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8100aac:	4770      	bx	lr
 8100aae:	f04f 0000 	mov.w	r0, #0
 8100ab2:	4770      	bx	lr

08100ab4 <__aeabi_uldivmod>:
 8100ab4:	b953      	cbnz	r3, 8100acc <__aeabi_uldivmod+0x18>
 8100ab6:	b94a      	cbnz	r2, 8100acc <__aeabi_uldivmod+0x18>
 8100ab8:	2900      	cmp	r1, #0
 8100aba:	bf08      	it	eq
 8100abc:	2800      	cmpeq	r0, #0
 8100abe:	bf1c      	itt	ne
 8100ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8100ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8100ac8:	f000 b974 	b.w	8100db4 <__aeabi_idiv0>
 8100acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8100ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100ad4:	f000 f806 	bl	8100ae4 <__udivmoddi4>
 8100ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ae0:	b004      	add	sp, #16
 8100ae2:	4770      	bx	lr

08100ae4 <__udivmoddi4>:
 8100ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100ae8:	9d08      	ldr	r5, [sp, #32]
 8100aea:	4604      	mov	r4, r0
 8100aec:	468e      	mov	lr, r1
 8100aee:	2b00      	cmp	r3, #0
 8100af0:	d14d      	bne.n	8100b8e <__udivmoddi4+0xaa>
 8100af2:	428a      	cmp	r2, r1
 8100af4:	4694      	mov	ip, r2
 8100af6:	d969      	bls.n	8100bcc <__udivmoddi4+0xe8>
 8100af8:	fab2 f282 	clz	r2, r2
 8100afc:	b152      	cbz	r2, 8100b14 <__udivmoddi4+0x30>
 8100afe:	fa01 f302 	lsl.w	r3, r1, r2
 8100b02:	f1c2 0120 	rsb	r1, r2, #32
 8100b06:	fa20 f101 	lsr.w	r1, r0, r1
 8100b0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100b0e:	ea41 0e03 	orr.w	lr, r1, r3
 8100b12:	4094      	lsls	r4, r2
 8100b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100b18:	0c21      	lsrs	r1, r4, #16
 8100b1a:	fbbe f6f8 	udiv	r6, lr, r8
 8100b1e:	fa1f f78c 	uxth.w	r7, ip
 8100b22:	fb08 e316 	mls	r3, r8, r6, lr
 8100b26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100b2a:	fb06 f107 	mul.w	r1, r6, r7
 8100b2e:	4299      	cmp	r1, r3
 8100b30:	d90a      	bls.n	8100b48 <__udivmoddi4+0x64>
 8100b32:	eb1c 0303 	adds.w	r3, ip, r3
 8100b36:	f106 30ff 	add.w	r0, r6, #4294967295
 8100b3a:	f080 811f 	bcs.w	8100d7c <__udivmoddi4+0x298>
 8100b3e:	4299      	cmp	r1, r3
 8100b40:	f240 811c 	bls.w	8100d7c <__udivmoddi4+0x298>
 8100b44:	3e02      	subs	r6, #2
 8100b46:	4463      	add	r3, ip
 8100b48:	1a5b      	subs	r3, r3, r1
 8100b4a:	b2a4      	uxth	r4, r4
 8100b4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100b50:	fb08 3310 	mls	r3, r8, r0, r3
 8100b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100b58:	fb00 f707 	mul.w	r7, r0, r7
 8100b5c:	42a7      	cmp	r7, r4
 8100b5e:	d90a      	bls.n	8100b76 <__udivmoddi4+0x92>
 8100b60:	eb1c 0404 	adds.w	r4, ip, r4
 8100b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8100b68:	f080 810a 	bcs.w	8100d80 <__udivmoddi4+0x29c>
 8100b6c:	42a7      	cmp	r7, r4
 8100b6e:	f240 8107 	bls.w	8100d80 <__udivmoddi4+0x29c>
 8100b72:	4464      	add	r4, ip
 8100b74:	3802      	subs	r0, #2
 8100b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100b7a:	1be4      	subs	r4, r4, r7
 8100b7c:	2600      	movs	r6, #0
 8100b7e:	b11d      	cbz	r5, 8100b88 <__udivmoddi4+0xa4>
 8100b80:	40d4      	lsrs	r4, r2
 8100b82:	2300      	movs	r3, #0
 8100b84:	e9c5 4300 	strd	r4, r3, [r5]
 8100b88:	4631      	mov	r1, r6
 8100b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100b8e:	428b      	cmp	r3, r1
 8100b90:	d909      	bls.n	8100ba6 <__udivmoddi4+0xc2>
 8100b92:	2d00      	cmp	r5, #0
 8100b94:	f000 80ef 	beq.w	8100d76 <__udivmoddi4+0x292>
 8100b98:	2600      	movs	r6, #0
 8100b9a:	e9c5 0100 	strd	r0, r1, [r5]
 8100b9e:	4630      	mov	r0, r6
 8100ba0:	4631      	mov	r1, r6
 8100ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ba6:	fab3 f683 	clz	r6, r3
 8100baa:	2e00      	cmp	r6, #0
 8100bac:	d14a      	bne.n	8100c44 <__udivmoddi4+0x160>
 8100bae:	428b      	cmp	r3, r1
 8100bb0:	d302      	bcc.n	8100bb8 <__udivmoddi4+0xd4>
 8100bb2:	4282      	cmp	r2, r0
 8100bb4:	f200 80f9 	bhi.w	8100daa <__udivmoddi4+0x2c6>
 8100bb8:	1a84      	subs	r4, r0, r2
 8100bba:	eb61 0303 	sbc.w	r3, r1, r3
 8100bbe:	2001      	movs	r0, #1
 8100bc0:	469e      	mov	lr, r3
 8100bc2:	2d00      	cmp	r5, #0
 8100bc4:	d0e0      	beq.n	8100b88 <__udivmoddi4+0xa4>
 8100bc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8100bca:	e7dd      	b.n	8100b88 <__udivmoddi4+0xa4>
 8100bcc:	b902      	cbnz	r2, 8100bd0 <__udivmoddi4+0xec>
 8100bce:	deff      	udf	#255	; 0xff
 8100bd0:	fab2 f282 	clz	r2, r2
 8100bd4:	2a00      	cmp	r2, #0
 8100bd6:	f040 8092 	bne.w	8100cfe <__udivmoddi4+0x21a>
 8100bda:	eba1 010c 	sub.w	r1, r1, ip
 8100bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100be2:	fa1f fe8c 	uxth.w	lr, ip
 8100be6:	2601      	movs	r6, #1
 8100be8:	0c20      	lsrs	r0, r4, #16
 8100bea:	fbb1 f3f7 	udiv	r3, r1, r7
 8100bee:	fb07 1113 	mls	r1, r7, r3, r1
 8100bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100bf6:	fb0e f003 	mul.w	r0, lr, r3
 8100bfa:	4288      	cmp	r0, r1
 8100bfc:	d908      	bls.n	8100c10 <__udivmoddi4+0x12c>
 8100bfe:	eb1c 0101 	adds.w	r1, ip, r1
 8100c02:	f103 38ff 	add.w	r8, r3, #4294967295
 8100c06:	d202      	bcs.n	8100c0e <__udivmoddi4+0x12a>
 8100c08:	4288      	cmp	r0, r1
 8100c0a:	f200 80cb 	bhi.w	8100da4 <__udivmoddi4+0x2c0>
 8100c0e:	4643      	mov	r3, r8
 8100c10:	1a09      	subs	r1, r1, r0
 8100c12:	b2a4      	uxth	r4, r4
 8100c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8100c18:	fb07 1110 	mls	r1, r7, r0, r1
 8100c1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100c20:	fb0e fe00 	mul.w	lr, lr, r0
 8100c24:	45a6      	cmp	lr, r4
 8100c26:	d908      	bls.n	8100c3a <__udivmoddi4+0x156>
 8100c28:	eb1c 0404 	adds.w	r4, ip, r4
 8100c2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100c30:	d202      	bcs.n	8100c38 <__udivmoddi4+0x154>
 8100c32:	45a6      	cmp	lr, r4
 8100c34:	f200 80bb 	bhi.w	8100dae <__udivmoddi4+0x2ca>
 8100c38:	4608      	mov	r0, r1
 8100c3a:	eba4 040e 	sub.w	r4, r4, lr
 8100c3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100c42:	e79c      	b.n	8100b7e <__udivmoddi4+0x9a>
 8100c44:	f1c6 0720 	rsb	r7, r6, #32
 8100c48:	40b3      	lsls	r3, r6
 8100c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100c52:	fa20 f407 	lsr.w	r4, r0, r7
 8100c56:	fa01 f306 	lsl.w	r3, r1, r6
 8100c5a:	431c      	orrs	r4, r3
 8100c5c:	40f9      	lsrs	r1, r7
 8100c5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100c62:	fa00 f306 	lsl.w	r3, r0, r6
 8100c66:	fbb1 f8f9 	udiv	r8, r1, r9
 8100c6a:	0c20      	lsrs	r0, r4, #16
 8100c6c:	fa1f fe8c 	uxth.w	lr, ip
 8100c70:	fb09 1118 	mls	r1, r9, r8, r1
 8100c74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100c78:	fb08 f00e 	mul.w	r0, r8, lr
 8100c7c:	4288      	cmp	r0, r1
 8100c7e:	fa02 f206 	lsl.w	r2, r2, r6
 8100c82:	d90b      	bls.n	8100c9c <__udivmoddi4+0x1b8>
 8100c84:	eb1c 0101 	adds.w	r1, ip, r1
 8100c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8100c8c:	f080 8088 	bcs.w	8100da0 <__udivmoddi4+0x2bc>
 8100c90:	4288      	cmp	r0, r1
 8100c92:	f240 8085 	bls.w	8100da0 <__udivmoddi4+0x2bc>
 8100c96:	f1a8 0802 	sub.w	r8, r8, #2
 8100c9a:	4461      	add	r1, ip
 8100c9c:	1a09      	subs	r1, r1, r0
 8100c9e:	b2a4      	uxth	r4, r4
 8100ca0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ca4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ca8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100cb0:	458e      	cmp	lr, r1
 8100cb2:	d908      	bls.n	8100cc6 <__udivmoddi4+0x1e2>
 8100cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8100cb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8100cbc:	d26c      	bcs.n	8100d98 <__udivmoddi4+0x2b4>
 8100cbe:	458e      	cmp	lr, r1
 8100cc0:	d96a      	bls.n	8100d98 <__udivmoddi4+0x2b4>
 8100cc2:	3802      	subs	r0, #2
 8100cc4:	4461      	add	r1, ip
 8100cc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100cca:	fba0 9402 	umull	r9, r4, r0, r2
 8100cce:	eba1 010e 	sub.w	r1, r1, lr
 8100cd2:	42a1      	cmp	r1, r4
 8100cd4:	46c8      	mov	r8, r9
 8100cd6:	46a6      	mov	lr, r4
 8100cd8:	d356      	bcc.n	8100d88 <__udivmoddi4+0x2a4>
 8100cda:	d053      	beq.n	8100d84 <__udivmoddi4+0x2a0>
 8100cdc:	b15d      	cbz	r5, 8100cf6 <__udivmoddi4+0x212>
 8100cde:	ebb3 0208 	subs.w	r2, r3, r8
 8100ce2:	eb61 010e 	sbc.w	r1, r1, lr
 8100ce6:	fa01 f707 	lsl.w	r7, r1, r7
 8100cea:	fa22 f306 	lsr.w	r3, r2, r6
 8100cee:	40f1      	lsrs	r1, r6
 8100cf0:	431f      	orrs	r7, r3
 8100cf2:	e9c5 7100 	strd	r7, r1, [r5]
 8100cf6:	2600      	movs	r6, #0
 8100cf8:	4631      	mov	r1, r6
 8100cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100cfe:	f1c2 0320 	rsb	r3, r2, #32
 8100d02:	40d8      	lsrs	r0, r3
 8100d04:	fa0c fc02 	lsl.w	ip, ip, r2
 8100d08:	fa21 f303 	lsr.w	r3, r1, r3
 8100d0c:	4091      	lsls	r1, r2
 8100d0e:	4301      	orrs	r1, r0
 8100d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100d14:	fa1f fe8c 	uxth.w	lr, ip
 8100d18:	fbb3 f0f7 	udiv	r0, r3, r7
 8100d1c:	fb07 3610 	mls	r6, r7, r0, r3
 8100d20:	0c0b      	lsrs	r3, r1, #16
 8100d22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100d26:	fb00 f60e 	mul.w	r6, r0, lr
 8100d2a:	429e      	cmp	r6, r3
 8100d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8100d30:	d908      	bls.n	8100d44 <__udivmoddi4+0x260>
 8100d32:	eb1c 0303 	adds.w	r3, ip, r3
 8100d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8100d3a:	d22f      	bcs.n	8100d9c <__udivmoddi4+0x2b8>
 8100d3c:	429e      	cmp	r6, r3
 8100d3e:	d92d      	bls.n	8100d9c <__udivmoddi4+0x2b8>
 8100d40:	3802      	subs	r0, #2
 8100d42:	4463      	add	r3, ip
 8100d44:	1b9b      	subs	r3, r3, r6
 8100d46:	b289      	uxth	r1, r1
 8100d48:	fbb3 f6f7 	udiv	r6, r3, r7
 8100d4c:	fb07 3316 	mls	r3, r7, r6, r3
 8100d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100d54:	fb06 f30e 	mul.w	r3, r6, lr
 8100d58:	428b      	cmp	r3, r1
 8100d5a:	d908      	bls.n	8100d6e <__udivmoddi4+0x28a>
 8100d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8100d60:	f106 38ff 	add.w	r8, r6, #4294967295
 8100d64:	d216      	bcs.n	8100d94 <__udivmoddi4+0x2b0>
 8100d66:	428b      	cmp	r3, r1
 8100d68:	d914      	bls.n	8100d94 <__udivmoddi4+0x2b0>
 8100d6a:	3e02      	subs	r6, #2
 8100d6c:	4461      	add	r1, ip
 8100d6e:	1ac9      	subs	r1, r1, r3
 8100d70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100d74:	e738      	b.n	8100be8 <__udivmoddi4+0x104>
 8100d76:	462e      	mov	r6, r5
 8100d78:	4628      	mov	r0, r5
 8100d7a:	e705      	b.n	8100b88 <__udivmoddi4+0xa4>
 8100d7c:	4606      	mov	r6, r0
 8100d7e:	e6e3      	b.n	8100b48 <__udivmoddi4+0x64>
 8100d80:	4618      	mov	r0, r3
 8100d82:	e6f8      	b.n	8100b76 <__udivmoddi4+0x92>
 8100d84:	454b      	cmp	r3, r9
 8100d86:	d2a9      	bcs.n	8100cdc <__udivmoddi4+0x1f8>
 8100d88:	ebb9 0802 	subs.w	r8, r9, r2
 8100d8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8100d90:	3801      	subs	r0, #1
 8100d92:	e7a3      	b.n	8100cdc <__udivmoddi4+0x1f8>
 8100d94:	4646      	mov	r6, r8
 8100d96:	e7ea      	b.n	8100d6e <__udivmoddi4+0x28a>
 8100d98:	4620      	mov	r0, r4
 8100d9a:	e794      	b.n	8100cc6 <__udivmoddi4+0x1e2>
 8100d9c:	4640      	mov	r0, r8
 8100d9e:	e7d1      	b.n	8100d44 <__udivmoddi4+0x260>
 8100da0:	46d0      	mov	r8, sl
 8100da2:	e77b      	b.n	8100c9c <__udivmoddi4+0x1b8>
 8100da4:	3b02      	subs	r3, #2
 8100da6:	4461      	add	r1, ip
 8100da8:	e732      	b.n	8100c10 <__udivmoddi4+0x12c>
 8100daa:	4630      	mov	r0, r6
 8100dac:	e709      	b.n	8100bc2 <__udivmoddi4+0xde>
 8100dae:	4464      	add	r4, ip
 8100db0:	3802      	subs	r0, #2
 8100db2:	e742      	b.n	8100c3a <__udivmoddi4+0x156>

08100db4 <__aeabi_idiv0>:
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100db8:	b480      	push	{r7}
 8100dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100dbc:	4b09      	ldr	r3, [pc, #36]	; (8100de4 <SystemInit+0x2c>)
 8100dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100dc2:	4a08      	ldr	r2, [pc, #32]	; (8100de4 <SystemInit+0x2c>)
 8100dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100dcc:	4b05      	ldr	r3, [pc, #20]	; (8100de4 <SystemInit+0x2c>)
 8100dce:	691b      	ldr	r3, [r3, #16]
 8100dd0:	4a04      	ldr	r2, [pc, #16]	; (8100de4 <SystemInit+0x2c>)
 8100dd2:	f043 0310 	orr.w	r3, r3, #16
 8100dd6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100dd8:	bf00      	nop
 8100dda:	46bd      	mov	sp, r7
 8100ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de0:	4770      	bx	lr
 8100de2:	bf00      	nop
 8100de4:	e000ed00 	.word	0xe000ed00

08100de8 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8100de8:	b480      	push	{r7}
 8100dea:	b085      	sub	sp, #20
 8100dec:	af00      	add	r7, sp, #0
 8100dee:	4603      	mov	r3, r0
 8100df0:	6039      	str	r1, [r7, #0]
 8100df2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8100df4:	683b      	ldr	r3, [r7, #0]
 8100df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8100df8:	3301      	adds	r3, #1
 8100dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100dfe:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8100e00:	683b      	ldr	r3, [r7, #0]
 8100e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8100e04:	68fb      	ldr	r3, [r7, #12]
 8100e06:	429a      	cmp	r2, r3
 8100e08:	d007      	beq.n	8100e1a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8100e0a:	683b      	ldr	r3, [r7, #0]
 8100e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8100e0e:	683a      	ldr	r2, [r7, #0]
 8100e10:	79f9      	ldrb	r1, [r7, #7]
 8100e12:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8100e14:	68fa      	ldr	r2, [r7, #12]
 8100e16:	683b      	ldr	r3, [r7, #0]
 8100e18:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8100e1a:	bf00      	nop
 8100e1c:	3714      	adds	r7, #20
 8100e1e:	46bd      	mov	sp, r7
 8100e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e24:	4770      	bx	lr
	...

08100e28 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8100e28:	b580      	push	{r7, lr}
 8100e2a:	b086      	sub	sp, #24
 8100e2c:	af00      	add	r7, sp, #0
 8100e2e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8100e30:	687b      	ldr	r3, [r7, #4]
 8100e32:	681b      	ldr	r3, [r3, #0]
 8100e34:	69db      	ldr	r3, [r3, #28]
 8100e36:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	681b      	ldr	r3, [r3, #0]
 8100e3c:	681b      	ldr	r3, [r3, #0]
 8100e3e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8100e40:	697b      	ldr	r3, [r7, #20]
 8100e42:	f003 0320 	and.w	r3, r3, #32
 8100e46:	2b00      	cmp	r3, #0
 8100e48:	d013      	beq.n	8100e72 <Uart_isr+0x4a>
 8100e4a:	693b      	ldr	r3, [r7, #16]
 8100e4c:	f003 0320 	and.w	r3, r3, #32
 8100e50:	2b00      	cmp	r3, #0
 8100e52:	d00e      	beq.n	8100e72 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8100e54:	687b      	ldr	r3, [r7, #4]
 8100e56:	681b      	ldr	r3, [r3, #0]
 8100e58:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8100e5a:	687b      	ldr	r3, [r7, #4]
 8100e5c:	681b      	ldr	r3, [r3, #0]
 8100e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100e60:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8100e62:	4b1c      	ldr	r3, [pc, #112]	; (8100ed4 <Uart_isr+0xac>)
 8100e64:	681a      	ldr	r2, [r3, #0]
 8100e66:	7bfb      	ldrb	r3, [r7, #15]
 8100e68:	4611      	mov	r1, r2
 8100e6a:	4618      	mov	r0, r3
 8100e6c:	f7ff ffbc 	bl	8100de8 <store_char>
        return;
 8100e70:	e02c      	b.n	8100ecc <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE_TXFNF) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8100e72:	697b      	ldr	r3, [r7, #20]
 8100e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100e78:	2b00      	cmp	r3, #0
 8100e7a:	d027      	beq.n	8100ecc <Uart_isr+0xa4>
 8100e7c:	693b      	ldr	r3, [r7, #16]
 8100e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100e82:	2b00      	cmp	r3, #0
 8100e84:	d022      	beq.n	8100ecc <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8100e86:	4b14      	ldr	r3, [pc, #80]	; (8100ed8 <Uart_isr+0xb0>)
 8100e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8100e8a:	4b13      	ldr	r3, [pc, #76]	; (8100ed8 <Uart_isr+0xb0>)
 8100e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8100e8e:	429a      	cmp	r2, r3
 8100e90:	d108      	bne.n	8100ea4 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8100e92:	687b      	ldr	r3, [r7, #4]
 8100e94:	681b      	ldr	r3, [r3, #0]
 8100e96:	681a      	ldr	r2, [r3, #0]
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	681b      	ldr	r3, [r3, #0]
 8100e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8100ea0:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->TDR = c;

    	    }
    	return;
 8100ea2:	e012      	b.n	8100eca <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8100ea4:	4b0c      	ldr	r3, [pc, #48]	; (8100ed8 <Uart_isr+0xb0>)
 8100ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8100ea8:	4a0b      	ldr	r2, [pc, #44]	; (8100ed8 <Uart_isr+0xb0>)
 8100eaa:	5cd3      	ldrb	r3, [r2, r3]
 8100eac:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8100eae:	4b0a      	ldr	r3, [pc, #40]	; (8100ed8 <Uart_isr+0xb0>)
 8100eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8100eb2:	3301      	adds	r3, #1
 8100eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100eb8:	4a07      	ldr	r2, [pc, #28]	; (8100ed8 <Uart_isr+0xb0>)
 8100eba:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->ISR;
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	681b      	ldr	r3, [r3, #0]
 8100ec0:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8100ec2:	687b      	ldr	r3, [r7, #4]
 8100ec4:	681b      	ldr	r3, [r3, #0]
 8100ec6:	7bba      	ldrb	r2, [r7, #14]
 8100ec8:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8100eca:	bf00      	nop
    }
}
 8100ecc:	3718      	adds	r7, #24
 8100ece:	46bd      	mov	sp, r7
 8100ed0:	bd80      	pop	{r7, pc}
 8100ed2:	bf00      	nop
 8100ed4:	10000074 	.word	0x10000074
 8100ed8:	1000002c 	.word	0x1000002c
 8100edc:	00000000 	.word	0x00000000

08100ee0 <HAL_TIM_IC_CaptureCallback>:
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8100ee0:	b580      	push	{r7, lr}
 8100ee2:	b082      	sub	sp, #8
 8100ee4:	af00      	add	r7, sp, #0
 8100ee6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8100ee8:	687b      	ldr	r3, [r7, #4]
 8100eea:	7f1b      	ldrb	r3, [r3, #28]
 8100eec:	2b01      	cmp	r3, #1
 8100eee:	f040 8083 	bne.w	8100ff8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8100ef2:	4b45      	ldr	r3, [pc, #276]	; (8101008 <HAL_TIM_IC_CaptureCallback+0x128>)
 8100ef4:	781b      	ldrb	r3, [r3, #0]
 8100ef6:	2b00      	cmp	r3, #0
 8100ef8:	d11a      	bne.n	8100f30 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8100efa:	2100      	movs	r1, #0
 8100efc:	6878      	ldr	r0, [r7, #4]
 8100efe:	f003 fbf7 	bl	81046f0 <HAL_TIM_ReadCapturedValue>
 8100f02:	4603      	mov	r3, r0
 8100f04:	4a41      	ldr	r2, [pc, #260]	; (810100c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8100f06:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8100f08:	4b3f      	ldr	r3, [pc, #252]	; (8101008 <HAL_TIM_IC_CaptureCallback+0x128>)
 8100f0a:	2201      	movs	r2, #1
 8100f0c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	681b      	ldr	r3, [r3, #0]
 8100f12:	6a1a      	ldr	r2, [r3, #32]
 8100f14:	687b      	ldr	r3, [r7, #4]
 8100f16:	681b      	ldr	r3, [r3, #0]
 8100f18:	f022 020a 	bic.w	r2, r2, #10
 8100f1c:	621a      	str	r2, [r3, #32]
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	681b      	ldr	r3, [r3, #0]
 8100f22:	6a1a      	ldr	r2, [r3, #32]
 8100f24:	687b      	ldr	r3, [r7, #4]
 8100f26:	681b      	ldr	r3, [r3, #0]
 8100f28:	f042 0202 	orr.w	r2, r2, #2
 8100f2c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8100f2e:	e063      	b.n	8100ff8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8100f30:	4b35      	ldr	r3, [pc, #212]	; (8101008 <HAL_TIM_IC_CaptureCallback+0x128>)
 8100f32:	781b      	ldrb	r3, [r3, #0]
 8100f34:	2b01      	cmp	r3, #1
 8100f36:	d15f      	bne.n	8100ff8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8100f38:	2100      	movs	r1, #0
 8100f3a:	6878      	ldr	r0, [r7, #4]
 8100f3c:	f003 fbd8 	bl	81046f0 <HAL_TIM_ReadCapturedValue>
 8100f40:	4603      	mov	r3, r0
 8100f42:	4a33      	ldr	r2, [pc, #204]	; (8101010 <HAL_TIM_IC_CaptureCallback+0x130>)
 8100f44:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	681b      	ldr	r3, [r3, #0]
 8100f4a:	2200      	movs	r2, #0
 8100f4c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8100f4e:	4b30      	ldr	r3, [pc, #192]	; (8101010 <HAL_TIM_IC_CaptureCallback+0x130>)
 8100f50:	681a      	ldr	r2, [r3, #0]
 8100f52:	4b2e      	ldr	r3, [pc, #184]	; (810100c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8100f54:	681b      	ldr	r3, [r3, #0]
 8100f56:	429a      	cmp	r2, r3
 8100f58:	d907      	bls.n	8100f6a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8100f5a:	4b2d      	ldr	r3, [pc, #180]	; (8101010 <HAL_TIM_IC_CaptureCallback+0x130>)
 8100f5c:	681a      	ldr	r2, [r3, #0]
 8100f5e:	4b2b      	ldr	r3, [pc, #172]	; (810100c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8100f60:	681b      	ldr	r3, [r3, #0]
 8100f62:	1ad3      	subs	r3, r2, r3
 8100f64:	4a2b      	ldr	r2, [pc, #172]	; (8101014 <HAL_TIM_IC_CaptureCallback+0x134>)
 8100f66:	6013      	str	r3, [r2, #0]
 8100f68:	e00f      	b.n	8100f8a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8100f6a:	4b28      	ldr	r3, [pc, #160]	; (810100c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8100f6c:	681a      	ldr	r2, [r3, #0]
 8100f6e:	4b28      	ldr	r3, [pc, #160]	; (8101010 <HAL_TIM_IC_CaptureCallback+0x130>)
 8100f70:	681b      	ldr	r3, [r3, #0]
 8100f72:	429a      	cmp	r2, r3
 8100f74:	d909      	bls.n	8100f8a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8100f76:	4b26      	ldr	r3, [pc, #152]	; (8101010 <HAL_TIM_IC_CaptureCallback+0x130>)
 8100f78:	681a      	ldr	r2, [r3, #0]
 8100f7a:	4b24      	ldr	r3, [pc, #144]	; (810100c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8100f7c:	681b      	ldr	r3, [r3, #0]
 8100f7e:	1ad3      	subs	r3, r2, r3
 8100f80:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8100f84:	33ff      	adds	r3, #255	; 0xff
 8100f86:	4a23      	ldr	r2, [pc, #140]	; (8101014 <HAL_TIM_IC_CaptureCallback+0x134>)
 8100f88:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8100f8a:	4b22      	ldr	r3, [pc, #136]	; (8101014 <HAL_TIM_IC_CaptureCallback+0x134>)
 8100f8c:	681b      	ldr	r3, [r3, #0]
 8100f8e:	4618      	mov	r0, r3
 8100f90:	f7ff fae4 	bl	810055c <__aeabi_ui2d>
 8100f94:	a31a      	add	r3, pc, #104	; (adr r3, 8101000 <HAL_TIM_IC_CaptureCallback+0x120>)
 8100f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100f9a:	f7ff fb59 	bl	8100650 <__aeabi_dmul>
 8100f9e:	4602      	mov	r2, r0
 8100fa0:	460b      	mov	r3, r1
 8100fa2:	4610      	mov	r0, r2
 8100fa4:	4619      	mov	r1, r3
 8100fa6:	f04f 0200 	mov.w	r2, #0
 8100faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100fae:	f7ff fc79 	bl	81008a4 <__aeabi_ddiv>
 8100fb2:	4602      	mov	r2, r0
 8100fb4:	460b      	mov	r3, r1
 8100fb6:	4610      	mov	r0, r2
 8100fb8:	4619      	mov	r1, r3
 8100fba:	f7ff fd5b 	bl	8100a74 <__aeabi_d2uiz>
 8100fbe:	4603      	mov	r3, r0
 8100fc0:	b2da      	uxtb	r2, r3
 8100fc2:	4b15      	ldr	r3, [pc, #84]	; (8101018 <HAL_TIM_IC_CaptureCallback+0x138>)
 8100fc4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8100fc6:	4b10      	ldr	r3, [pc, #64]	; (8101008 <HAL_TIM_IC_CaptureCallback+0x128>)
 8100fc8:	2200      	movs	r2, #0
 8100fca:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8100fcc:	687b      	ldr	r3, [r7, #4]
 8100fce:	681b      	ldr	r3, [r3, #0]
 8100fd0:	6a1a      	ldr	r2, [r3, #32]
 8100fd2:	687b      	ldr	r3, [r7, #4]
 8100fd4:	681b      	ldr	r3, [r3, #0]
 8100fd6:	f022 020a 	bic.w	r2, r2, #10
 8100fda:	621a      	str	r2, [r3, #32]
 8100fdc:	687b      	ldr	r3, [r7, #4]
 8100fde:	681a      	ldr	r2, [r3, #0]
 8100fe0:	687b      	ldr	r3, [r7, #4]
 8100fe2:	681b      	ldr	r3, [r3, #0]
 8100fe4:	6a12      	ldr	r2, [r2, #32]
 8100fe6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8100fe8:	4b0c      	ldr	r3, [pc, #48]	; (810101c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8100fea:	681b      	ldr	r3, [r3, #0]
 8100fec:	68da      	ldr	r2, [r3, #12]
 8100fee:	4b0b      	ldr	r3, [pc, #44]	; (810101c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8100ff0:	681b      	ldr	r3, [r3, #0]
 8100ff2:	f022 0202 	bic.w	r2, r2, #2
 8100ff6:	60da      	str	r2, [r3, #12]
}
 8100ff8:	bf00      	nop
 8100ffa:	3708      	adds	r7, #8
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	bd80      	pop	{r7, pc}
 8101000:	b020c49c 	.word	0xb020c49c
 8101004:	3fa16872 	.word	0x3fa16872
 8101008:	10000160 	.word	0x10000160
 810100c:	10000154 	.word	0x10000154
 8101010:	10000158 	.word	0x10000158
 8101014:	1000015c 	.word	0x1000015c
 8101018:	10000161 	.word	0x10000161
 810101c:	10000078 	.word	0x10000078

08101020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101020:	b580      	push	{r7, lr}
 8101022:	b082      	sub	sp, #8
 8101024:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101026:	4b1d      	ldr	r3, [pc, #116]	; (810109c <main+0x7c>)
 8101028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810102c:	4a1b      	ldr	r2, [pc, #108]	; (810109c <main+0x7c>)
 810102e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101036:	4b19      	ldr	r3, [pc, #100]	; (810109c <main+0x7c>)
 8101038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101040:	607b      	str	r3, [r7, #4]
 8101042:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101044:	2001      	movs	r0, #1
 8101046:	f001 fb67 	bl	8102718 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810104a:	f001 fbf1 	bl	8102830 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810104e:	2201      	movs	r2, #1
 8101050:	2102      	movs	r1, #2
 8101052:	2000      	movs	r0, #0
 8101054:	f001 fb72 	bl	810273c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101058:	4b11      	ldr	r3, [pc, #68]	; (81010a0 <main+0x80>)
 810105a:	681b      	ldr	r3, [r3, #0]
 810105c:	091b      	lsrs	r3, r3, #4
 810105e:	f003 030f 	and.w	r3, r3, #15
 8101062:	2b07      	cmp	r3, #7
 8101064:	d108      	bne.n	8101078 <main+0x58>
 8101066:	4b0f      	ldr	r3, [pc, #60]	; (81010a4 <main+0x84>)
 8101068:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810106c:	4a0d      	ldr	r2, [pc, #52]	; (81010a4 <main+0x84>)
 810106e:	f043 0301 	orr.w	r3, r3, #1
 8101072:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101076:	e007      	b.n	8101088 <main+0x68>
 8101078:	4b0a      	ldr	r3, [pc, #40]	; (81010a4 <main+0x84>)
 810107a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810107e:	4a09      	ldr	r2, [pc, #36]	; (81010a4 <main+0x84>)
 8101080:	f043 0301 	orr.w	r3, r3, #1
 8101084:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101088:	f000 fa5a 	bl	8101540 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810108c:	f000 f8b2 	bl	81011f4 <MX_GPIO_Init>
  MX_UART4_Init();
 8101090:	f000 f864 	bl	810115c <MX_UART4_Init>
  MX_TIM1_Init();
 8101094:	f000 f808 	bl	81010a8 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101098:	e7fe      	b.n	8101098 <main+0x78>
 810109a:	bf00      	nop
 810109c:	58024400 	.word	0x58024400
 81010a0:	e000ed00 	.word	0xe000ed00
 81010a4:	58026400 	.word	0x58026400

081010a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81010a8:	b580      	push	{r7, lr}
 81010aa:	b088      	sub	sp, #32
 81010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81010ae:	f107 0314 	add.w	r3, r7, #20
 81010b2:	2200      	movs	r2, #0
 81010b4:	601a      	str	r2, [r3, #0]
 81010b6:	605a      	str	r2, [r3, #4]
 81010b8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 81010ba:	1d3b      	adds	r3, r7, #4
 81010bc:	2200      	movs	r2, #0
 81010be:	601a      	str	r2, [r3, #0]
 81010c0:	605a      	str	r2, [r3, #4]
 81010c2:	609a      	str	r2, [r3, #8]
 81010c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81010c6:	4b23      	ldr	r3, [pc, #140]	; (8101154 <MX_TIM1_Init+0xac>)
 81010c8:	4a23      	ldr	r2, [pc, #140]	; (8101158 <MX_TIM1_Init+0xb0>)
 81010ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 81010cc:	4b21      	ldr	r3, [pc, #132]	; (8101154 <MX_TIM1_Init+0xac>)
 81010ce:	2247      	movs	r2, #71	; 0x47
 81010d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81010d2:	4b20      	ldr	r3, [pc, #128]	; (8101154 <MX_TIM1_Init+0xac>)
 81010d4:	2200      	movs	r2, #0
 81010d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 81010d8:	4b1e      	ldr	r3, [pc, #120]	; (8101154 <MX_TIM1_Init+0xac>)
 81010da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 81010de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81010e0:	4b1c      	ldr	r3, [pc, #112]	; (8101154 <MX_TIM1_Init+0xac>)
 81010e2:	2200      	movs	r2, #0
 81010e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81010e6:	4b1b      	ldr	r3, [pc, #108]	; (8101154 <MX_TIM1_Init+0xac>)
 81010e8:	2200      	movs	r2, #0
 81010ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81010ec:	4b19      	ldr	r3, [pc, #100]	; (8101154 <MX_TIM1_Init+0xac>)
 81010ee:	2200      	movs	r2, #0
 81010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 81010f2:	4818      	ldr	r0, [pc, #96]	; (8101154 <MX_TIM1_Init+0xac>)
 81010f4:	f003 f8ea 	bl	81042cc <HAL_TIM_IC_Init>
 81010f8:	4603      	mov	r3, r0
 81010fa:	2b00      	cmp	r3, #0
 81010fc:	d001      	beq.n	8101102 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 81010fe:	f000 f8b1 	bl	8101264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101102:	2300      	movs	r3, #0
 8101104:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101106:	2300      	movs	r3, #0
 8101108:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810110a:	2300      	movs	r3, #0
 810110c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810110e:	f107 0314 	add.w	r3, r7, #20
 8101112:	4619      	mov	r1, r3
 8101114:	480f      	ldr	r0, [pc, #60]	; (8101154 <MX_TIM1_Init+0xac>)
 8101116:	f003 fd1b 	bl	8104b50 <HAL_TIMEx_MasterConfigSynchronization>
 810111a:	4603      	mov	r3, r0
 810111c:	2b00      	cmp	r3, #0
 810111e:	d001      	beq.n	8101124 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101120:	f000 f8a0 	bl	8101264 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8101124:	2300      	movs	r3, #0
 8101126:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8101128:	2301      	movs	r3, #1
 810112a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 810112c:	2300      	movs	r3, #0
 810112e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8101130:	2300      	movs	r3, #0
 8101132:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8101134:	1d3b      	adds	r3, r7, #4
 8101136:	2200      	movs	r2, #0
 8101138:	4619      	mov	r1, r3
 810113a:	4806      	ldr	r0, [pc, #24]	; (8101154 <MX_TIM1_Init+0xac>)
 810113c:	f003 fa3c 	bl	81045b8 <HAL_TIM_IC_ConfigChannel>
 8101140:	4603      	mov	r3, r0
 8101142:	2b00      	cmp	r3, #0
 8101144:	d001      	beq.n	810114a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8101146:	f000 f88d 	bl	8101264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 810114a:	bf00      	nop
 810114c:	3720      	adds	r7, #32
 810114e:	46bd      	mov	sp, r7
 8101150:	bd80      	pop	{r7, pc}
 8101152:	bf00      	nop
 8101154:	10000078 	.word	0x10000078
 8101158:	40010000 	.word	0x40010000

0810115c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 810115c:	b580      	push	{r7, lr}
 810115e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8101160:	4b22      	ldr	r3, [pc, #136]	; (81011ec <MX_UART4_Init+0x90>)
 8101162:	4a23      	ldr	r2, [pc, #140]	; (81011f0 <MX_UART4_Init+0x94>)
 8101164:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8101166:	4b21      	ldr	r3, [pc, #132]	; (81011ec <MX_UART4_Init+0x90>)
 8101168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810116c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 810116e:	4b1f      	ldr	r3, [pc, #124]	; (81011ec <MX_UART4_Init+0x90>)
 8101170:	2200      	movs	r2, #0
 8101172:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8101174:	4b1d      	ldr	r3, [pc, #116]	; (81011ec <MX_UART4_Init+0x90>)
 8101176:	2200      	movs	r2, #0
 8101178:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 810117a:	4b1c      	ldr	r3, [pc, #112]	; (81011ec <MX_UART4_Init+0x90>)
 810117c:	2200      	movs	r2, #0
 810117e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8101180:	4b1a      	ldr	r3, [pc, #104]	; (81011ec <MX_UART4_Init+0x90>)
 8101182:	220c      	movs	r2, #12
 8101184:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101186:	4b19      	ldr	r3, [pc, #100]	; (81011ec <MX_UART4_Init+0x90>)
 8101188:	2200      	movs	r2, #0
 810118a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 810118c:	4b17      	ldr	r3, [pc, #92]	; (81011ec <MX_UART4_Init+0x90>)
 810118e:	2200      	movs	r2, #0
 8101190:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101192:	4b16      	ldr	r3, [pc, #88]	; (81011ec <MX_UART4_Init+0x90>)
 8101194:	2200      	movs	r2, #0
 8101196:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101198:	4b14      	ldr	r3, [pc, #80]	; (81011ec <MX_UART4_Init+0x90>)
 810119a:	2200      	movs	r2, #0
 810119c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810119e:	4b13      	ldr	r3, [pc, #76]	; (81011ec <MX_UART4_Init+0x90>)
 81011a0:	2200      	movs	r2, #0
 81011a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 81011a4:	4811      	ldr	r0, [pc, #68]	; (81011ec <MX_UART4_Init+0x90>)
 81011a6:	f003 fd7f 	bl	8104ca8 <HAL_UART_Init>
 81011aa:	4603      	mov	r3, r0
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d001      	beq.n	81011b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 81011b0:	f000 f858 	bl	8101264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81011b4:	2100      	movs	r1, #0
 81011b6:	480d      	ldr	r0, [pc, #52]	; (81011ec <MX_UART4_Init+0x90>)
 81011b8:	f005 f99f 	bl	81064fa <HAL_UARTEx_SetTxFifoThreshold>
 81011bc:	4603      	mov	r3, r0
 81011be:	2b00      	cmp	r3, #0
 81011c0:	d001      	beq.n	81011c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 81011c2:	f000 f84f 	bl	8101264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81011c6:	2100      	movs	r1, #0
 81011c8:	4808      	ldr	r0, [pc, #32]	; (81011ec <MX_UART4_Init+0x90>)
 81011ca:	f005 f9d4 	bl	8106576 <HAL_UARTEx_SetRxFifoThreshold>
 81011ce:	4603      	mov	r3, r0
 81011d0:	2b00      	cmp	r3, #0
 81011d2:	d001      	beq.n	81011d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 81011d4:	f000 f846 	bl	8101264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 81011d8:	4804      	ldr	r0, [pc, #16]	; (81011ec <MX_UART4_Init+0x90>)
 81011da:	f005 f955 	bl	8106488 <HAL_UARTEx_DisableFifoMode>
 81011de:	4603      	mov	r3, r0
 81011e0:	2b00      	cmp	r3, #0
 81011e2:	d001      	beq.n	81011e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 81011e4:	f000 f83e 	bl	8101264 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 81011e8:	bf00      	nop
 81011ea:	bd80      	pop	{r7, pc}
 81011ec:	100000c4 	.word	0x100000c4
 81011f0:	40004c00 	.word	0x40004c00

081011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81011f4:	b480      	push	{r7}
 81011f6:	b085      	sub	sp, #20
 81011f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81011fa:	4b19      	ldr	r3, [pc, #100]	; (8101260 <MX_GPIO_Init+0x6c>)
 81011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101200:	4a17      	ldr	r2, [pc, #92]	; (8101260 <MX_GPIO_Init+0x6c>)
 8101202:	f043 0301 	orr.w	r3, r3, #1
 8101206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810120a:	4b15      	ldr	r3, [pc, #84]	; (8101260 <MX_GPIO_Init+0x6c>)
 810120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101210:	f003 0301 	and.w	r3, r3, #1
 8101214:	60fb      	str	r3, [r7, #12]
 8101216:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101218:	4b11      	ldr	r3, [pc, #68]	; (8101260 <MX_GPIO_Init+0x6c>)
 810121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810121e:	4a10      	ldr	r2, [pc, #64]	; (8101260 <MX_GPIO_Init+0x6c>)
 8101220:	f043 0310 	orr.w	r3, r3, #16
 8101224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101228:	4b0d      	ldr	r3, [pc, #52]	; (8101260 <MX_GPIO_Init+0x6c>)
 810122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810122e:	f003 0310 	and.w	r3, r3, #16
 8101232:	60bb      	str	r3, [r7, #8]
 8101234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101236:	4b0a      	ldr	r3, [pc, #40]	; (8101260 <MX_GPIO_Init+0x6c>)
 8101238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810123c:	4a08      	ldr	r2, [pc, #32]	; (8101260 <MX_GPIO_Init+0x6c>)
 810123e:	f043 0308 	orr.w	r3, r3, #8
 8101242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101246:	4b06      	ldr	r3, [pc, #24]	; (8101260 <MX_GPIO_Init+0x6c>)
 8101248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810124c:	f003 0308 	and.w	r3, r3, #8
 8101250:	607b      	str	r3, [r7, #4]
 8101252:	687b      	ldr	r3, [r7, #4]

}
 8101254:	bf00      	nop
 8101256:	3714      	adds	r7, #20
 8101258:	46bd      	mov	sp, r7
 810125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810125e:	4770      	bx	lr
 8101260:	58024400 	.word	0x58024400

08101264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101264:	b480      	push	{r7}
 8101266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101268:	b672      	cpsid	i
}
 810126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810126c:	e7fe      	b.n	810126c <Error_Handler+0x8>
	...

08101270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101270:	b480      	push	{r7}
 8101272:	b083      	sub	sp, #12
 8101274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101276:	4b0a      	ldr	r3, [pc, #40]	; (81012a0 <HAL_MspInit+0x30>)
 8101278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810127c:	4a08      	ldr	r2, [pc, #32]	; (81012a0 <HAL_MspInit+0x30>)
 810127e:	f043 0302 	orr.w	r3, r3, #2
 8101282:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101286:	4b06      	ldr	r3, [pc, #24]	; (81012a0 <HAL_MspInit+0x30>)
 8101288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810128c:	f003 0302 	and.w	r3, r3, #2
 8101290:	607b      	str	r3, [r7, #4]
 8101292:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101294:	bf00      	nop
 8101296:	370c      	adds	r7, #12
 8101298:	46bd      	mov	sp, r7
 810129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810129e:	4770      	bx	lr
 81012a0:	58024400 	.word	0x58024400

081012a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 81012a4:	b580      	push	{r7, lr}
 81012a6:	b08a      	sub	sp, #40	; 0x28
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012ac:	f107 0314 	add.w	r3, r7, #20
 81012b0:	2200      	movs	r2, #0
 81012b2:	601a      	str	r2, [r3, #0]
 81012b4:	605a      	str	r2, [r3, #4]
 81012b6:	609a      	str	r2, [r3, #8]
 81012b8:	60da      	str	r2, [r3, #12]
 81012ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	4a1e      	ldr	r2, [pc, #120]	; (810133c <HAL_TIM_IC_MspInit+0x98>)
 81012c2:	4293      	cmp	r3, r2
 81012c4:	d136      	bne.n	8101334 <HAL_TIM_IC_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81012c6:	4b1e      	ldr	r3, [pc, #120]	; (8101340 <HAL_TIM_IC_MspInit+0x9c>)
 81012c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012cc:	4a1c      	ldr	r2, [pc, #112]	; (8101340 <HAL_TIM_IC_MspInit+0x9c>)
 81012ce:	f043 0301 	orr.w	r3, r3, #1
 81012d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81012d6:	4b1a      	ldr	r3, [pc, #104]	; (8101340 <HAL_TIM_IC_MspInit+0x9c>)
 81012d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012dc:	f003 0301 	and.w	r3, r3, #1
 81012e0:	613b      	str	r3, [r7, #16]
 81012e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 81012e4:	4b16      	ldr	r3, [pc, #88]	; (8101340 <HAL_TIM_IC_MspInit+0x9c>)
 81012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ea:	4a15      	ldr	r2, [pc, #84]	; (8101340 <HAL_TIM_IC_MspInit+0x9c>)
 81012ec:	f043 0310 	orr.w	r3, r3, #16
 81012f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012f4:	4b12      	ldr	r3, [pc, #72]	; (8101340 <HAL_TIM_IC_MspInit+0x9c>)
 81012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012fa:	f003 0310 	and.w	r3, r3, #16
 81012fe:	60fb      	str	r3, [r7, #12]
 8101300:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101308:	2302      	movs	r3, #2
 810130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810130c:	2300      	movs	r3, #0
 810130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101310:	2300      	movs	r3, #0
 8101312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101314:	2301      	movs	r3, #1
 8101316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101318:	f107 0314 	add.w	r3, r7, #20
 810131c:	4619      	mov	r1, r3
 810131e:	4809      	ldr	r0, [pc, #36]	; (8101344 <HAL_TIM_IC_MspInit+0xa0>)
 8101320:	f001 f84a 	bl	81023b8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8101324:	2200      	movs	r2, #0
 8101326:	2100      	movs	r1, #0
 8101328:	201b      	movs	r0, #27
 810132a:	f000 fa98 	bl	810185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 810132e:	201b      	movs	r0, #27
 8101330:	f000 faaf 	bl	8101892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8101334:	bf00      	nop
 8101336:	3728      	adds	r7, #40	; 0x28
 8101338:	46bd      	mov	sp, r7
 810133a:	bd80      	pop	{r7, pc}
 810133c:	40010000 	.word	0x40010000
 8101340:	58024400 	.word	0x58024400
 8101344:	58021000 	.word	0x58021000

08101348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101348:	b580      	push	{r7, lr}
 810134a:	b0ba      	sub	sp, #232	; 0xe8
 810134c:	af00      	add	r7, sp, #0
 810134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101350:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101354:	2200      	movs	r2, #0
 8101356:	601a      	str	r2, [r3, #0]
 8101358:	605a      	str	r2, [r3, #4]
 810135a:	609a      	str	r2, [r3, #8]
 810135c:	60da      	str	r2, [r3, #12]
 810135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101360:	f107 0318 	add.w	r3, r7, #24
 8101364:	22bc      	movs	r2, #188	; 0xbc
 8101366:	2100      	movs	r1, #0
 8101368:	4618      	mov	r0, r3
 810136a:	f005 f9b5 	bl	81066d8 <memset>
  if(huart->Instance==UART4)
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	681b      	ldr	r3, [r3, #0]
 8101372:	4a3a      	ldr	r2, [pc, #232]	; (810145c <HAL_UART_MspInit+0x114>)
 8101374:	4293      	cmp	r3, r2
 8101376:	d16d      	bne.n	8101454 <HAL_UART_MspInit+0x10c>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8101378:	2302      	movs	r3, #2
 810137a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810137c:	2300      	movs	r3, #0
 810137e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101382:	f107 0318 	add.w	r3, r7, #24
 8101386:	4618      	mov	r0, r3
 8101388:	f001 fc38 	bl	8102bfc <HAL_RCCEx_PeriphCLKConfig>
 810138c:	4603      	mov	r3, r0
 810138e:	2b00      	cmp	r3, #0
 8101390:	d001      	beq.n	8101396 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101392:	f7ff ff67 	bl	8101264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8101396:	4b32      	ldr	r3, [pc, #200]	; (8101460 <HAL_UART_MspInit+0x118>)
 8101398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810139c:	4a30      	ldr	r2, [pc, #192]	; (8101460 <HAL_UART_MspInit+0x118>)
 810139e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81013a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81013a6:	4b2e      	ldr	r3, [pc, #184]	; (8101460 <HAL_UART_MspInit+0x118>)
 81013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81013ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81013b0:	617b      	str	r3, [r7, #20]
 81013b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81013b4:	4b2a      	ldr	r3, [pc, #168]	; (8101460 <HAL_UART_MspInit+0x118>)
 81013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ba:	4a29      	ldr	r2, [pc, #164]	; (8101460 <HAL_UART_MspInit+0x118>)
 81013bc:	f043 0301 	orr.w	r3, r3, #1
 81013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013c4:	4b26      	ldr	r3, [pc, #152]	; (8101460 <HAL_UART_MspInit+0x118>)
 81013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ca:	f003 0301 	and.w	r3, r3, #1
 81013ce:	613b      	str	r3, [r7, #16]
 81013d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81013d2:	4b23      	ldr	r3, [pc, #140]	; (8101460 <HAL_UART_MspInit+0x118>)
 81013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d8:	4a21      	ldr	r2, [pc, #132]	; (8101460 <HAL_UART_MspInit+0x118>)
 81013da:	f043 0308 	orr.w	r3, r3, #8
 81013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013e2:	4b1f      	ldr	r3, [pc, #124]	; (8101460 <HAL_UART_MspInit+0x118>)
 81013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013e8:	f003 0308 	and.w	r3, r3, #8
 81013ec:	60fb      	str	r3, [r7, #12]
 81013ee:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 81013f0:	2301      	movs	r3, #1
 81013f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013f6:	2302      	movs	r3, #2
 81013f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013fc:	2300      	movs	r3, #0
 81013fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101402:	2300      	movs	r3, #0
 8101404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8101408:	2308      	movs	r3, #8
 810140a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810140e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101412:	4619      	mov	r1, r3
 8101414:	4813      	ldr	r0, [pc, #76]	; (8101464 <HAL_UART_MspInit+0x11c>)
 8101416:	f000 ffcf 	bl	81023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 810141a:	2301      	movs	r3, #1
 810141c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101420:	2302      	movs	r3, #2
 8101422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101426:	2300      	movs	r3, #0
 8101428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810142c:	2300      	movs	r3, #0
 810142e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8101432:	2308      	movs	r3, #8
 8101434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101438:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810143c:	4619      	mov	r1, r3
 810143e:	480a      	ldr	r0, [pc, #40]	; (8101468 <HAL_UART_MspInit+0x120>)
 8101440:	f000 ffba 	bl	81023b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8101444:	2200      	movs	r2, #0
 8101446:	2100      	movs	r1, #0
 8101448:	2034      	movs	r0, #52	; 0x34
 810144a:	f000 fa08 	bl	810185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 810144e:	2034      	movs	r0, #52	; 0x34
 8101450:	f000 fa1f 	bl	8101892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8101454:	bf00      	nop
 8101456:	37e8      	adds	r7, #232	; 0xe8
 8101458:	46bd      	mov	sp, r7
 810145a:	bd80      	pop	{r7, pc}
 810145c:	40004c00 	.word	0x40004c00
 8101460:	58024400 	.word	0x58024400
 8101464:	58020000 	.word	0x58020000
 8101468:	58020c00 	.word	0x58020c00

0810146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810146c:	b480      	push	{r7}
 810146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101470:	e7fe      	b.n	8101470 <NMI_Handler+0x4>

08101472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101472:	b480      	push	{r7}
 8101474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101476:	e7fe      	b.n	8101476 <HardFault_Handler+0x4>

08101478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101478:	b480      	push	{r7}
 810147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810147c:	e7fe      	b.n	810147c <MemManage_Handler+0x4>

0810147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810147e:	b480      	push	{r7}
 8101480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101482:	e7fe      	b.n	8101482 <BusFault_Handler+0x4>

08101484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101484:	b480      	push	{r7}
 8101486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101488:	e7fe      	b.n	8101488 <UsageFault_Handler+0x4>

0810148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810148a:	b480      	push	{r7}
 810148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810148e:	bf00      	nop
 8101490:	46bd      	mov	sp, r7
 8101492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101496:	4770      	bx	lr

08101498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101498:	b480      	push	{r7}
 810149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810149c:	bf00      	nop
 810149e:	46bd      	mov	sp, r7
 81014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014a4:	4770      	bx	lr

081014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81014a6:	b480      	push	{r7}
 81014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81014aa:	bf00      	nop
 81014ac:	46bd      	mov	sp, r7
 81014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014b2:	4770      	bx	lr

081014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81014b4:	b580      	push	{r7, lr}
 81014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81014b8:	f000 f8d6 	bl	8101668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81014bc:	bf00      	nop
 81014be:	bd80      	pop	{r7, pc}

081014c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 81014c0:	b580      	push	{r7, lr}
 81014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 81014c4:	4802      	ldr	r0, [pc, #8]	; (81014d0 <TIM1_CC_IRQHandler+0x10>)
 81014c6:	f002 ff58 	bl	810437a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 81014ca:	bf00      	nop
 81014cc:	bd80      	pop	{r7, pc}
 81014ce:	bf00      	nop
 81014d0:	10000078 	.word	0x10000078

081014d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 81014d4:	b580      	push	{r7, lr}
 81014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr(&huart4);
 81014d8:	4803      	ldr	r0, [pc, #12]	; (81014e8 <UART4_IRQHandler+0x14>)
 81014da:	f7ff fca5 	bl	8100e28 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 81014de:	4802      	ldr	r0, [pc, #8]	; (81014e8 <UART4_IRQHandler+0x14>)
 81014e0:	f003 fc32 	bl	8104d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 81014e4:	bf00      	nop
 81014e6:	bd80      	pop	{r7, pc}
 81014e8:	100000c4 	.word	0x100000c4

081014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81014f0:	f7ff fc62 	bl	8100db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81014f4:	480c      	ldr	r0, [pc, #48]	; (8101528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81014f6:	490d      	ldr	r1, [pc, #52]	; (810152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81014f8:	4a0d      	ldr	r2, [pc, #52]	; (8101530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81014fc:	e002      	b.n	8101504 <LoopCopyDataInit>

081014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101502:	3304      	adds	r3, #4

08101504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101508:	d3f9      	bcc.n	81014fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810150a:	4a0a      	ldr	r2, [pc, #40]	; (8101534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810150c:	4c0a      	ldr	r4, [pc, #40]	; (8101538 <LoopFillZerobss+0x22>)
  movs r3, #0
 810150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101510:	e001      	b.n	8101516 <LoopFillZerobss>

08101512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101514:	3204      	adds	r2, #4

08101516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101518:	d3fb      	bcc.n	8101512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810151a:	f005 f8b9 	bl	8106690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810151e:	f7ff fd7f 	bl	8101020 <main>
  bx  lr
 8101522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101524:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101528:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810152c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101530:	08106748 	.word	0x08106748
  ldr r2, =_sbss
 8101534:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101538:	10000168 	.word	0x10000168

0810153c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810153c:	e7fe      	b.n	810153c <ADC3_IRQHandler>
	...

08101540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101540:	b580      	push	{r7, lr}
 8101542:	b082      	sub	sp, #8
 8101544:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101546:	4b28      	ldr	r3, [pc, #160]	; (81015e8 <HAL_Init+0xa8>)
 8101548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810154c:	4a26      	ldr	r2, [pc, #152]	; (81015e8 <HAL_Init+0xa8>)
 810154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101552:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101556:	4b24      	ldr	r3, [pc, #144]	; (81015e8 <HAL_Init+0xa8>)
 8101558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101560:	603b      	str	r3, [r7, #0]
 8101562:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101564:	4b21      	ldr	r3, [pc, #132]	; (81015ec <HAL_Init+0xac>)
 8101566:	681b      	ldr	r3, [r3, #0]
 8101568:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810156c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101570:	4a1e      	ldr	r2, [pc, #120]	; (81015ec <HAL_Init+0xac>)
 8101572:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101576:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101578:	4b1c      	ldr	r3, [pc, #112]	; (81015ec <HAL_Init+0xac>)
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	4a1b      	ldr	r2, [pc, #108]	; (81015ec <HAL_Init+0xac>)
 810157e:	f043 0301 	orr.w	r3, r3, #1
 8101582:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101584:	2003      	movs	r0, #3
 8101586:	f000 f95f 	bl	8101848 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810158a:	f001 f95f 	bl	810284c <HAL_RCC_GetSysClockFreq>
 810158e:	4602      	mov	r2, r0
 8101590:	4b15      	ldr	r3, [pc, #84]	; (81015e8 <HAL_Init+0xa8>)
 8101592:	699b      	ldr	r3, [r3, #24]
 8101594:	0a1b      	lsrs	r3, r3, #8
 8101596:	f003 030f 	and.w	r3, r3, #15
 810159a:	4915      	ldr	r1, [pc, #84]	; (81015f0 <HAL_Init+0xb0>)
 810159c:	5ccb      	ldrb	r3, [r1, r3]
 810159e:	f003 031f 	and.w	r3, r3, #31
 81015a2:	fa22 f303 	lsr.w	r3, r2, r3
 81015a6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81015a8:	4b0f      	ldr	r3, [pc, #60]	; (81015e8 <HAL_Init+0xa8>)
 81015aa:	699b      	ldr	r3, [r3, #24]
 81015ac:	f003 030f 	and.w	r3, r3, #15
 81015b0:	4a0f      	ldr	r2, [pc, #60]	; (81015f0 <HAL_Init+0xb0>)
 81015b2:	5cd3      	ldrb	r3, [r2, r3]
 81015b4:	f003 031f 	and.w	r3, r3, #31
 81015b8:	687a      	ldr	r2, [r7, #4]
 81015ba:	fa22 f303 	lsr.w	r3, r2, r3
 81015be:	4a0d      	ldr	r2, [pc, #52]	; (81015f4 <HAL_Init+0xb4>)
 81015c0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015c2:	4b0c      	ldr	r3, [pc, #48]	; (81015f4 <HAL_Init+0xb4>)
 81015c4:	681b      	ldr	r3, [r3, #0]
 81015c6:	4a0c      	ldr	r2, [pc, #48]	; (81015f8 <HAL_Init+0xb8>)
 81015c8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81015ca:	200f      	movs	r0, #15
 81015cc:	f000 f816 	bl	81015fc <HAL_InitTick>
 81015d0:	4603      	mov	r3, r0
 81015d2:	2b00      	cmp	r3, #0
 81015d4:	d001      	beq.n	81015da <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81015d6:	2301      	movs	r3, #1
 81015d8:	e002      	b.n	81015e0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81015da:	f7ff fe49 	bl	8101270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81015de:	2300      	movs	r3, #0
}
 81015e0:	4618      	mov	r0, r3
 81015e2:	3708      	adds	r7, #8
 81015e4:	46bd      	mov	sp, r7
 81015e6:	bd80      	pop	{r7, pc}
 81015e8:	58024400 	.word	0x58024400
 81015ec:	40024400 	.word	0x40024400
 81015f0:	08106700 	.word	0x08106700
 81015f4:	10000004 	.word	0x10000004
 81015f8:	10000000 	.word	0x10000000

081015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81015fc:	b580      	push	{r7, lr}
 81015fe:	b082      	sub	sp, #8
 8101600:	af00      	add	r7, sp, #0
 8101602:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101604:	4b15      	ldr	r3, [pc, #84]	; (810165c <HAL_InitTick+0x60>)
 8101606:	781b      	ldrb	r3, [r3, #0]
 8101608:	2b00      	cmp	r3, #0
 810160a:	d101      	bne.n	8101610 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810160c:	2301      	movs	r3, #1
 810160e:	e021      	b.n	8101654 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101610:	4b13      	ldr	r3, [pc, #76]	; (8101660 <HAL_InitTick+0x64>)
 8101612:	681a      	ldr	r2, [r3, #0]
 8101614:	4b11      	ldr	r3, [pc, #68]	; (810165c <HAL_InitTick+0x60>)
 8101616:	781b      	ldrb	r3, [r3, #0]
 8101618:	4619      	mov	r1, r3
 810161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101622:	fbb2 f3f3 	udiv	r3, r2, r3
 8101626:	4618      	mov	r0, r3
 8101628:	f000 f941 	bl	81018ae <HAL_SYSTICK_Config>
 810162c:	4603      	mov	r3, r0
 810162e:	2b00      	cmp	r3, #0
 8101630:	d001      	beq.n	8101636 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101632:	2301      	movs	r3, #1
 8101634:	e00e      	b.n	8101654 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101636:	687b      	ldr	r3, [r7, #4]
 8101638:	2b0f      	cmp	r3, #15
 810163a:	d80a      	bhi.n	8101652 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810163c:	2200      	movs	r2, #0
 810163e:	6879      	ldr	r1, [r7, #4]
 8101640:	f04f 30ff 	mov.w	r0, #4294967295
 8101644:	f000 f90b 	bl	810185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101648:	4a06      	ldr	r2, [pc, #24]	; (8101664 <HAL_InitTick+0x68>)
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810164e:	2300      	movs	r3, #0
 8101650:	e000      	b.n	8101654 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101652:	2301      	movs	r3, #1
}
 8101654:	4618      	mov	r0, r3
 8101656:	3708      	adds	r7, #8
 8101658:	46bd      	mov	sp, r7
 810165a:	bd80      	pop	{r7, pc}
 810165c:	1000000c 	.word	0x1000000c
 8101660:	10000000 	.word	0x10000000
 8101664:	10000008 	.word	0x10000008

08101668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101668:	b480      	push	{r7}
 810166a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810166c:	4b06      	ldr	r3, [pc, #24]	; (8101688 <HAL_IncTick+0x20>)
 810166e:	781b      	ldrb	r3, [r3, #0]
 8101670:	461a      	mov	r2, r3
 8101672:	4b06      	ldr	r3, [pc, #24]	; (810168c <HAL_IncTick+0x24>)
 8101674:	681b      	ldr	r3, [r3, #0]
 8101676:	4413      	add	r3, r2
 8101678:	4a04      	ldr	r2, [pc, #16]	; (810168c <HAL_IncTick+0x24>)
 810167a:	6013      	str	r3, [r2, #0]
}
 810167c:	bf00      	nop
 810167e:	46bd      	mov	sp, r7
 8101680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101684:	4770      	bx	lr
 8101686:	bf00      	nop
 8101688:	1000000c 	.word	0x1000000c
 810168c:	10000164 	.word	0x10000164

08101690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101690:	b480      	push	{r7}
 8101692:	af00      	add	r7, sp, #0
  return uwTick;
 8101694:	4b03      	ldr	r3, [pc, #12]	; (81016a4 <HAL_GetTick+0x14>)
 8101696:	681b      	ldr	r3, [r3, #0]
}
 8101698:	4618      	mov	r0, r3
 810169a:	46bd      	mov	sp, r7
 810169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016a0:	4770      	bx	lr
 81016a2:	bf00      	nop
 81016a4:	10000164 	.word	0x10000164

081016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81016a8:	b480      	push	{r7}
 81016aa:	b085      	sub	sp, #20
 81016ac:	af00      	add	r7, sp, #0
 81016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81016b0:	687b      	ldr	r3, [r7, #4]
 81016b2:	f003 0307 	and.w	r3, r3, #7
 81016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81016b8:	4b0c      	ldr	r3, [pc, #48]	; (81016ec <__NVIC_SetPriorityGrouping+0x44>)
 81016ba:	68db      	ldr	r3, [r3, #12]
 81016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81016be:	68ba      	ldr	r2, [r7, #8]
 81016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81016c4:	4013      	ands	r3, r2
 81016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81016c8:	68fb      	ldr	r3, [r7, #12]
 81016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81016cc:	68bb      	ldr	r3, [r7, #8]
 81016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81016da:	4a04      	ldr	r2, [pc, #16]	; (81016ec <__NVIC_SetPriorityGrouping+0x44>)
 81016dc:	68bb      	ldr	r3, [r7, #8]
 81016de:	60d3      	str	r3, [r2, #12]
}
 81016e0:	bf00      	nop
 81016e2:	3714      	adds	r7, #20
 81016e4:	46bd      	mov	sp, r7
 81016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ea:	4770      	bx	lr
 81016ec:	e000ed00 	.word	0xe000ed00

081016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81016f0:	b480      	push	{r7}
 81016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81016f4:	4b04      	ldr	r3, [pc, #16]	; (8101708 <__NVIC_GetPriorityGrouping+0x18>)
 81016f6:	68db      	ldr	r3, [r3, #12]
 81016f8:	0a1b      	lsrs	r3, r3, #8
 81016fa:	f003 0307 	and.w	r3, r3, #7
}
 81016fe:	4618      	mov	r0, r3
 8101700:	46bd      	mov	sp, r7
 8101702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101706:	4770      	bx	lr
 8101708:	e000ed00 	.word	0xe000ed00

0810170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810170c:	b480      	push	{r7}
 810170e:	b083      	sub	sp, #12
 8101710:	af00      	add	r7, sp, #0
 8101712:	4603      	mov	r3, r0
 8101714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810171a:	2b00      	cmp	r3, #0
 810171c:	db0b      	blt.n	8101736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810171e:	88fb      	ldrh	r3, [r7, #6]
 8101720:	f003 021f 	and.w	r2, r3, #31
 8101724:	4907      	ldr	r1, [pc, #28]	; (8101744 <__NVIC_EnableIRQ+0x38>)
 8101726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810172a:	095b      	lsrs	r3, r3, #5
 810172c:	2001      	movs	r0, #1
 810172e:	fa00 f202 	lsl.w	r2, r0, r2
 8101732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101736:	bf00      	nop
 8101738:	370c      	adds	r7, #12
 810173a:	46bd      	mov	sp, r7
 810173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101740:	4770      	bx	lr
 8101742:	bf00      	nop
 8101744:	e000e100 	.word	0xe000e100

08101748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101748:	b480      	push	{r7}
 810174a:	b083      	sub	sp, #12
 810174c:	af00      	add	r7, sp, #0
 810174e:	4603      	mov	r3, r0
 8101750:	6039      	str	r1, [r7, #0]
 8101752:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101758:	2b00      	cmp	r3, #0
 810175a:	db0a      	blt.n	8101772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810175c:	683b      	ldr	r3, [r7, #0]
 810175e:	b2da      	uxtb	r2, r3
 8101760:	490c      	ldr	r1, [pc, #48]	; (8101794 <__NVIC_SetPriority+0x4c>)
 8101762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101766:	0112      	lsls	r2, r2, #4
 8101768:	b2d2      	uxtb	r2, r2
 810176a:	440b      	add	r3, r1
 810176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101770:	e00a      	b.n	8101788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101772:	683b      	ldr	r3, [r7, #0]
 8101774:	b2da      	uxtb	r2, r3
 8101776:	4908      	ldr	r1, [pc, #32]	; (8101798 <__NVIC_SetPriority+0x50>)
 8101778:	88fb      	ldrh	r3, [r7, #6]
 810177a:	f003 030f 	and.w	r3, r3, #15
 810177e:	3b04      	subs	r3, #4
 8101780:	0112      	lsls	r2, r2, #4
 8101782:	b2d2      	uxtb	r2, r2
 8101784:	440b      	add	r3, r1
 8101786:	761a      	strb	r2, [r3, #24]
}
 8101788:	bf00      	nop
 810178a:	370c      	adds	r7, #12
 810178c:	46bd      	mov	sp, r7
 810178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101792:	4770      	bx	lr
 8101794:	e000e100 	.word	0xe000e100
 8101798:	e000ed00 	.word	0xe000ed00

0810179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810179c:	b480      	push	{r7}
 810179e:	b089      	sub	sp, #36	; 0x24
 81017a0:	af00      	add	r7, sp, #0
 81017a2:	60f8      	str	r0, [r7, #12]
 81017a4:	60b9      	str	r1, [r7, #8]
 81017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81017a8:	68fb      	ldr	r3, [r7, #12]
 81017aa:	f003 0307 	and.w	r3, r3, #7
 81017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81017b0:	69fb      	ldr	r3, [r7, #28]
 81017b2:	f1c3 0307 	rsb	r3, r3, #7
 81017b6:	2b04      	cmp	r3, #4
 81017b8:	bf28      	it	cs
 81017ba:	2304      	movcs	r3, #4
 81017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81017be:	69fb      	ldr	r3, [r7, #28]
 81017c0:	3304      	adds	r3, #4
 81017c2:	2b06      	cmp	r3, #6
 81017c4:	d902      	bls.n	81017cc <NVIC_EncodePriority+0x30>
 81017c6:	69fb      	ldr	r3, [r7, #28]
 81017c8:	3b03      	subs	r3, #3
 81017ca:	e000      	b.n	81017ce <NVIC_EncodePriority+0x32>
 81017cc:	2300      	movs	r3, #0
 81017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81017d0:	f04f 32ff 	mov.w	r2, #4294967295
 81017d4:	69bb      	ldr	r3, [r7, #24]
 81017d6:	fa02 f303 	lsl.w	r3, r2, r3
 81017da:	43da      	mvns	r2, r3
 81017dc:	68bb      	ldr	r3, [r7, #8]
 81017de:	401a      	ands	r2, r3
 81017e0:	697b      	ldr	r3, [r7, #20]
 81017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81017e4:	f04f 31ff 	mov.w	r1, #4294967295
 81017e8:	697b      	ldr	r3, [r7, #20]
 81017ea:	fa01 f303 	lsl.w	r3, r1, r3
 81017ee:	43d9      	mvns	r1, r3
 81017f0:	687b      	ldr	r3, [r7, #4]
 81017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81017f4:	4313      	orrs	r3, r2
         );
}
 81017f6:	4618      	mov	r0, r3
 81017f8:	3724      	adds	r7, #36	; 0x24
 81017fa:	46bd      	mov	sp, r7
 81017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101800:	4770      	bx	lr
	...

08101804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101804:	b580      	push	{r7, lr}
 8101806:	b082      	sub	sp, #8
 8101808:	af00      	add	r7, sp, #0
 810180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	3b01      	subs	r3, #1
 8101810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101814:	d301      	bcc.n	810181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101816:	2301      	movs	r3, #1
 8101818:	e00f      	b.n	810183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810181a:	4a0a      	ldr	r2, [pc, #40]	; (8101844 <SysTick_Config+0x40>)
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	3b01      	subs	r3, #1
 8101820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101822:	210f      	movs	r1, #15
 8101824:	f04f 30ff 	mov.w	r0, #4294967295
 8101828:	f7ff ff8e 	bl	8101748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810182c:	4b05      	ldr	r3, [pc, #20]	; (8101844 <SysTick_Config+0x40>)
 810182e:	2200      	movs	r2, #0
 8101830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101832:	4b04      	ldr	r3, [pc, #16]	; (8101844 <SysTick_Config+0x40>)
 8101834:	2207      	movs	r2, #7
 8101836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101838:	2300      	movs	r3, #0
}
 810183a:	4618      	mov	r0, r3
 810183c:	3708      	adds	r7, #8
 810183e:	46bd      	mov	sp, r7
 8101840:	bd80      	pop	{r7, pc}
 8101842:	bf00      	nop
 8101844:	e000e010 	.word	0xe000e010

08101848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101848:	b580      	push	{r7, lr}
 810184a:	b082      	sub	sp, #8
 810184c:	af00      	add	r7, sp, #0
 810184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101850:	6878      	ldr	r0, [r7, #4]
 8101852:	f7ff ff29 	bl	81016a8 <__NVIC_SetPriorityGrouping>
}
 8101856:	bf00      	nop
 8101858:	3708      	adds	r7, #8
 810185a:	46bd      	mov	sp, r7
 810185c:	bd80      	pop	{r7, pc}

0810185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810185e:	b580      	push	{r7, lr}
 8101860:	b086      	sub	sp, #24
 8101862:	af00      	add	r7, sp, #0
 8101864:	4603      	mov	r3, r0
 8101866:	60b9      	str	r1, [r7, #8]
 8101868:	607a      	str	r2, [r7, #4]
 810186a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810186c:	f7ff ff40 	bl	81016f0 <__NVIC_GetPriorityGrouping>
 8101870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101872:	687a      	ldr	r2, [r7, #4]
 8101874:	68b9      	ldr	r1, [r7, #8]
 8101876:	6978      	ldr	r0, [r7, #20]
 8101878:	f7ff ff90 	bl	810179c <NVIC_EncodePriority>
 810187c:	4602      	mov	r2, r0
 810187e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101882:	4611      	mov	r1, r2
 8101884:	4618      	mov	r0, r3
 8101886:	f7ff ff5f 	bl	8101748 <__NVIC_SetPriority>
}
 810188a:	bf00      	nop
 810188c:	3718      	adds	r7, #24
 810188e:	46bd      	mov	sp, r7
 8101890:	bd80      	pop	{r7, pc}

08101892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101892:	b580      	push	{r7, lr}
 8101894:	b082      	sub	sp, #8
 8101896:	af00      	add	r7, sp, #0
 8101898:	4603      	mov	r3, r0
 810189a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81018a0:	4618      	mov	r0, r3
 81018a2:	f7ff ff33 	bl	810170c <__NVIC_EnableIRQ>
}
 81018a6:	bf00      	nop
 81018a8:	3708      	adds	r7, #8
 81018aa:	46bd      	mov	sp, r7
 81018ac:	bd80      	pop	{r7, pc}

081018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81018ae:	b580      	push	{r7, lr}
 81018b0:	b082      	sub	sp, #8
 81018b2:	af00      	add	r7, sp, #0
 81018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81018b6:	6878      	ldr	r0, [r7, #4]
 81018b8:	f7ff ffa4 	bl	8101804 <SysTick_Config>
 81018bc:	4603      	mov	r3, r0
}
 81018be:	4618      	mov	r0, r3
 81018c0:	3708      	adds	r7, #8
 81018c2:	46bd      	mov	sp, r7
 81018c4:	bd80      	pop	{r7, pc}
	...

081018c8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81018c8:	b480      	push	{r7}
 81018ca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81018cc:	4b07      	ldr	r3, [pc, #28]	; (81018ec <HAL_GetCurrentCPUID+0x24>)
 81018ce:	681b      	ldr	r3, [r3, #0]
 81018d0:	091b      	lsrs	r3, r3, #4
 81018d2:	f003 030f 	and.w	r3, r3, #15
 81018d6:	2b07      	cmp	r3, #7
 81018d8:	d101      	bne.n	81018de <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81018da:	2303      	movs	r3, #3
 81018dc:	e000      	b.n	81018e0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81018de:	2301      	movs	r3, #1
  }
}
 81018e0:	4618      	mov	r0, r3
 81018e2:	46bd      	mov	sp, r7
 81018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e8:	4770      	bx	lr
 81018ea:	bf00      	nop
 81018ec:	e000ed00 	.word	0xe000ed00

081018f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81018f0:	b580      	push	{r7, lr}
 81018f2:	b086      	sub	sp, #24
 81018f4:	af00      	add	r7, sp, #0
 81018f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81018f8:	f7ff feca 	bl	8101690 <HAL_GetTick>
 81018fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	2b00      	cmp	r3, #0
 8101902:	d101      	bne.n	8101908 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8101904:	2301      	movs	r3, #1
 8101906:	e2dc      	b.n	8101ec2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810190e:	b2db      	uxtb	r3, r3
 8101910:	2b02      	cmp	r3, #2
 8101912:	d008      	beq.n	8101926 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8101914:	687b      	ldr	r3, [r7, #4]
 8101916:	2280      	movs	r2, #128	; 0x80
 8101918:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	2200      	movs	r2, #0
 810191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8101922:	2301      	movs	r3, #1
 8101924:	e2cd      	b.n	8101ec2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101926:	687b      	ldr	r3, [r7, #4]
 8101928:	681b      	ldr	r3, [r3, #0]
 810192a:	4a76      	ldr	r2, [pc, #472]	; (8101b04 <HAL_DMA_Abort+0x214>)
 810192c:	4293      	cmp	r3, r2
 810192e:	d04a      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	681b      	ldr	r3, [r3, #0]
 8101934:	4a74      	ldr	r2, [pc, #464]	; (8101b08 <HAL_DMA_Abort+0x218>)
 8101936:	4293      	cmp	r3, r2
 8101938:	d045      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	681b      	ldr	r3, [r3, #0]
 810193e:	4a73      	ldr	r2, [pc, #460]	; (8101b0c <HAL_DMA_Abort+0x21c>)
 8101940:	4293      	cmp	r3, r2
 8101942:	d040      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	681b      	ldr	r3, [r3, #0]
 8101948:	4a71      	ldr	r2, [pc, #452]	; (8101b10 <HAL_DMA_Abort+0x220>)
 810194a:	4293      	cmp	r3, r2
 810194c:	d03b      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 810194e:	687b      	ldr	r3, [r7, #4]
 8101950:	681b      	ldr	r3, [r3, #0]
 8101952:	4a70      	ldr	r2, [pc, #448]	; (8101b14 <HAL_DMA_Abort+0x224>)
 8101954:	4293      	cmp	r3, r2
 8101956:	d036      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	681b      	ldr	r3, [r3, #0]
 810195c:	4a6e      	ldr	r2, [pc, #440]	; (8101b18 <HAL_DMA_Abort+0x228>)
 810195e:	4293      	cmp	r3, r2
 8101960:	d031      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	681b      	ldr	r3, [r3, #0]
 8101966:	4a6d      	ldr	r2, [pc, #436]	; (8101b1c <HAL_DMA_Abort+0x22c>)
 8101968:	4293      	cmp	r3, r2
 810196a:	d02c      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	681b      	ldr	r3, [r3, #0]
 8101970:	4a6b      	ldr	r2, [pc, #428]	; (8101b20 <HAL_DMA_Abort+0x230>)
 8101972:	4293      	cmp	r3, r2
 8101974:	d027      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	681b      	ldr	r3, [r3, #0]
 810197a:	4a6a      	ldr	r2, [pc, #424]	; (8101b24 <HAL_DMA_Abort+0x234>)
 810197c:	4293      	cmp	r3, r2
 810197e:	d022      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	681b      	ldr	r3, [r3, #0]
 8101984:	4a68      	ldr	r2, [pc, #416]	; (8101b28 <HAL_DMA_Abort+0x238>)
 8101986:	4293      	cmp	r3, r2
 8101988:	d01d      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	4a67      	ldr	r2, [pc, #412]	; (8101b2c <HAL_DMA_Abort+0x23c>)
 8101990:	4293      	cmp	r3, r2
 8101992:	d018      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	4a65      	ldr	r2, [pc, #404]	; (8101b30 <HAL_DMA_Abort+0x240>)
 810199a:	4293      	cmp	r3, r2
 810199c:	d013      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	681b      	ldr	r3, [r3, #0]
 81019a2:	4a64      	ldr	r2, [pc, #400]	; (8101b34 <HAL_DMA_Abort+0x244>)
 81019a4:	4293      	cmp	r3, r2
 81019a6:	d00e      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 81019a8:	687b      	ldr	r3, [r7, #4]
 81019aa:	681b      	ldr	r3, [r3, #0]
 81019ac:	4a62      	ldr	r2, [pc, #392]	; (8101b38 <HAL_DMA_Abort+0x248>)
 81019ae:	4293      	cmp	r3, r2
 81019b0:	d009      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 81019b2:	687b      	ldr	r3, [r7, #4]
 81019b4:	681b      	ldr	r3, [r3, #0]
 81019b6:	4a61      	ldr	r2, [pc, #388]	; (8101b3c <HAL_DMA_Abort+0x24c>)
 81019b8:	4293      	cmp	r3, r2
 81019ba:	d004      	beq.n	81019c6 <HAL_DMA_Abort+0xd6>
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	681b      	ldr	r3, [r3, #0]
 81019c0:	4a5f      	ldr	r2, [pc, #380]	; (8101b40 <HAL_DMA_Abort+0x250>)
 81019c2:	4293      	cmp	r3, r2
 81019c4:	d101      	bne.n	81019ca <HAL_DMA_Abort+0xda>
 81019c6:	2301      	movs	r3, #1
 81019c8:	e000      	b.n	81019cc <HAL_DMA_Abort+0xdc>
 81019ca:	2300      	movs	r3, #0
 81019cc:	2b00      	cmp	r3, #0
 81019ce:	d013      	beq.n	81019f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	681b      	ldr	r3, [r3, #0]
 81019d4:	681a      	ldr	r2, [r3, #0]
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	681b      	ldr	r3, [r3, #0]
 81019da:	f022 021e 	bic.w	r2, r2, #30
 81019de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81019e0:	687b      	ldr	r3, [r7, #4]
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	695a      	ldr	r2, [r3, #20]
 81019e6:	687b      	ldr	r3, [r7, #4]
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81019ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81019f0:	687b      	ldr	r3, [r7, #4]
 81019f2:	681b      	ldr	r3, [r3, #0]
 81019f4:	617b      	str	r3, [r7, #20]
 81019f6:	e00a      	b.n	8101a0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	681a      	ldr	r2, [r3, #0]
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	681b      	ldr	r3, [r3, #0]
 8101a02:	f022 020e 	bic.w	r2, r2, #14
 8101a06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8101a08:	687b      	ldr	r3, [r7, #4]
 8101a0a:	681b      	ldr	r3, [r3, #0]
 8101a0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	681b      	ldr	r3, [r3, #0]
 8101a12:	4a3c      	ldr	r2, [pc, #240]	; (8101b04 <HAL_DMA_Abort+0x214>)
 8101a14:	4293      	cmp	r3, r2
 8101a16:	d072      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	681b      	ldr	r3, [r3, #0]
 8101a1c:	4a3a      	ldr	r2, [pc, #232]	; (8101b08 <HAL_DMA_Abort+0x218>)
 8101a1e:	4293      	cmp	r3, r2
 8101a20:	d06d      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	681b      	ldr	r3, [r3, #0]
 8101a26:	4a39      	ldr	r2, [pc, #228]	; (8101b0c <HAL_DMA_Abort+0x21c>)
 8101a28:	4293      	cmp	r3, r2
 8101a2a:	d068      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	681b      	ldr	r3, [r3, #0]
 8101a30:	4a37      	ldr	r2, [pc, #220]	; (8101b10 <HAL_DMA_Abort+0x220>)
 8101a32:	4293      	cmp	r3, r2
 8101a34:	d063      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	4a36      	ldr	r2, [pc, #216]	; (8101b14 <HAL_DMA_Abort+0x224>)
 8101a3c:	4293      	cmp	r3, r2
 8101a3e:	d05e      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a40:	687b      	ldr	r3, [r7, #4]
 8101a42:	681b      	ldr	r3, [r3, #0]
 8101a44:	4a34      	ldr	r2, [pc, #208]	; (8101b18 <HAL_DMA_Abort+0x228>)
 8101a46:	4293      	cmp	r3, r2
 8101a48:	d059      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	4a33      	ldr	r2, [pc, #204]	; (8101b1c <HAL_DMA_Abort+0x22c>)
 8101a50:	4293      	cmp	r3, r2
 8101a52:	d054      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	4a31      	ldr	r2, [pc, #196]	; (8101b20 <HAL_DMA_Abort+0x230>)
 8101a5a:	4293      	cmp	r3, r2
 8101a5c:	d04f      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	4a30      	ldr	r2, [pc, #192]	; (8101b24 <HAL_DMA_Abort+0x234>)
 8101a64:	4293      	cmp	r3, r2
 8101a66:	d04a      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a68:	687b      	ldr	r3, [r7, #4]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	4a2e      	ldr	r2, [pc, #184]	; (8101b28 <HAL_DMA_Abort+0x238>)
 8101a6e:	4293      	cmp	r3, r2
 8101a70:	d045      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	681b      	ldr	r3, [r3, #0]
 8101a76:	4a2d      	ldr	r2, [pc, #180]	; (8101b2c <HAL_DMA_Abort+0x23c>)
 8101a78:	4293      	cmp	r3, r2
 8101a7a:	d040      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	4a2b      	ldr	r2, [pc, #172]	; (8101b30 <HAL_DMA_Abort+0x240>)
 8101a82:	4293      	cmp	r3, r2
 8101a84:	d03b      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	681b      	ldr	r3, [r3, #0]
 8101a8a:	4a2a      	ldr	r2, [pc, #168]	; (8101b34 <HAL_DMA_Abort+0x244>)
 8101a8c:	4293      	cmp	r3, r2
 8101a8e:	d036      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	681b      	ldr	r3, [r3, #0]
 8101a94:	4a28      	ldr	r2, [pc, #160]	; (8101b38 <HAL_DMA_Abort+0x248>)
 8101a96:	4293      	cmp	r3, r2
 8101a98:	d031      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	681b      	ldr	r3, [r3, #0]
 8101a9e:	4a27      	ldr	r2, [pc, #156]	; (8101b3c <HAL_DMA_Abort+0x24c>)
 8101aa0:	4293      	cmp	r3, r2
 8101aa2:	d02c      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	681b      	ldr	r3, [r3, #0]
 8101aa8:	4a25      	ldr	r2, [pc, #148]	; (8101b40 <HAL_DMA_Abort+0x250>)
 8101aaa:	4293      	cmp	r3, r2
 8101aac:	d027      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101aae:	687b      	ldr	r3, [r7, #4]
 8101ab0:	681b      	ldr	r3, [r3, #0]
 8101ab2:	4a24      	ldr	r2, [pc, #144]	; (8101b44 <HAL_DMA_Abort+0x254>)
 8101ab4:	4293      	cmp	r3, r2
 8101ab6:	d022      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101ab8:	687b      	ldr	r3, [r7, #4]
 8101aba:	681b      	ldr	r3, [r3, #0]
 8101abc:	4a22      	ldr	r2, [pc, #136]	; (8101b48 <HAL_DMA_Abort+0x258>)
 8101abe:	4293      	cmp	r3, r2
 8101ac0:	d01d      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	681b      	ldr	r3, [r3, #0]
 8101ac6:	4a21      	ldr	r2, [pc, #132]	; (8101b4c <HAL_DMA_Abort+0x25c>)
 8101ac8:	4293      	cmp	r3, r2
 8101aca:	d018      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	681b      	ldr	r3, [r3, #0]
 8101ad0:	4a1f      	ldr	r2, [pc, #124]	; (8101b50 <HAL_DMA_Abort+0x260>)
 8101ad2:	4293      	cmp	r3, r2
 8101ad4:	d013      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	4a1e      	ldr	r2, [pc, #120]	; (8101b54 <HAL_DMA_Abort+0x264>)
 8101adc:	4293      	cmp	r3, r2
 8101ade:	d00e      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	4a1c      	ldr	r2, [pc, #112]	; (8101b58 <HAL_DMA_Abort+0x268>)
 8101ae6:	4293      	cmp	r3, r2
 8101ae8:	d009      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101aea:	687b      	ldr	r3, [r7, #4]
 8101aec:	681b      	ldr	r3, [r3, #0]
 8101aee:	4a1b      	ldr	r2, [pc, #108]	; (8101b5c <HAL_DMA_Abort+0x26c>)
 8101af0:	4293      	cmp	r3, r2
 8101af2:	d004      	beq.n	8101afe <HAL_DMA_Abort+0x20e>
 8101af4:	687b      	ldr	r3, [r7, #4]
 8101af6:	681b      	ldr	r3, [r3, #0]
 8101af8:	4a19      	ldr	r2, [pc, #100]	; (8101b60 <HAL_DMA_Abort+0x270>)
 8101afa:	4293      	cmp	r3, r2
 8101afc:	d132      	bne.n	8101b64 <HAL_DMA_Abort+0x274>
 8101afe:	2301      	movs	r3, #1
 8101b00:	e031      	b.n	8101b66 <HAL_DMA_Abort+0x276>
 8101b02:	bf00      	nop
 8101b04:	40020010 	.word	0x40020010
 8101b08:	40020028 	.word	0x40020028
 8101b0c:	40020040 	.word	0x40020040
 8101b10:	40020058 	.word	0x40020058
 8101b14:	40020070 	.word	0x40020070
 8101b18:	40020088 	.word	0x40020088
 8101b1c:	400200a0 	.word	0x400200a0
 8101b20:	400200b8 	.word	0x400200b8
 8101b24:	40020410 	.word	0x40020410
 8101b28:	40020428 	.word	0x40020428
 8101b2c:	40020440 	.word	0x40020440
 8101b30:	40020458 	.word	0x40020458
 8101b34:	40020470 	.word	0x40020470
 8101b38:	40020488 	.word	0x40020488
 8101b3c:	400204a0 	.word	0x400204a0
 8101b40:	400204b8 	.word	0x400204b8
 8101b44:	58025408 	.word	0x58025408
 8101b48:	5802541c 	.word	0x5802541c
 8101b4c:	58025430 	.word	0x58025430
 8101b50:	58025444 	.word	0x58025444
 8101b54:	58025458 	.word	0x58025458
 8101b58:	5802546c 	.word	0x5802546c
 8101b5c:	58025480 	.word	0x58025480
 8101b60:	58025494 	.word	0x58025494
 8101b64:	2300      	movs	r3, #0
 8101b66:	2b00      	cmp	r3, #0
 8101b68:	d007      	beq.n	8101b7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101b6e:	681a      	ldr	r2, [r3, #0]
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	4a6d      	ldr	r2, [pc, #436]	; (8101d34 <HAL_DMA_Abort+0x444>)
 8101b80:	4293      	cmp	r3, r2
 8101b82:	d04a      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	681b      	ldr	r3, [r3, #0]
 8101b88:	4a6b      	ldr	r2, [pc, #428]	; (8101d38 <HAL_DMA_Abort+0x448>)
 8101b8a:	4293      	cmp	r3, r2
 8101b8c:	d045      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	4a6a      	ldr	r2, [pc, #424]	; (8101d3c <HAL_DMA_Abort+0x44c>)
 8101b94:	4293      	cmp	r3, r2
 8101b96:	d040      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	681b      	ldr	r3, [r3, #0]
 8101b9c:	4a68      	ldr	r2, [pc, #416]	; (8101d40 <HAL_DMA_Abort+0x450>)
 8101b9e:	4293      	cmp	r3, r2
 8101ba0:	d03b      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101ba2:	687b      	ldr	r3, [r7, #4]
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	4a67      	ldr	r2, [pc, #412]	; (8101d44 <HAL_DMA_Abort+0x454>)
 8101ba8:	4293      	cmp	r3, r2
 8101baa:	d036      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bac:	687b      	ldr	r3, [r7, #4]
 8101bae:	681b      	ldr	r3, [r3, #0]
 8101bb0:	4a65      	ldr	r2, [pc, #404]	; (8101d48 <HAL_DMA_Abort+0x458>)
 8101bb2:	4293      	cmp	r3, r2
 8101bb4:	d031      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	681b      	ldr	r3, [r3, #0]
 8101bba:	4a64      	ldr	r2, [pc, #400]	; (8101d4c <HAL_DMA_Abort+0x45c>)
 8101bbc:	4293      	cmp	r3, r2
 8101bbe:	d02c      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bc0:	687b      	ldr	r3, [r7, #4]
 8101bc2:	681b      	ldr	r3, [r3, #0]
 8101bc4:	4a62      	ldr	r2, [pc, #392]	; (8101d50 <HAL_DMA_Abort+0x460>)
 8101bc6:	4293      	cmp	r3, r2
 8101bc8:	d027      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	4a61      	ldr	r2, [pc, #388]	; (8101d54 <HAL_DMA_Abort+0x464>)
 8101bd0:	4293      	cmp	r3, r2
 8101bd2:	d022      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	4a5f      	ldr	r2, [pc, #380]	; (8101d58 <HAL_DMA_Abort+0x468>)
 8101bda:	4293      	cmp	r3, r2
 8101bdc:	d01d      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	681b      	ldr	r3, [r3, #0]
 8101be2:	4a5e      	ldr	r2, [pc, #376]	; (8101d5c <HAL_DMA_Abort+0x46c>)
 8101be4:	4293      	cmp	r3, r2
 8101be6:	d018      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	681b      	ldr	r3, [r3, #0]
 8101bec:	4a5c      	ldr	r2, [pc, #368]	; (8101d60 <HAL_DMA_Abort+0x470>)
 8101bee:	4293      	cmp	r3, r2
 8101bf0:	d013      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	4a5b      	ldr	r2, [pc, #364]	; (8101d64 <HAL_DMA_Abort+0x474>)
 8101bf8:	4293      	cmp	r3, r2
 8101bfa:	d00e      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	681b      	ldr	r3, [r3, #0]
 8101c00:	4a59      	ldr	r2, [pc, #356]	; (8101d68 <HAL_DMA_Abort+0x478>)
 8101c02:	4293      	cmp	r3, r2
 8101c04:	d009      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	4a58      	ldr	r2, [pc, #352]	; (8101d6c <HAL_DMA_Abort+0x47c>)
 8101c0c:	4293      	cmp	r3, r2
 8101c0e:	d004      	beq.n	8101c1a <HAL_DMA_Abort+0x32a>
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	4a56      	ldr	r2, [pc, #344]	; (8101d70 <HAL_DMA_Abort+0x480>)
 8101c16:	4293      	cmp	r3, r2
 8101c18:	d108      	bne.n	8101c2c <HAL_DMA_Abort+0x33c>
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	681b      	ldr	r3, [r3, #0]
 8101c1e:	681a      	ldr	r2, [r3, #0]
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	681b      	ldr	r3, [r3, #0]
 8101c24:	f022 0201 	bic.w	r2, r2, #1
 8101c28:	601a      	str	r2, [r3, #0]
 8101c2a:	e007      	b.n	8101c3c <HAL_DMA_Abort+0x34c>
 8101c2c:	687b      	ldr	r3, [r7, #4]
 8101c2e:	681b      	ldr	r3, [r3, #0]
 8101c30:	681a      	ldr	r2, [r3, #0]
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	681b      	ldr	r3, [r3, #0]
 8101c36:	f022 0201 	bic.w	r2, r2, #1
 8101c3a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101c3c:	e013      	b.n	8101c66 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101c3e:	f7ff fd27 	bl	8101690 <HAL_GetTick>
 8101c42:	4602      	mov	r2, r0
 8101c44:	693b      	ldr	r3, [r7, #16]
 8101c46:	1ad3      	subs	r3, r2, r3
 8101c48:	2b05      	cmp	r3, #5
 8101c4a:	d90c      	bls.n	8101c66 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	2220      	movs	r2, #32
 8101c50:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101c52:	687b      	ldr	r3, [r7, #4]
 8101c54:	2203      	movs	r2, #3
 8101c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8101c5a:	687b      	ldr	r3, [r7, #4]
 8101c5c:	2200      	movs	r2, #0
 8101c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8101c62:	2301      	movs	r3, #1
 8101c64:	e12d      	b.n	8101ec2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101c66:	697b      	ldr	r3, [r7, #20]
 8101c68:	681b      	ldr	r3, [r3, #0]
 8101c6a:	f003 0301 	and.w	r3, r3, #1
 8101c6e:	2b00      	cmp	r3, #0
 8101c70:	d1e5      	bne.n	8101c3e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	681b      	ldr	r3, [r3, #0]
 8101c76:	4a2f      	ldr	r2, [pc, #188]	; (8101d34 <HAL_DMA_Abort+0x444>)
 8101c78:	4293      	cmp	r3, r2
 8101c7a:	d04a      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	681b      	ldr	r3, [r3, #0]
 8101c80:	4a2d      	ldr	r2, [pc, #180]	; (8101d38 <HAL_DMA_Abort+0x448>)
 8101c82:	4293      	cmp	r3, r2
 8101c84:	d045      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	681b      	ldr	r3, [r3, #0]
 8101c8a:	4a2c      	ldr	r2, [pc, #176]	; (8101d3c <HAL_DMA_Abort+0x44c>)
 8101c8c:	4293      	cmp	r3, r2
 8101c8e:	d040      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	4a2a      	ldr	r2, [pc, #168]	; (8101d40 <HAL_DMA_Abort+0x450>)
 8101c96:	4293      	cmp	r3, r2
 8101c98:	d03b      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	681b      	ldr	r3, [r3, #0]
 8101c9e:	4a29      	ldr	r2, [pc, #164]	; (8101d44 <HAL_DMA_Abort+0x454>)
 8101ca0:	4293      	cmp	r3, r2
 8101ca2:	d036      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	4a27      	ldr	r2, [pc, #156]	; (8101d48 <HAL_DMA_Abort+0x458>)
 8101caa:	4293      	cmp	r3, r2
 8101cac:	d031      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101cae:	687b      	ldr	r3, [r7, #4]
 8101cb0:	681b      	ldr	r3, [r3, #0]
 8101cb2:	4a26      	ldr	r2, [pc, #152]	; (8101d4c <HAL_DMA_Abort+0x45c>)
 8101cb4:	4293      	cmp	r3, r2
 8101cb6:	d02c      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	4a24      	ldr	r2, [pc, #144]	; (8101d50 <HAL_DMA_Abort+0x460>)
 8101cbe:	4293      	cmp	r3, r2
 8101cc0:	d027      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	4a23      	ldr	r2, [pc, #140]	; (8101d54 <HAL_DMA_Abort+0x464>)
 8101cc8:	4293      	cmp	r3, r2
 8101cca:	d022      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	4a21      	ldr	r2, [pc, #132]	; (8101d58 <HAL_DMA_Abort+0x468>)
 8101cd2:	4293      	cmp	r3, r2
 8101cd4:	d01d      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	681b      	ldr	r3, [r3, #0]
 8101cda:	4a20      	ldr	r2, [pc, #128]	; (8101d5c <HAL_DMA_Abort+0x46c>)
 8101cdc:	4293      	cmp	r3, r2
 8101cde:	d018      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101ce0:	687b      	ldr	r3, [r7, #4]
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	4a1e      	ldr	r2, [pc, #120]	; (8101d60 <HAL_DMA_Abort+0x470>)
 8101ce6:	4293      	cmp	r3, r2
 8101ce8:	d013      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	4a1d      	ldr	r2, [pc, #116]	; (8101d64 <HAL_DMA_Abort+0x474>)
 8101cf0:	4293      	cmp	r3, r2
 8101cf2:	d00e      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	4a1b      	ldr	r2, [pc, #108]	; (8101d68 <HAL_DMA_Abort+0x478>)
 8101cfa:	4293      	cmp	r3, r2
 8101cfc:	d009      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	4a1a      	ldr	r2, [pc, #104]	; (8101d6c <HAL_DMA_Abort+0x47c>)
 8101d04:	4293      	cmp	r3, r2
 8101d06:	d004      	beq.n	8101d12 <HAL_DMA_Abort+0x422>
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	4a18      	ldr	r2, [pc, #96]	; (8101d70 <HAL_DMA_Abort+0x480>)
 8101d0e:	4293      	cmp	r3, r2
 8101d10:	d101      	bne.n	8101d16 <HAL_DMA_Abort+0x426>
 8101d12:	2301      	movs	r3, #1
 8101d14:	e000      	b.n	8101d18 <HAL_DMA_Abort+0x428>
 8101d16:	2300      	movs	r3, #0
 8101d18:	2b00      	cmp	r3, #0
 8101d1a:	d02b      	beq.n	8101d74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101d26:	f003 031f 	and.w	r3, r3, #31
 8101d2a:	223f      	movs	r2, #63	; 0x3f
 8101d2c:	409a      	lsls	r2, r3
 8101d2e:	68bb      	ldr	r3, [r7, #8]
 8101d30:	609a      	str	r2, [r3, #8]
 8101d32:	e02a      	b.n	8101d8a <HAL_DMA_Abort+0x49a>
 8101d34:	40020010 	.word	0x40020010
 8101d38:	40020028 	.word	0x40020028
 8101d3c:	40020040 	.word	0x40020040
 8101d40:	40020058 	.word	0x40020058
 8101d44:	40020070 	.word	0x40020070
 8101d48:	40020088 	.word	0x40020088
 8101d4c:	400200a0 	.word	0x400200a0
 8101d50:	400200b8 	.word	0x400200b8
 8101d54:	40020410 	.word	0x40020410
 8101d58:	40020428 	.word	0x40020428
 8101d5c:	40020440 	.word	0x40020440
 8101d60:	40020458 	.word	0x40020458
 8101d64:	40020470 	.word	0x40020470
 8101d68:	40020488 	.word	0x40020488
 8101d6c:	400204a0 	.word	0x400204a0
 8101d70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101d7e:	f003 031f 	and.w	r3, r3, #31
 8101d82:	2201      	movs	r2, #1
 8101d84:	409a      	lsls	r2, r3
 8101d86:	68fb      	ldr	r3, [r7, #12]
 8101d88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101d8a:	687b      	ldr	r3, [r7, #4]
 8101d8c:	681b      	ldr	r3, [r3, #0]
 8101d8e:	4a4f      	ldr	r2, [pc, #316]	; (8101ecc <HAL_DMA_Abort+0x5dc>)
 8101d90:	4293      	cmp	r3, r2
 8101d92:	d072      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	4a4d      	ldr	r2, [pc, #308]	; (8101ed0 <HAL_DMA_Abort+0x5e0>)
 8101d9a:	4293      	cmp	r3, r2
 8101d9c:	d06d      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101d9e:	687b      	ldr	r3, [r7, #4]
 8101da0:	681b      	ldr	r3, [r3, #0]
 8101da2:	4a4c      	ldr	r2, [pc, #304]	; (8101ed4 <HAL_DMA_Abort+0x5e4>)
 8101da4:	4293      	cmp	r3, r2
 8101da6:	d068      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	681b      	ldr	r3, [r3, #0]
 8101dac:	4a4a      	ldr	r2, [pc, #296]	; (8101ed8 <HAL_DMA_Abort+0x5e8>)
 8101dae:	4293      	cmp	r3, r2
 8101db0:	d063      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	681b      	ldr	r3, [r3, #0]
 8101db6:	4a49      	ldr	r2, [pc, #292]	; (8101edc <HAL_DMA_Abort+0x5ec>)
 8101db8:	4293      	cmp	r3, r2
 8101dba:	d05e      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	4a47      	ldr	r2, [pc, #284]	; (8101ee0 <HAL_DMA_Abort+0x5f0>)
 8101dc2:	4293      	cmp	r3, r2
 8101dc4:	d059      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	4a46      	ldr	r2, [pc, #280]	; (8101ee4 <HAL_DMA_Abort+0x5f4>)
 8101dcc:	4293      	cmp	r3, r2
 8101dce:	d054      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	681b      	ldr	r3, [r3, #0]
 8101dd4:	4a44      	ldr	r2, [pc, #272]	; (8101ee8 <HAL_DMA_Abort+0x5f8>)
 8101dd6:	4293      	cmp	r3, r2
 8101dd8:	d04f      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	681b      	ldr	r3, [r3, #0]
 8101dde:	4a43      	ldr	r2, [pc, #268]	; (8101eec <HAL_DMA_Abort+0x5fc>)
 8101de0:	4293      	cmp	r3, r2
 8101de2:	d04a      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	4a41      	ldr	r2, [pc, #260]	; (8101ef0 <HAL_DMA_Abort+0x600>)
 8101dea:	4293      	cmp	r3, r2
 8101dec:	d045      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	681b      	ldr	r3, [r3, #0]
 8101df2:	4a40      	ldr	r2, [pc, #256]	; (8101ef4 <HAL_DMA_Abort+0x604>)
 8101df4:	4293      	cmp	r3, r2
 8101df6:	d040      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	4a3e      	ldr	r2, [pc, #248]	; (8101ef8 <HAL_DMA_Abort+0x608>)
 8101dfe:	4293      	cmp	r3, r2
 8101e00:	d03b      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	681b      	ldr	r3, [r3, #0]
 8101e06:	4a3d      	ldr	r2, [pc, #244]	; (8101efc <HAL_DMA_Abort+0x60c>)
 8101e08:	4293      	cmp	r3, r2
 8101e0a:	d036      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	681b      	ldr	r3, [r3, #0]
 8101e10:	4a3b      	ldr	r2, [pc, #236]	; (8101f00 <HAL_DMA_Abort+0x610>)
 8101e12:	4293      	cmp	r3, r2
 8101e14:	d031      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e16:	687b      	ldr	r3, [r7, #4]
 8101e18:	681b      	ldr	r3, [r3, #0]
 8101e1a:	4a3a      	ldr	r2, [pc, #232]	; (8101f04 <HAL_DMA_Abort+0x614>)
 8101e1c:	4293      	cmp	r3, r2
 8101e1e:	d02c      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	681b      	ldr	r3, [r3, #0]
 8101e24:	4a38      	ldr	r2, [pc, #224]	; (8101f08 <HAL_DMA_Abort+0x618>)
 8101e26:	4293      	cmp	r3, r2
 8101e28:	d027      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	681b      	ldr	r3, [r3, #0]
 8101e2e:	4a37      	ldr	r2, [pc, #220]	; (8101f0c <HAL_DMA_Abort+0x61c>)
 8101e30:	4293      	cmp	r3, r2
 8101e32:	d022      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	4a35      	ldr	r2, [pc, #212]	; (8101f10 <HAL_DMA_Abort+0x620>)
 8101e3a:	4293      	cmp	r3, r2
 8101e3c:	d01d      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	4a34      	ldr	r2, [pc, #208]	; (8101f14 <HAL_DMA_Abort+0x624>)
 8101e44:	4293      	cmp	r3, r2
 8101e46:	d018      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	4a32      	ldr	r2, [pc, #200]	; (8101f18 <HAL_DMA_Abort+0x628>)
 8101e4e:	4293      	cmp	r3, r2
 8101e50:	d013      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a31      	ldr	r2, [pc, #196]	; (8101f1c <HAL_DMA_Abort+0x62c>)
 8101e58:	4293      	cmp	r3, r2
 8101e5a:	d00e      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a2f      	ldr	r2, [pc, #188]	; (8101f20 <HAL_DMA_Abort+0x630>)
 8101e62:	4293      	cmp	r3, r2
 8101e64:	d009      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a2e      	ldr	r2, [pc, #184]	; (8101f24 <HAL_DMA_Abort+0x634>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d004      	beq.n	8101e7a <HAL_DMA_Abort+0x58a>
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	4a2c      	ldr	r2, [pc, #176]	; (8101f28 <HAL_DMA_Abort+0x638>)
 8101e76:	4293      	cmp	r3, r2
 8101e78:	d101      	bne.n	8101e7e <HAL_DMA_Abort+0x58e>
 8101e7a:	2301      	movs	r3, #1
 8101e7c:	e000      	b.n	8101e80 <HAL_DMA_Abort+0x590>
 8101e7e:	2300      	movs	r3, #0
 8101e80:	2b00      	cmp	r3, #0
 8101e82:	d015      	beq.n	8101eb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101e88:	687a      	ldr	r2, [r7, #4]
 8101e8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8101e8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101e92:	2b00      	cmp	r3, #0
 8101e94:	d00c      	beq.n	8101eb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101e9a:	681a      	ldr	r2, [r3, #0]
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101ea4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101eaa:	687a      	ldr	r2, [r7, #4]
 8101eac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8101eae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	2201      	movs	r2, #1
 8101eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	2200      	movs	r2, #0
 8101ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8101ec0:	2300      	movs	r3, #0
}
 8101ec2:	4618      	mov	r0, r3
 8101ec4:	3718      	adds	r7, #24
 8101ec6:	46bd      	mov	sp, r7
 8101ec8:	bd80      	pop	{r7, pc}
 8101eca:	bf00      	nop
 8101ecc:	40020010 	.word	0x40020010
 8101ed0:	40020028 	.word	0x40020028
 8101ed4:	40020040 	.word	0x40020040
 8101ed8:	40020058 	.word	0x40020058
 8101edc:	40020070 	.word	0x40020070
 8101ee0:	40020088 	.word	0x40020088
 8101ee4:	400200a0 	.word	0x400200a0
 8101ee8:	400200b8 	.word	0x400200b8
 8101eec:	40020410 	.word	0x40020410
 8101ef0:	40020428 	.word	0x40020428
 8101ef4:	40020440 	.word	0x40020440
 8101ef8:	40020458 	.word	0x40020458
 8101efc:	40020470 	.word	0x40020470
 8101f00:	40020488 	.word	0x40020488
 8101f04:	400204a0 	.word	0x400204a0
 8101f08:	400204b8 	.word	0x400204b8
 8101f0c:	58025408 	.word	0x58025408
 8101f10:	5802541c 	.word	0x5802541c
 8101f14:	58025430 	.word	0x58025430
 8101f18:	58025444 	.word	0x58025444
 8101f1c:	58025458 	.word	0x58025458
 8101f20:	5802546c 	.word	0x5802546c
 8101f24:	58025480 	.word	0x58025480
 8101f28:	58025494 	.word	0x58025494

08101f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8101f2c:	b580      	push	{r7, lr}
 8101f2e:	b084      	sub	sp, #16
 8101f30:	af00      	add	r7, sp, #0
 8101f32:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	2b00      	cmp	r3, #0
 8101f38:	d101      	bne.n	8101f3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8101f3a:	2301      	movs	r3, #1
 8101f3c:	e237      	b.n	81023ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8101f44:	b2db      	uxtb	r3, r3
 8101f46:	2b02      	cmp	r3, #2
 8101f48:	d004      	beq.n	8101f54 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	2280      	movs	r2, #128	; 0x80
 8101f4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8101f50:	2301      	movs	r3, #1
 8101f52:	e22c      	b.n	81023ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	4a5c      	ldr	r2, [pc, #368]	; (81020cc <HAL_DMA_Abort_IT+0x1a0>)
 8101f5a:	4293      	cmp	r3, r2
 8101f5c:	d04a      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	681b      	ldr	r3, [r3, #0]
 8101f62:	4a5b      	ldr	r2, [pc, #364]	; (81020d0 <HAL_DMA_Abort_IT+0x1a4>)
 8101f64:	4293      	cmp	r3, r2
 8101f66:	d045      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	4a59      	ldr	r2, [pc, #356]	; (81020d4 <HAL_DMA_Abort_IT+0x1a8>)
 8101f6e:	4293      	cmp	r3, r2
 8101f70:	d040      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	4a58      	ldr	r2, [pc, #352]	; (81020d8 <HAL_DMA_Abort_IT+0x1ac>)
 8101f78:	4293      	cmp	r3, r2
 8101f7a:	d03b      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	4a56      	ldr	r2, [pc, #344]	; (81020dc <HAL_DMA_Abort_IT+0x1b0>)
 8101f82:	4293      	cmp	r3, r2
 8101f84:	d036      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	4a55      	ldr	r2, [pc, #340]	; (81020e0 <HAL_DMA_Abort_IT+0x1b4>)
 8101f8c:	4293      	cmp	r3, r2
 8101f8e:	d031      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	4a53      	ldr	r2, [pc, #332]	; (81020e4 <HAL_DMA_Abort_IT+0x1b8>)
 8101f96:	4293      	cmp	r3, r2
 8101f98:	d02c      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	4a52      	ldr	r2, [pc, #328]	; (81020e8 <HAL_DMA_Abort_IT+0x1bc>)
 8101fa0:	4293      	cmp	r3, r2
 8101fa2:	d027      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4a50      	ldr	r2, [pc, #320]	; (81020ec <HAL_DMA_Abort_IT+0x1c0>)
 8101faa:	4293      	cmp	r3, r2
 8101fac:	d022      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	4a4f      	ldr	r2, [pc, #316]	; (81020f0 <HAL_DMA_Abort_IT+0x1c4>)
 8101fb4:	4293      	cmp	r3, r2
 8101fb6:	d01d      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	4a4d      	ldr	r2, [pc, #308]	; (81020f4 <HAL_DMA_Abort_IT+0x1c8>)
 8101fbe:	4293      	cmp	r3, r2
 8101fc0:	d018      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	4a4c      	ldr	r2, [pc, #304]	; (81020f8 <HAL_DMA_Abort_IT+0x1cc>)
 8101fc8:	4293      	cmp	r3, r2
 8101fca:	d013      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	4a4a      	ldr	r2, [pc, #296]	; (81020fc <HAL_DMA_Abort_IT+0x1d0>)
 8101fd2:	4293      	cmp	r3, r2
 8101fd4:	d00e      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	681b      	ldr	r3, [r3, #0]
 8101fda:	4a49      	ldr	r2, [pc, #292]	; (8102100 <HAL_DMA_Abort_IT+0x1d4>)
 8101fdc:	4293      	cmp	r3, r2
 8101fde:	d009      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	4a47      	ldr	r2, [pc, #284]	; (8102104 <HAL_DMA_Abort_IT+0x1d8>)
 8101fe6:	4293      	cmp	r3, r2
 8101fe8:	d004      	beq.n	8101ff4 <HAL_DMA_Abort_IT+0xc8>
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	4a46      	ldr	r2, [pc, #280]	; (8102108 <HAL_DMA_Abort_IT+0x1dc>)
 8101ff0:	4293      	cmp	r3, r2
 8101ff2:	d101      	bne.n	8101ff8 <HAL_DMA_Abort_IT+0xcc>
 8101ff4:	2301      	movs	r3, #1
 8101ff6:	e000      	b.n	8101ffa <HAL_DMA_Abort_IT+0xce>
 8101ff8:	2300      	movs	r3, #0
 8101ffa:	2b00      	cmp	r3, #0
 8101ffc:	f000 8086 	beq.w	810210c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	2204      	movs	r2, #4
 8102004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	681b      	ldr	r3, [r3, #0]
 810200c:	4a2f      	ldr	r2, [pc, #188]	; (81020cc <HAL_DMA_Abort_IT+0x1a0>)
 810200e:	4293      	cmp	r3, r2
 8102010:	d04a      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	681b      	ldr	r3, [r3, #0]
 8102016:	4a2e      	ldr	r2, [pc, #184]	; (81020d0 <HAL_DMA_Abort_IT+0x1a4>)
 8102018:	4293      	cmp	r3, r2
 810201a:	d045      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	4a2c      	ldr	r2, [pc, #176]	; (81020d4 <HAL_DMA_Abort_IT+0x1a8>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d040      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	4a2b      	ldr	r2, [pc, #172]	; (81020d8 <HAL_DMA_Abort_IT+0x1ac>)
 810202c:	4293      	cmp	r3, r2
 810202e:	d03b      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	4a29      	ldr	r2, [pc, #164]	; (81020dc <HAL_DMA_Abort_IT+0x1b0>)
 8102036:	4293      	cmp	r3, r2
 8102038:	d036      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	681b      	ldr	r3, [r3, #0]
 810203e:	4a28      	ldr	r2, [pc, #160]	; (81020e0 <HAL_DMA_Abort_IT+0x1b4>)
 8102040:	4293      	cmp	r3, r2
 8102042:	d031      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	4a26      	ldr	r2, [pc, #152]	; (81020e4 <HAL_DMA_Abort_IT+0x1b8>)
 810204a:	4293      	cmp	r3, r2
 810204c:	d02c      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	4a25      	ldr	r2, [pc, #148]	; (81020e8 <HAL_DMA_Abort_IT+0x1bc>)
 8102054:	4293      	cmp	r3, r2
 8102056:	d027      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	4a23      	ldr	r2, [pc, #140]	; (81020ec <HAL_DMA_Abort_IT+0x1c0>)
 810205e:	4293      	cmp	r3, r2
 8102060:	d022      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	4a22      	ldr	r2, [pc, #136]	; (81020f0 <HAL_DMA_Abort_IT+0x1c4>)
 8102068:	4293      	cmp	r3, r2
 810206a:	d01d      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	4a20      	ldr	r2, [pc, #128]	; (81020f4 <HAL_DMA_Abort_IT+0x1c8>)
 8102072:	4293      	cmp	r3, r2
 8102074:	d018      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4a1f      	ldr	r2, [pc, #124]	; (81020f8 <HAL_DMA_Abort_IT+0x1cc>)
 810207c:	4293      	cmp	r3, r2
 810207e:	d013      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	4a1d      	ldr	r2, [pc, #116]	; (81020fc <HAL_DMA_Abort_IT+0x1d0>)
 8102086:	4293      	cmp	r3, r2
 8102088:	d00e      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	4a1c      	ldr	r2, [pc, #112]	; (8102100 <HAL_DMA_Abort_IT+0x1d4>)
 8102090:	4293      	cmp	r3, r2
 8102092:	d009      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	4a1a      	ldr	r2, [pc, #104]	; (8102104 <HAL_DMA_Abort_IT+0x1d8>)
 810209a:	4293      	cmp	r3, r2
 810209c:	d004      	beq.n	81020a8 <HAL_DMA_Abort_IT+0x17c>
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	4a19      	ldr	r2, [pc, #100]	; (8102108 <HAL_DMA_Abort_IT+0x1dc>)
 81020a4:	4293      	cmp	r3, r2
 81020a6:	d108      	bne.n	81020ba <HAL_DMA_Abort_IT+0x18e>
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	681a      	ldr	r2, [r3, #0]
 81020ae:	687b      	ldr	r3, [r7, #4]
 81020b0:	681b      	ldr	r3, [r3, #0]
 81020b2:	f022 0201 	bic.w	r2, r2, #1
 81020b6:	601a      	str	r2, [r3, #0]
 81020b8:	e178      	b.n	81023ac <HAL_DMA_Abort_IT+0x480>
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	681a      	ldr	r2, [r3, #0]
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	f022 0201 	bic.w	r2, r2, #1
 81020c8:	601a      	str	r2, [r3, #0]
 81020ca:	e16f      	b.n	81023ac <HAL_DMA_Abort_IT+0x480>
 81020cc:	40020010 	.word	0x40020010
 81020d0:	40020028 	.word	0x40020028
 81020d4:	40020040 	.word	0x40020040
 81020d8:	40020058 	.word	0x40020058
 81020dc:	40020070 	.word	0x40020070
 81020e0:	40020088 	.word	0x40020088
 81020e4:	400200a0 	.word	0x400200a0
 81020e8:	400200b8 	.word	0x400200b8
 81020ec:	40020410 	.word	0x40020410
 81020f0:	40020428 	.word	0x40020428
 81020f4:	40020440 	.word	0x40020440
 81020f8:	40020458 	.word	0x40020458
 81020fc:	40020470 	.word	0x40020470
 8102100:	40020488 	.word	0x40020488
 8102104:	400204a0 	.word	0x400204a0
 8102108:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	681b      	ldr	r3, [r3, #0]
 8102110:	681a      	ldr	r2, [r3, #0]
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	681b      	ldr	r3, [r3, #0]
 8102116:	f022 020e 	bic.w	r2, r2, #14
 810211a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	681b      	ldr	r3, [r3, #0]
 8102120:	4a6c      	ldr	r2, [pc, #432]	; (81022d4 <HAL_DMA_Abort_IT+0x3a8>)
 8102122:	4293      	cmp	r3, r2
 8102124:	d04a      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	681b      	ldr	r3, [r3, #0]
 810212a:	4a6b      	ldr	r2, [pc, #428]	; (81022d8 <HAL_DMA_Abort_IT+0x3ac>)
 810212c:	4293      	cmp	r3, r2
 810212e:	d045      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	681b      	ldr	r3, [r3, #0]
 8102134:	4a69      	ldr	r2, [pc, #420]	; (81022dc <HAL_DMA_Abort_IT+0x3b0>)
 8102136:	4293      	cmp	r3, r2
 8102138:	d040      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	4a68      	ldr	r2, [pc, #416]	; (81022e0 <HAL_DMA_Abort_IT+0x3b4>)
 8102140:	4293      	cmp	r3, r2
 8102142:	d03b      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	681b      	ldr	r3, [r3, #0]
 8102148:	4a66      	ldr	r2, [pc, #408]	; (81022e4 <HAL_DMA_Abort_IT+0x3b8>)
 810214a:	4293      	cmp	r3, r2
 810214c:	d036      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	681b      	ldr	r3, [r3, #0]
 8102152:	4a65      	ldr	r2, [pc, #404]	; (81022e8 <HAL_DMA_Abort_IT+0x3bc>)
 8102154:	4293      	cmp	r3, r2
 8102156:	d031      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	681b      	ldr	r3, [r3, #0]
 810215c:	4a63      	ldr	r2, [pc, #396]	; (81022ec <HAL_DMA_Abort_IT+0x3c0>)
 810215e:	4293      	cmp	r3, r2
 8102160:	d02c      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	681b      	ldr	r3, [r3, #0]
 8102166:	4a62      	ldr	r2, [pc, #392]	; (81022f0 <HAL_DMA_Abort_IT+0x3c4>)
 8102168:	4293      	cmp	r3, r2
 810216a:	d027      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	681b      	ldr	r3, [r3, #0]
 8102170:	4a60      	ldr	r2, [pc, #384]	; (81022f4 <HAL_DMA_Abort_IT+0x3c8>)
 8102172:	4293      	cmp	r3, r2
 8102174:	d022      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	4a5f      	ldr	r2, [pc, #380]	; (81022f8 <HAL_DMA_Abort_IT+0x3cc>)
 810217c:	4293      	cmp	r3, r2
 810217e:	d01d      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	681b      	ldr	r3, [r3, #0]
 8102184:	4a5d      	ldr	r2, [pc, #372]	; (81022fc <HAL_DMA_Abort_IT+0x3d0>)
 8102186:	4293      	cmp	r3, r2
 8102188:	d018      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	4a5c      	ldr	r2, [pc, #368]	; (8102300 <HAL_DMA_Abort_IT+0x3d4>)
 8102190:	4293      	cmp	r3, r2
 8102192:	d013      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	681b      	ldr	r3, [r3, #0]
 8102198:	4a5a      	ldr	r2, [pc, #360]	; (8102304 <HAL_DMA_Abort_IT+0x3d8>)
 810219a:	4293      	cmp	r3, r2
 810219c:	d00e      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	4a59      	ldr	r2, [pc, #356]	; (8102308 <HAL_DMA_Abort_IT+0x3dc>)
 81021a4:	4293      	cmp	r3, r2
 81021a6:	d009      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	681b      	ldr	r3, [r3, #0]
 81021ac:	4a57      	ldr	r2, [pc, #348]	; (810230c <HAL_DMA_Abort_IT+0x3e0>)
 81021ae:	4293      	cmp	r3, r2
 81021b0:	d004      	beq.n	81021bc <HAL_DMA_Abort_IT+0x290>
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	4a56      	ldr	r2, [pc, #344]	; (8102310 <HAL_DMA_Abort_IT+0x3e4>)
 81021b8:	4293      	cmp	r3, r2
 81021ba:	d108      	bne.n	81021ce <HAL_DMA_Abort_IT+0x2a2>
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	681a      	ldr	r2, [r3, #0]
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	f022 0201 	bic.w	r2, r2, #1
 81021ca:	601a      	str	r2, [r3, #0]
 81021cc:	e007      	b.n	81021de <HAL_DMA_Abort_IT+0x2b2>
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	681b      	ldr	r3, [r3, #0]
 81021d2:	681a      	ldr	r2, [r3, #0]
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	f022 0201 	bic.w	r2, r2, #1
 81021dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	681b      	ldr	r3, [r3, #0]
 81021e2:	4a3c      	ldr	r2, [pc, #240]	; (81022d4 <HAL_DMA_Abort_IT+0x3a8>)
 81021e4:	4293      	cmp	r3, r2
 81021e6:	d072      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	681b      	ldr	r3, [r3, #0]
 81021ec:	4a3a      	ldr	r2, [pc, #232]	; (81022d8 <HAL_DMA_Abort_IT+0x3ac>)
 81021ee:	4293      	cmp	r3, r2
 81021f0:	d06d      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	681b      	ldr	r3, [r3, #0]
 81021f6:	4a39      	ldr	r2, [pc, #228]	; (81022dc <HAL_DMA_Abort_IT+0x3b0>)
 81021f8:	4293      	cmp	r3, r2
 81021fa:	d068      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	681b      	ldr	r3, [r3, #0]
 8102200:	4a37      	ldr	r2, [pc, #220]	; (81022e0 <HAL_DMA_Abort_IT+0x3b4>)
 8102202:	4293      	cmp	r3, r2
 8102204:	d063      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	681b      	ldr	r3, [r3, #0]
 810220a:	4a36      	ldr	r2, [pc, #216]	; (81022e4 <HAL_DMA_Abort_IT+0x3b8>)
 810220c:	4293      	cmp	r3, r2
 810220e:	d05e      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	4a34      	ldr	r2, [pc, #208]	; (81022e8 <HAL_DMA_Abort_IT+0x3bc>)
 8102216:	4293      	cmp	r3, r2
 8102218:	d059      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	4a33      	ldr	r2, [pc, #204]	; (81022ec <HAL_DMA_Abort_IT+0x3c0>)
 8102220:	4293      	cmp	r3, r2
 8102222:	d054      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	681b      	ldr	r3, [r3, #0]
 8102228:	4a31      	ldr	r2, [pc, #196]	; (81022f0 <HAL_DMA_Abort_IT+0x3c4>)
 810222a:	4293      	cmp	r3, r2
 810222c:	d04f      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	681b      	ldr	r3, [r3, #0]
 8102232:	4a30      	ldr	r2, [pc, #192]	; (81022f4 <HAL_DMA_Abort_IT+0x3c8>)
 8102234:	4293      	cmp	r3, r2
 8102236:	d04a      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	681b      	ldr	r3, [r3, #0]
 810223c:	4a2e      	ldr	r2, [pc, #184]	; (81022f8 <HAL_DMA_Abort_IT+0x3cc>)
 810223e:	4293      	cmp	r3, r2
 8102240:	d045      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	681b      	ldr	r3, [r3, #0]
 8102246:	4a2d      	ldr	r2, [pc, #180]	; (81022fc <HAL_DMA_Abort_IT+0x3d0>)
 8102248:	4293      	cmp	r3, r2
 810224a:	d040      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	681b      	ldr	r3, [r3, #0]
 8102250:	4a2b      	ldr	r2, [pc, #172]	; (8102300 <HAL_DMA_Abort_IT+0x3d4>)
 8102252:	4293      	cmp	r3, r2
 8102254:	d03b      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	681b      	ldr	r3, [r3, #0]
 810225a:	4a2a      	ldr	r2, [pc, #168]	; (8102304 <HAL_DMA_Abort_IT+0x3d8>)
 810225c:	4293      	cmp	r3, r2
 810225e:	d036      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	681b      	ldr	r3, [r3, #0]
 8102264:	4a28      	ldr	r2, [pc, #160]	; (8102308 <HAL_DMA_Abort_IT+0x3dc>)
 8102266:	4293      	cmp	r3, r2
 8102268:	d031      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	681b      	ldr	r3, [r3, #0]
 810226e:	4a27      	ldr	r2, [pc, #156]	; (810230c <HAL_DMA_Abort_IT+0x3e0>)
 8102270:	4293      	cmp	r3, r2
 8102272:	d02c      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	4a25      	ldr	r2, [pc, #148]	; (8102310 <HAL_DMA_Abort_IT+0x3e4>)
 810227a:	4293      	cmp	r3, r2
 810227c:	d027      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	4a24      	ldr	r2, [pc, #144]	; (8102314 <HAL_DMA_Abort_IT+0x3e8>)
 8102284:	4293      	cmp	r3, r2
 8102286:	d022      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	4a22      	ldr	r2, [pc, #136]	; (8102318 <HAL_DMA_Abort_IT+0x3ec>)
 810228e:	4293      	cmp	r3, r2
 8102290:	d01d      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	4a21      	ldr	r2, [pc, #132]	; (810231c <HAL_DMA_Abort_IT+0x3f0>)
 8102298:	4293      	cmp	r3, r2
 810229a:	d018      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	4a1f      	ldr	r2, [pc, #124]	; (8102320 <HAL_DMA_Abort_IT+0x3f4>)
 81022a2:	4293      	cmp	r3, r2
 81022a4:	d013      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	4a1e      	ldr	r2, [pc, #120]	; (8102324 <HAL_DMA_Abort_IT+0x3f8>)
 81022ac:	4293      	cmp	r3, r2
 81022ae:	d00e      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	681b      	ldr	r3, [r3, #0]
 81022b4:	4a1c      	ldr	r2, [pc, #112]	; (8102328 <HAL_DMA_Abort_IT+0x3fc>)
 81022b6:	4293      	cmp	r3, r2
 81022b8:	d009      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	4a1b      	ldr	r2, [pc, #108]	; (810232c <HAL_DMA_Abort_IT+0x400>)
 81022c0:	4293      	cmp	r3, r2
 81022c2:	d004      	beq.n	81022ce <HAL_DMA_Abort_IT+0x3a2>
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	681b      	ldr	r3, [r3, #0]
 81022c8:	4a19      	ldr	r2, [pc, #100]	; (8102330 <HAL_DMA_Abort_IT+0x404>)
 81022ca:	4293      	cmp	r3, r2
 81022cc:	d132      	bne.n	8102334 <HAL_DMA_Abort_IT+0x408>
 81022ce:	2301      	movs	r3, #1
 81022d0:	e031      	b.n	8102336 <HAL_DMA_Abort_IT+0x40a>
 81022d2:	bf00      	nop
 81022d4:	40020010 	.word	0x40020010
 81022d8:	40020028 	.word	0x40020028
 81022dc:	40020040 	.word	0x40020040
 81022e0:	40020058 	.word	0x40020058
 81022e4:	40020070 	.word	0x40020070
 81022e8:	40020088 	.word	0x40020088
 81022ec:	400200a0 	.word	0x400200a0
 81022f0:	400200b8 	.word	0x400200b8
 81022f4:	40020410 	.word	0x40020410
 81022f8:	40020428 	.word	0x40020428
 81022fc:	40020440 	.word	0x40020440
 8102300:	40020458 	.word	0x40020458
 8102304:	40020470 	.word	0x40020470
 8102308:	40020488 	.word	0x40020488
 810230c:	400204a0 	.word	0x400204a0
 8102310:	400204b8 	.word	0x400204b8
 8102314:	58025408 	.word	0x58025408
 8102318:	5802541c 	.word	0x5802541c
 810231c:	58025430 	.word	0x58025430
 8102320:	58025444 	.word	0x58025444
 8102324:	58025458 	.word	0x58025458
 8102328:	5802546c 	.word	0x5802546c
 810232c:	58025480 	.word	0x58025480
 8102330:	58025494 	.word	0x58025494
 8102334:	2300      	movs	r3, #0
 8102336:	2b00      	cmp	r3, #0
 8102338:	d028      	beq.n	810238c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810233e:	681a      	ldr	r2, [r3, #0]
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102348:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810234e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102354:	f003 031f 	and.w	r3, r3, #31
 8102358:	2201      	movs	r2, #1
 810235a:	409a      	lsls	r2, r3
 810235c:	68fb      	ldr	r3, [r7, #12]
 810235e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102364:	687a      	ldr	r2, [r7, #4]
 8102366:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102368:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810236e:	2b00      	cmp	r3, #0
 8102370:	d00c      	beq.n	810238c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102376:	681a      	ldr	r2, [r3, #0]
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810237c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102380:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102386:	687a      	ldr	r2, [r7, #4]
 8102388:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810238a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	2201      	movs	r2, #1
 8102390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	2200      	movs	r2, #0
 8102398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810239c:	687b      	ldr	r3, [r7, #4]
 810239e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81023a0:	2b00      	cmp	r3, #0
 81023a2:	d003      	beq.n	81023ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81023a8:	6878      	ldr	r0, [r7, #4]
 81023aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81023ac:	2300      	movs	r3, #0
}
 81023ae:	4618      	mov	r0, r3
 81023b0:	3710      	adds	r7, #16
 81023b2:	46bd      	mov	sp, r7
 81023b4:	bd80      	pop	{r7, pc}
 81023b6:	bf00      	nop

081023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81023b8:	b480      	push	{r7}
 81023ba:	b089      	sub	sp, #36	; 0x24
 81023bc:	af00      	add	r7, sp, #0
 81023be:	6078      	str	r0, [r7, #4]
 81023c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81023c2:	2300      	movs	r3, #0
 81023c4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81023c6:	4b89      	ldr	r3, [pc, #548]	; (81025ec <HAL_GPIO_Init+0x234>)
 81023c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81023ca:	e194      	b.n	81026f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81023cc:	683b      	ldr	r3, [r7, #0]
 81023ce:	681a      	ldr	r2, [r3, #0]
 81023d0:	2101      	movs	r1, #1
 81023d2:	69fb      	ldr	r3, [r7, #28]
 81023d4:	fa01 f303 	lsl.w	r3, r1, r3
 81023d8:	4013      	ands	r3, r2
 81023da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81023dc:	693b      	ldr	r3, [r7, #16]
 81023de:	2b00      	cmp	r3, #0
 81023e0:	f000 8186 	beq.w	81026f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81023e4:	683b      	ldr	r3, [r7, #0]
 81023e6:	685b      	ldr	r3, [r3, #4]
 81023e8:	f003 0303 	and.w	r3, r3, #3
 81023ec:	2b01      	cmp	r3, #1
 81023ee:	d005      	beq.n	81023fc <HAL_GPIO_Init+0x44>
 81023f0:	683b      	ldr	r3, [r7, #0]
 81023f2:	685b      	ldr	r3, [r3, #4]
 81023f4:	f003 0303 	and.w	r3, r3, #3
 81023f8:	2b02      	cmp	r3, #2
 81023fa:	d130      	bne.n	810245e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	689b      	ldr	r3, [r3, #8]
 8102400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102402:	69fb      	ldr	r3, [r7, #28]
 8102404:	005b      	lsls	r3, r3, #1
 8102406:	2203      	movs	r2, #3
 8102408:	fa02 f303 	lsl.w	r3, r2, r3
 810240c:	43db      	mvns	r3, r3
 810240e:	69ba      	ldr	r2, [r7, #24]
 8102410:	4013      	ands	r3, r2
 8102412:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102414:	683b      	ldr	r3, [r7, #0]
 8102416:	68da      	ldr	r2, [r3, #12]
 8102418:	69fb      	ldr	r3, [r7, #28]
 810241a:	005b      	lsls	r3, r3, #1
 810241c:	fa02 f303 	lsl.w	r3, r2, r3
 8102420:	69ba      	ldr	r2, [r7, #24]
 8102422:	4313      	orrs	r3, r2
 8102424:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	69ba      	ldr	r2, [r7, #24]
 810242a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	685b      	ldr	r3, [r3, #4]
 8102430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102432:	2201      	movs	r2, #1
 8102434:	69fb      	ldr	r3, [r7, #28]
 8102436:	fa02 f303 	lsl.w	r3, r2, r3
 810243a:	43db      	mvns	r3, r3
 810243c:	69ba      	ldr	r2, [r7, #24]
 810243e:	4013      	ands	r3, r2
 8102440:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102442:	683b      	ldr	r3, [r7, #0]
 8102444:	685b      	ldr	r3, [r3, #4]
 8102446:	091b      	lsrs	r3, r3, #4
 8102448:	f003 0201 	and.w	r2, r3, #1
 810244c:	69fb      	ldr	r3, [r7, #28]
 810244e:	fa02 f303 	lsl.w	r3, r2, r3
 8102452:	69ba      	ldr	r2, [r7, #24]
 8102454:	4313      	orrs	r3, r2
 8102456:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	69ba      	ldr	r2, [r7, #24]
 810245c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810245e:	683b      	ldr	r3, [r7, #0]
 8102460:	685b      	ldr	r3, [r3, #4]
 8102462:	f003 0303 	and.w	r3, r3, #3
 8102466:	2b03      	cmp	r3, #3
 8102468:	d017      	beq.n	810249a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	68db      	ldr	r3, [r3, #12]
 810246e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102470:	69fb      	ldr	r3, [r7, #28]
 8102472:	005b      	lsls	r3, r3, #1
 8102474:	2203      	movs	r2, #3
 8102476:	fa02 f303 	lsl.w	r3, r2, r3
 810247a:	43db      	mvns	r3, r3
 810247c:	69ba      	ldr	r2, [r7, #24]
 810247e:	4013      	ands	r3, r2
 8102480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102482:	683b      	ldr	r3, [r7, #0]
 8102484:	689a      	ldr	r2, [r3, #8]
 8102486:	69fb      	ldr	r3, [r7, #28]
 8102488:	005b      	lsls	r3, r3, #1
 810248a:	fa02 f303 	lsl.w	r3, r2, r3
 810248e:	69ba      	ldr	r2, [r7, #24]
 8102490:	4313      	orrs	r3, r2
 8102492:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	69ba      	ldr	r2, [r7, #24]
 8102498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810249a:	683b      	ldr	r3, [r7, #0]
 810249c:	685b      	ldr	r3, [r3, #4]
 810249e:	f003 0303 	and.w	r3, r3, #3
 81024a2:	2b02      	cmp	r3, #2
 81024a4:	d123      	bne.n	81024ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81024a6:	69fb      	ldr	r3, [r7, #28]
 81024a8:	08da      	lsrs	r2, r3, #3
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	3208      	adds	r2, #8
 81024ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81024b4:	69fb      	ldr	r3, [r7, #28]
 81024b6:	f003 0307 	and.w	r3, r3, #7
 81024ba:	009b      	lsls	r3, r3, #2
 81024bc:	220f      	movs	r2, #15
 81024be:	fa02 f303 	lsl.w	r3, r2, r3
 81024c2:	43db      	mvns	r3, r3
 81024c4:	69ba      	ldr	r2, [r7, #24]
 81024c6:	4013      	ands	r3, r2
 81024c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81024ca:	683b      	ldr	r3, [r7, #0]
 81024cc:	691a      	ldr	r2, [r3, #16]
 81024ce:	69fb      	ldr	r3, [r7, #28]
 81024d0:	f003 0307 	and.w	r3, r3, #7
 81024d4:	009b      	lsls	r3, r3, #2
 81024d6:	fa02 f303 	lsl.w	r3, r2, r3
 81024da:	69ba      	ldr	r2, [r7, #24]
 81024dc:	4313      	orrs	r3, r2
 81024de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81024e0:	69fb      	ldr	r3, [r7, #28]
 81024e2:	08da      	lsrs	r2, r3, #3
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	3208      	adds	r2, #8
 81024e8:	69b9      	ldr	r1, [r7, #24]
 81024ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81024f4:	69fb      	ldr	r3, [r7, #28]
 81024f6:	005b      	lsls	r3, r3, #1
 81024f8:	2203      	movs	r2, #3
 81024fa:	fa02 f303 	lsl.w	r3, r2, r3
 81024fe:	43db      	mvns	r3, r3
 8102500:	69ba      	ldr	r2, [r7, #24]
 8102502:	4013      	ands	r3, r2
 8102504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102506:	683b      	ldr	r3, [r7, #0]
 8102508:	685b      	ldr	r3, [r3, #4]
 810250a:	f003 0203 	and.w	r2, r3, #3
 810250e:	69fb      	ldr	r3, [r7, #28]
 8102510:	005b      	lsls	r3, r3, #1
 8102512:	fa02 f303 	lsl.w	r3, r2, r3
 8102516:	69ba      	ldr	r2, [r7, #24]
 8102518:	4313      	orrs	r3, r2
 810251a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	69ba      	ldr	r2, [r7, #24]
 8102520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102522:	683b      	ldr	r3, [r7, #0]
 8102524:	685b      	ldr	r3, [r3, #4]
 8102526:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810252a:	2b00      	cmp	r3, #0
 810252c:	f000 80e0 	beq.w	81026f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102530:	4b2f      	ldr	r3, [pc, #188]	; (81025f0 <HAL_GPIO_Init+0x238>)
 8102532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102536:	4a2e      	ldr	r2, [pc, #184]	; (81025f0 <HAL_GPIO_Init+0x238>)
 8102538:	f043 0302 	orr.w	r3, r3, #2
 810253c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102540:	4b2b      	ldr	r3, [pc, #172]	; (81025f0 <HAL_GPIO_Init+0x238>)
 8102542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102546:	f003 0302 	and.w	r3, r3, #2
 810254a:	60fb      	str	r3, [r7, #12]
 810254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810254e:	4a29      	ldr	r2, [pc, #164]	; (81025f4 <HAL_GPIO_Init+0x23c>)
 8102550:	69fb      	ldr	r3, [r7, #28]
 8102552:	089b      	lsrs	r3, r3, #2
 8102554:	3302      	adds	r3, #2
 8102556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810255c:	69fb      	ldr	r3, [r7, #28]
 810255e:	f003 0303 	and.w	r3, r3, #3
 8102562:	009b      	lsls	r3, r3, #2
 8102564:	220f      	movs	r2, #15
 8102566:	fa02 f303 	lsl.w	r3, r2, r3
 810256a:	43db      	mvns	r3, r3
 810256c:	69ba      	ldr	r2, [r7, #24]
 810256e:	4013      	ands	r3, r2
 8102570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	4a20      	ldr	r2, [pc, #128]	; (81025f8 <HAL_GPIO_Init+0x240>)
 8102576:	4293      	cmp	r3, r2
 8102578:	d052      	beq.n	8102620 <HAL_GPIO_Init+0x268>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	4a1f      	ldr	r2, [pc, #124]	; (81025fc <HAL_GPIO_Init+0x244>)
 810257e:	4293      	cmp	r3, r2
 8102580:	d031      	beq.n	81025e6 <HAL_GPIO_Init+0x22e>
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	4a1e      	ldr	r2, [pc, #120]	; (8102600 <HAL_GPIO_Init+0x248>)
 8102586:	4293      	cmp	r3, r2
 8102588:	d02b      	beq.n	81025e2 <HAL_GPIO_Init+0x22a>
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	4a1d      	ldr	r2, [pc, #116]	; (8102604 <HAL_GPIO_Init+0x24c>)
 810258e:	4293      	cmp	r3, r2
 8102590:	d025      	beq.n	81025de <HAL_GPIO_Init+0x226>
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	4a1c      	ldr	r2, [pc, #112]	; (8102608 <HAL_GPIO_Init+0x250>)
 8102596:	4293      	cmp	r3, r2
 8102598:	d01f      	beq.n	81025da <HAL_GPIO_Init+0x222>
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	4a1b      	ldr	r2, [pc, #108]	; (810260c <HAL_GPIO_Init+0x254>)
 810259e:	4293      	cmp	r3, r2
 81025a0:	d019      	beq.n	81025d6 <HAL_GPIO_Init+0x21e>
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	4a1a      	ldr	r2, [pc, #104]	; (8102610 <HAL_GPIO_Init+0x258>)
 81025a6:	4293      	cmp	r3, r2
 81025a8:	d013      	beq.n	81025d2 <HAL_GPIO_Init+0x21a>
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	4a19      	ldr	r2, [pc, #100]	; (8102614 <HAL_GPIO_Init+0x25c>)
 81025ae:	4293      	cmp	r3, r2
 81025b0:	d00d      	beq.n	81025ce <HAL_GPIO_Init+0x216>
 81025b2:	687b      	ldr	r3, [r7, #4]
 81025b4:	4a18      	ldr	r2, [pc, #96]	; (8102618 <HAL_GPIO_Init+0x260>)
 81025b6:	4293      	cmp	r3, r2
 81025b8:	d007      	beq.n	81025ca <HAL_GPIO_Init+0x212>
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	4a17      	ldr	r2, [pc, #92]	; (810261c <HAL_GPIO_Init+0x264>)
 81025be:	4293      	cmp	r3, r2
 81025c0:	d101      	bne.n	81025c6 <HAL_GPIO_Init+0x20e>
 81025c2:	2309      	movs	r3, #9
 81025c4:	e02d      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025c6:	230a      	movs	r3, #10
 81025c8:	e02b      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025ca:	2308      	movs	r3, #8
 81025cc:	e029      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025ce:	2307      	movs	r3, #7
 81025d0:	e027      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025d2:	2306      	movs	r3, #6
 81025d4:	e025      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025d6:	2305      	movs	r3, #5
 81025d8:	e023      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025da:	2304      	movs	r3, #4
 81025dc:	e021      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025de:	2303      	movs	r3, #3
 81025e0:	e01f      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025e2:	2302      	movs	r3, #2
 81025e4:	e01d      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025e6:	2301      	movs	r3, #1
 81025e8:	e01b      	b.n	8102622 <HAL_GPIO_Init+0x26a>
 81025ea:	bf00      	nop
 81025ec:	580000c0 	.word	0x580000c0
 81025f0:	58024400 	.word	0x58024400
 81025f4:	58000400 	.word	0x58000400
 81025f8:	58020000 	.word	0x58020000
 81025fc:	58020400 	.word	0x58020400
 8102600:	58020800 	.word	0x58020800
 8102604:	58020c00 	.word	0x58020c00
 8102608:	58021000 	.word	0x58021000
 810260c:	58021400 	.word	0x58021400
 8102610:	58021800 	.word	0x58021800
 8102614:	58021c00 	.word	0x58021c00
 8102618:	58022000 	.word	0x58022000
 810261c:	58022400 	.word	0x58022400
 8102620:	2300      	movs	r3, #0
 8102622:	69fa      	ldr	r2, [r7, #28]
 8102624:	f002 0203 	and.w	r2, r2, #3
 8102628:	0092      	lsls	r2, r2, #2
 810262a:	4093      	lsls	r3, r2
 810262c:	69ba      	ldr	r2, [r7, #24]
 810262e:	4313      	orrs	r3, r2
 8102630:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102632:	4938      	ldr	r1, [pc, #224]	; (8102714 <HAL_GPIO_Init+0x35c>)
 8102634:	69fb      	ldr	r3, [r7, #28]
 8102636:	089b      	lsrs	r3, r3, #2
 8102638:	3302      	adds	r3, #2
 810263a:	69ba      	ldr	r2, [r7, #24]
 810263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102648:	693b      	ldr	r3, [r7, #16]
 810264a:	43db      	mvns	r3, r3
 810264c:	69ba      	ldr	r2, [r7, #24]
 810264e:	4013      	ands	r3, r2
 8102650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102652:	683b      	ldr	r3, [r7, #0]
 8102654:	685b      	ldr	r3, [r3, #4]
 8102656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810265a:	2b00      	cmp	r3, #0
 810265c:	d003      	beq.n	8102666 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810265e:	69ba      	ldr	r2, [r7, #24]
 8102660:	693b      	ldr	r3, [r7, #16]
 8102662:	4313      	orrs	r3, r2
 8102664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810266a:	69bb      	ldr	r3, [r7, #24]
 810266c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102672:	685b      	ldr	r3, [r3, #4]
 8102674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102676:	693b      	ldr	r3, [r7, #16]
 8102678:	43db      	mvns	r3, r3
 810267a:	69ba      	ldr	r2, [r7, #24]
 810267c:	4013      	ands	r3, r2
 810267e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102680:	683b      	ldr	r3, [r7, #0]
 8102682:	685b      	ldr	r3, [r3, #4]
 8102684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102688:	2b00      	cmp	r3, #0
 810268a:	d003      	beq.n	8102694 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810268c:	69ba      	ldr	r2, [r7, #24]
 810268e:	693b      	ldr	r3, [r7, #16]
 8102690:	4313      	orrs	r3, r2
 8102692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102698:	69bb      	ldr	r3, [r7, #24]
 810269a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810269c:	697b      	ldr	r3, [r7, #20]
 810269e:	685b      	ldr	r3, [r3, #4]
 81026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026a2:	693b      	ldr	r3, [r7, #16]
 81026a4:	43db      	mvns	r3, r3
 81026a6:	69ba      	ldr	r2, [r7, #24]
 81026a8:	4013      	ands	r3, r2
 81026aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81026ac:	683b      	ldr	r3, [r7, #0]
 81026ae:	685b      	ldr	r3, [r3, #4]
 81026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81026b4:	2b00      	cmp	r3, #0
 81026b6:	d003      	beq.n	81026c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81026b8:	69ba      	ldr	r2, [r7, #24]
 81026ba:	693b      	ldr	r3, [r7, #16]
 81026bc:	4313      	orrs	r3, r2
 81026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81026c0:	697b      	ldr	r3, [r7, #20]
 81026c2:	69ba      	ldr	r2, [r7, #24]
 81026c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81026c6:	697b      	ldr	r3, [r7, #20]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026cc:	693b      	ldr	r3, [r7, #16]
 81026ce:	43db      	mvns	r3, r3
 81026d0:	69ba      	ldr	r2, [r7, #24]
 81026d2:	4013      	ands	r3, r2
 81026d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81026d6:	683b      	ldr	r3, [r7, #0]
 81026d8:	685b      	ldr	r3, [r3, #4]
 81026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d003      	beq.n	81026ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81026e2:	69ba      	ldr	r2, [r7, #24]
 81026e4:	693b      	ldr	r3, [r7, #16]
 81026e6:	4313      	orrs	r3, r2
 81026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81026ea:	697b      	ldr	r3, [r7, #20]
 81026ec:	69ba      	ldr	r2, [r7, #24]
 81026ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81026f0:	69fb      	ldr	r3, [r7, #28]
 81026f2:	3301      	adds	r3, #1
 81026f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81026f6:	683b      	ldr	r3, [r7, #0]
 81026f8:	681a      	ldr	r2, [r3, #0]
 81026fa:	69fb      	ldr	r3, [r7, #28]
 81026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8102700:	2b00      	cmp	r3, #0
 8102702:	f47f ae63 	bne.w	81023cc <HAL_GPIO_Init+0x14>
  }
}
 8102706:	bf00      	nop
 8102708:	bf00      	nop
 810270a:	3724      	adds	r7, #36	; 0x24
 810270c:	46bd      	mov	sp, r7
 810270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102712:	4770      	bx	lr
 8102714:	58000400 	.word	0x58000400

08102718 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102718:	b480      	push	{r7}
 810271a:	b083      	sub	sp, #12
 810271c:	af00      	add	r7, sp, #0
 810271e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102720:	4b05      	ldr	r3, [pc, #20]	; (8102738 <HAL_HSEM_ActivateNotification+0x20>)
 8102722:	681a      	ldr	r2, [r3, #0]
 8102724:	4904      	ldr	r1, [pc, #16]	; (8102738 <HAL_HSEM_ActivateNotification+0x20>)
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	4313      	orrs	r3, r2
 810272a:	600b      	str	r3, [r1, #0]
#endif
}
 810272c:	bf00      	nop
 810272e:	370c      	adds	r7, #12
 8102730:	46bd      	mov	sp, r7
 8102732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102736:	4770      	bx	lr
 8102738:	58026510 	.word	0x58026510

0810273c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810273c:	b580      	push	{r7, lr}
 810273e:	b084      	sub	sp, #16
 8102740:	af00      	add	r7, sp, #0
 8102742:	60f8      	str	r0, [r7, #12]
 8102744:	460b      	mov	r3, r1
 8102746:	607a      	str	r2, [r7, #4]
 8102748:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810274a:	4b37      	ldr	r3, [pc, #220]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 810274c:	681b      	ldr	r3, [r3, #0]
 810274e:	f023 0201 	bic.w	r2, r3, #1
 8102752:	4935      	ldr	r1, [pc, #212]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102754:	68fb      	ldr	r3, [r7, #12]
 8102756:	4313      	orrs	r3, r2
 8102758:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	2b00      	cmp	r3, #0
 810275e:	d123      	bne.n	81027a8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102760:	f7ff f8b2 	bl	81018c8 <HAL_GetCurrentCPUID>
 8102764:	4603      	mov	r3, r0
 8102766:	2b03      	cmp	r3, #3
 8102768:	d158      	bne.n	810281c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810276a:	4b2f      	ldr	r3, [pc, #188]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 810276c:	691b      	ldr	r3, [r3, #16]
 810276e:	4a2e      	ldr	r2, [pc, #184]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102770:	f023 0301 	bic.w	r3, r3, #1
 8102774:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102776:	4b2d      	ldr	r3, [pc, #180]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102778:	691b      	ldr	r3, [r3, #16]
 810277a:	4a2c      	ldr	r2, [pc, #176]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810277c:	f043 0304 	orr.w	r3, r3, #4
 8102780:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102782:	f3bf 8f4f 	dsb	sy
}
 8102786:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102788:	f3bf 8f6f 	isb	sy
}
 810278c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810278e:	7afb      	ldrb	r3, [r7, #11]
 8102790:	2b01      	cmp	r3, #1
 8102792:	d101      	bne.n	8102798 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102794:	bf30      	wfi
 8102796:	e000      	b.n	810279a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102798:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810279a:	4b24      	ldr	r3, [pc, #144]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810279c:	691b      	ldr	r3, [r3, #16]
 810279e:	4a23      	ldr	r2, [pc, #140]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81027a0:	f023 0304 	bic.w	r3, r3, #4
 81027a4:	6113      	str	r3, [r2, #16]
 81027a6:	e03c      	b.n	8102822 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	2b01      	cmp	r3, #1
 81027ac:	d123      	bne.n	81027f6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81027ae:	f7ff f88b 	bl	81018c8 <HAL_GetCurrentCPUID>
 81027b2:	4603      	mov	r3, r0
 81027b4:	2b01      	cmp	r3, #1
 81027b6:	d133      	bne.n	8102820 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81027b8:	4b1b      	ldr	r3, [pc, #108]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 81027ba:	695b      	ldr	r3, [r3, #20]
 81027bc:	4a1a      	ldr	r2, [pc, #104]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 81027be:	f023 0302 	bic.w	r3, r3, #2
 81027c2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81027c4:	4b19      	ldr	r3, [pc, #100]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81027c6:	691b      	ldr	r3, [r3, #16]
 81027c8:	4a18      	ldr	r2, [pc, #96]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81027ca:	f043 0304 	orr.w	r3, r3, #4
 81027ce:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81027d0:	f3bf 8f4f 	dsb	sy
}
 81027d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81027d6:	f3bf 8f6f 	isb	sy
}
 81027da:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81027dc:	7afb      	ldrb	r3, [r7, #11]
 81027de:	2b01      	cmp	r3, #1
 81027e0:	d101      	bne.n	81027e6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81027e2:	bf30      	wfi
 81027e4:	e000      	b.n	81027e8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81027e6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81027e8:	4b10      	ldr	r3, [pc, #64]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81027ea:	691b      	ldr	r3, [r3, #16]
 81027ec:	4a0f      	ldr	r2, [pc, #60]	; (810282c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81027ee:	f023 0304 	bic.w	r3, r3, #4
 81027f2:	6113      	str	r3, [r2, #16]
 81027f4:	e015      	b.n	8102822 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81027f6:	f7ff f867 	bl	81018c8 <HAL_GetCurrentCPUID>
 81027fa:	4603      	mov	r3, r0
 81027fc:	2b03      	cmp	r3, #3
 81027fe:	d106      	bne.n	810280e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102800:	4b09      	ldr	r3, [pc, #36]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102802:	691b      	ldr	r3, [r3, #16]
 8102804:	4a08      	ldr	r2, [pc, #32]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102806:	f023 0304 	bic.w	r3, r3, #4
 810280a:	6113      	str	r3, [r2, #16]
 810280c:	e009      	b.n	8102822 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810280e:	4b06      	ldr	r3, [pc, #24]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102810:	695b      	ldr	r3, [r3, #20]
 8102812:	4a05      	ldr	r2, [pc, #20]	; (8102828 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102814:	f023 0304 	bic.w	r3, r3, #4
 8102818:	6153      	str	r3, [r2, #20]
 810281a:	e002      	b.n	8102822 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810281c:	bf00      	nop
 810281e:	e000      	b.n	8102822 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102820:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102822:	3710      	adds	r7, #16
 8102824:	46bd      	mov	sp, r7
 8102826:	bd80      	pop	{r7, pc}
 8102828:	58024800 	.word	0x58024800
 810282c:	e000ed00 	.word	0xe000ed00

08102830 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102830:	b580      	push	{r7, lr}
 8102832:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102834:	f7ff f848 	bl	81018c8 <HAL_GetCurrentCPUID>
 8102838:	4603      	mov	r3, r0
 810283a:	2b03      	cmp	r3, #3
 810283c:	d101      	bne.n	8102842 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810283e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102840:	e001      	b.n	8102846 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102842:	bf40      	sev
    __WFE ();
 8102844:	bf20      	wfe
}
 8102846:	bf00      	nop
 8102848:	bd80      	pop	{r7, pc}
	...

0810284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810284c:	b480      	push	{r7}
 810284e:	b089      	sub	sp, #36	; 0x24
 8102850:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102852:	4bb3      	ldr	r3, [pc, #716]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102854:	691b      	ldr	r3, [r3, #16]
 8102856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810285a:	2b18      	cmp	r3, #24
 810285c:	f200 8155 	bhi.w	8102b0a <HAL_RCC_GetSysClockFreq+0x2be>
 8102860:	a201      	add	r2, pc, #4	; (adr r2, 8102868 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102866:	bf00      	nop
 8102868:	081028cd 	.word	0x081028cd
 810286c:	08102b0b 	.word	0x08102b0b
 8102870:	08102b0b 	.word	0x08102b0b
 8102874:	08102b0b 	.word	0x08102b0b
 8102878:	08102b0b 	.word	0x08102b0b
 810287c:	08102b0b 	.word	0x08102b0b
 8102880:	08102b0b 	.word	0x08102b0b
 8102884:	08102b0b 	.word	0x08102b0b
 8102888:	081028f3 	.word	0x081028f3
 810288c:	08102b0b 	.word	0x08102b0b
 8102890:	08102b0b 	.word	0x08102b0b
 8102894:	08102b0b 	.word	0x08102b0b
 8102898:	08102b0b 	.word	0x08102b0b
 810289c:	08102b0b 	.word	0x08102b0b
 81028a0:	08102b0b 	.word	0x08102b0b
 81028a4:	08102b0b 	.word	0x08102b0b
 81028a8:	081028f9 	.word	0x081028f9
 81028ac:	08102b0b 	.word	0x08102b0b
 81028b0:	08102b0b 	.word	0x08102b0b
 81028b4:	08102b0b 	.word	0x08102b0b
 81028b8:	08102b0b 	.word	0x08102b0b
 81028bc:	08102b0b 	.word	0x08102b0b
 81028c0:	08102b0b 	.word	0x08102b0b
 81028c4:	08102b0b 	.word	0x08102b0b
 81028c8:	081028ff 	.word	0x081028ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81028cc:	4b94      	ldr	r3, [pc, #592]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	f003 0320 	and.w	r3, r3, #32
 81028d4:	2b00      	cmp	r3, #0
 81028d6:	d009      	beq.n	81028ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81028d8:	4b91      	ldr	r3, [pc, #580]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	08db      	lsrs	r3, r3, #3
 81028de:	f003 0303 	and.w	r3, r3, #3
 81028e2:	4a90      	ldr	r2, [pc, #576]	; (8102b24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81028e4:	fa22 f303 	lsr.w	r3, r2, r3
 81028e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81028ea:	e111      	b.n	8102b10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81028ec:	4b8d      	ldr	r3, [pc, #564]	; (8102b24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81028ee:	61bb      	str	r3, [r7, #24]
    break;
 81028f0:	e10e      	b.n	8102b10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81028f2:	4b8d      	ldr	r3, [pc, #564]	; (8102b28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81028f4:	61bb      	str	r3, [r7, #24]
    break;
 81028f6:	e10b      	b.n	8102b10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81028f8:	4b8c      	ldr	r3, [pc, #560]	; (8102b2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81028fa:	61bb      	str	r3, [r7, #24]
    break;
 81028fc:	e108      	b.n	8102b10 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81028fe:	4b88      	ldr	r3, [pc, #544]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102902:	f003 0303 	and.w	r3, r3, #3
 8102906:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102908:	4b85      	ldr	r3, [pc, #532]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810290c:	091b      	lsrs	r3, r3, #4
 810290e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102912:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102914:	4b82      	ldr	r3, [pc, #520]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102918:	f003 0301 	and.w	r3, r3, #1
 810291c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810291e:	4b80      	ldr	r3, [pc, #512]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102922:	08db      	lsrs	r3, r3, #3
 8102924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102928:	68fa      	ldr	r2, [r7, #12]
 810292a:	fb02 f303 	mul.w	r3, r2, r3
 810292e:	ee07 3a90 	vmov	s15, r3
 8102932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102936:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810293a:	693b      	ldr	r3, [r7, #16]
 810293c:	2b00      	cmp	r3, #0
 810293e:	f000 80e1 	beq.w	8102b04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102942:	697b      	ldr	r3, [r7, #20]
 8102944:	2b02      	cmp	r3, #2
 8102946:	f000 8083 	beq.w	8102a50 <HAL_RCC_GetSysClockFreq+0x204>
 810294a:	697b      	ldr	r3, [r7, #20]
 810294c:	2b02      	cmp	r3, #2
 810294e:	f200 80a1 	bhi.w	8102a94 <HAL_RCC_GetSysClockFreq+0x248>
 8102952:	697b      	ldr	r3, [r7, #20]
 8102954:	2b00      	cmp	r3, #0
 8102956:	d003      	beq.n	8102960 <HAL_RCC_GetSysClockFreq+0x114>
 8102958:	697b      	ldr	r3, [r7, #20]
 810295a:	2b01      	cmp	r3, #1
 810295c:	d056      	beq.n	8102a0c <HAL_RCC_GetSysClockFreq+0x1c0>
 810295e:	e099      	b.n	8102a94 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102960:	4b6f      	ldr	r3, [pc, #444]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	f003 0320 	and.w	r3, r3, #32
 8102968:	2b00      	cmp	r3, #0
 810296a:	d02d      	beq.n	81029c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810296c:	4b6c      	ldr	r3, [pc, #432]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	08db      	lsrs	r3, r3, #3
 8102972:	f003 0303 	and.w	r3, r3, #3
 8102976:	4a6b      	ldr	r2, [pc, #428]	; (8102b24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102978:	fa22 f303 	lsr.w	r3, r2, r3
 810297c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	ee07 3a90 	vmov	s15, r3
 8102984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102988:	693b      	ldr	r3, [r7, #16]
 810298a:	ee07 3a90 	vmov	s15, r3
 810298e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102996:	4b62      	ldr	r3, [pc, #392]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810299a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810299e:	ee07 3a90 	vmov	s15, r3
 81029a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81029aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 81029ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81029c6:	e087      	b.n	8102ad8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81029c8:	693b      	ldr	r3, [r7, #16]
 81029ca:	ee07 3a90 	vmov	s15, r3
 81029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102b34 <HAL_RCC_GetSysClockFreq+0x2e8>
 81029d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81029da:	4b51      	ldr	r3, [pc, #324]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81029de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029e2:	ee07 3a90 	vmov	s15, r3
 81029e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81029ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 81029f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102a0a:	e065      	b.n	8102ad8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a0c:	693b      	ldr	r3, [r7, #16]
 8102a0e:	ee07 3a90 	vmov	s15, r3
 8102a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102b38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a1e:	4b40      	ldr	r3, [pc, #256]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a26:	ee07 3a90 	vmov	s15, r3
 8102a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102a32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102a4e:	e043      	b.n	8102ad8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a50:	693b      	ldr	r3, [r7, #16]
 8102a52:	ee07 3a90 	vmov	s15, r3
 8102a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102b3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8102a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a62:	4b2f      	ldr	r3, [pc, #188]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a6a:	ee07 3a90 	vmov	s15, r3
 8102a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8102a76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102a92:	e021      	b.n	8102ad8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a94:	693b      	ldr	r3, [r7, #16]
 8102a96:	ee07 3a90 	vmov	s15, r3
 8102a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102b38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102aa6:	4b1e      	ldr	r3, [pc, #120]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102aae:	ee07 3a90 	vmov	s15, r3
 8102ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102aba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102ad6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102ad8:	4b11      	ldr	r3, [pc, #68]	; (8102b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102adc:	0a5b      	lsrs	r3, r3, #9
 8102ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102ae2:	3301      	adds	r3, #1
 8102ae4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102ae6:	683b      	ldr	r3, [r7, #0]
 8102ae8:	ee07 3a90 	vmov	s15, r3
 8102aec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8102af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102afc:	ee17 3a90 	vmov	r3, s15
 8102b00:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102b02:	e005      	b.n	8102b10 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102b04:	2300      	movs	r3, #0
 8102b06:	61bb      	str	r3, [r7, #24]
    break;
 8102b08:	e002      	b.n	8102b10 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102b0a:	4b07      	ldr	r3, [pc, #28]	; (8102b28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102b0c:	61bb      	str	r3, [r7, #24]
    break;
 8102b0e:	bf00      	nop
  }

  return sysclockfreq;
 8102b10:	69bb      	ldr	r3, [r7, #24]
}
 8102b12:	4618      	mov	r0, r3
 8102b14:	3724      	adds	r7, #36	; 0x24
 8102b16:	46bd      	mov	sp, r7
 8102b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b1c:	4770      	bx	lr
 8102b1e:	bf00      	nop
 8102b20:	58024400 	.word	0x58024400
 8102b24:	03d09000 	.word	0x03d09000
 8102b28:	003d0900 	.word	0x003d0900
 8102b2c:	017d7840 	.word	0x017d7840
 8102b30:	46000000 	.word	0x46000000
 8102b34:	4c742400 	.word	0x4c742400
 8102b38:	4a742400 	.word	0x4a742400
 8102b3c:	4bbebc20 	.word	0x4bbebc20

08102b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102b40:	b580      	push	{r7, lr}
 8102b42:	b082      	sub	sp, #8
 8102b44:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102b46:	f7ff fe81 	bl	810284c <HAL_RCC_GetSysClockFreq>
 8102b4a:	4602      	mov	r2, r0
 8102b4c:	4b11      	ldr	r3, [pc, #68]	; (8102b94 <HAL_RCC_GetHCLKFreq+0x54>)
 8102b4e:	699b      	ldr	r3, [r3, #24]
 8102b50:	0a1b      	lsrs	r3, r3, #8
 8102b52:	f003 030f 	and.w	r3, r3, #15
 8102b56:	4910      	ldr	r1, [pc, #64]	; (8102b98 <HAL_RCC_GetHCLKFreq+0x58>)
 8102b58:	5ccb      	ldrb	r3, [r1, r3]
 8102b5a:	f003 031f 	and.w	r3, r3, #31
 8102b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8102b62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102b64:	4b0b      	ldr	r3, [pc, #44]	; (8102b94 <HAL_RCC_GetHCLKFreq+0x54>)
 8102b66:	699b      	ldr	r3, [r3, #24]
 8102b68:	f003 030f 	and.w	r3, r3, #15
 8102b6c:	4a0a      	ldr	r2, [pc, #40]	; (8102b98 <HAL_RCC_GetHCLKFreq+0x58>)
 8102b6e:	5cd3      	ldrb	r3, [r2, r3]
 8102b70:	f003 031f 	and.w	r3, r3, #31
 8102b74:	687a      	ldr	r2, [r7, #4]
 8102b76:	fa22 f303 	lsr.w	r3, r2, r3
 8102b7a:	4a08      	ldr	r2, [pc, #32]	; (8102b9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102b7c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102b7e:	4b07      	ldr	r3, [pc, #28]	; (8102b9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	4a07      	ldr	r2, [pc, #28]	; (8102ba0 <HAL_RCC_GetHCLKFreq+0x60>)
 8102b84:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102b86:	4b05      	ldr	r3, [pc, #20]	; (8102b9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102b88:	681b      	ldr	r3, [r3, #0]
}
 8102b8a:	4618      	mov	r0, r3
 8102b8c:	3708      	adds	r7, #8
 8102b8e:	46bd      	mov	sp, r7
 8102b90:	bd80      	pop	{r7, pc}
 8102b92:	bf00      	nop
 8102b94:	58024400 	.word	0x58024400
 8102b98:	08106700 	.word	0x08106700
 8102b9c:	10000004 	.word	0x10000004
 8102ba0:	10000000 	.word	0x10000000

08102ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102ba4:	b580      	push	{r7, lr}
 8102ba6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102ba8:	f7ff ffca 	bl	8102b40 <HAL_RCC_GetHCLKFreq>
 8102bac:	4602      	mov	r2, r0
 8102bae:	4b06      	ldr	r3, [pc, #24]	; (8102bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102bb0:	69db      	ldr	r3, [r3, #28]
 8102bb2:	091b      	lsrs	r3, r3, #4
 8102bb4:	f003 0307 	and.w	r3, r3, #7
 8102bb8:	4904      	ldr	r1, [pc, #16]	; (8102bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8102bba:	5ccb      	ldrb	r3, [r1, r3]
 8102bbc:	f003 031f 	and.w	r3, r3, #31
 8102bc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102bc4:	4618      	mov	r0, r3
 8102bc6:	bd80      	pop	{r7, pc}
 8102bc8:	58024400 	.word	0x58024400
 8102bcc:	08106700 	.word	0x08106700

08102bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102bd0:	b580      	push	{r7, lr}
 8102bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102bd4:	f7ff ffb4 	bl	8102b40 <HAL_RCC_GetHCLKFreq>
 8102bd8:	4602      	mov	r2, r0
 8102bda:	4b06      	ldr	r3, [pc, #24]	; (8102bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102bdc:	69db      	ldr	r3, [r3, #28]
 8102bde:	0a1b      	lsrs	r3, r3, #8
 8102be0:	f003 0307 	and.w	r3, r3, #7
 8102be4:	4904      	ldr	r1, [pc, #16]	; (8102bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8102be6:	5ccb      	ldrb	r3, [r1, r3]
 8102be8:	f003 031f 	and.w	r3, r3, #31
 8102bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102bf0:	4618      	mov	r0, r3
 8102bf2:	bd80      	pop	{r7, pc}
 8102bf4:	58024400 	.word	0x58024400
 8102bf8:	08106700 	.word	0x08106700

08102bfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102bfc:	b580      	push	{r7, lr}
 8102bfe:	b086      	sub	sp, #24
 8102c00:	af00      	add	r7, sp, #0
 8102c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102c04:	2300      	movs	r3, #0
 8102c06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102c08:	2300      	movs	r3, #0
 8102c0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102c14:	2b00      	cmp	r3, #0
 8102c16:	d03f      	beq.n	8102c98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102c1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102c20:	d02a      	beq.n	8102c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102c22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102c26:	d824      	bhi.n	8102c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102c2c:	d018      	beq.n	8102c60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102c32:	d81e      	bhi.n	8102c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102c34:	2b00      	cmp	r3, #0
 8102c36:	d003      	beq.n	8102c40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102c3c:	d007      	beq.n	8102c4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102c3e:	e018      	b.n	8102c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c40:	4ba3      	ldr	r3, [pc, #652]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c44:	4aa2      	ldr	r2, [pc, #648]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102c4c:	e015      	b.n	8102c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	3304      	adds	r3, #4
 8102c52:	2102      	movs	r1, #2
 8102c54:	4618      	mov	r0, r3
 8102c56:	f001 f9d5 	bl	8104004 <RCCEx_PLL2_Config>
 8102c5a:	4603      	mov	r3, r0
 8102c5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102c5e:	e00c      	b.n	8102c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	3324      	adds	r3, #36	; 0x24
 8102c64:	2102      	movs	r1, #2
 8102c66:	4618      	mov	r0, r3
 8102c68:	f001 fa7e 	bl	8104168 <RCCEx_PLL3_Config>
 8102c6c:	4603      	mov	r3, r0
 8102c6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102c70:	e003      	b.n	8102c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102c72:	2301      	movs	r3, #1
 8102c74:	75fb      	strb	r3, [r7, #23]
      break;
 8102c76:	e000      	b.n	8102c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c7a:	7dfb      	ldrb	r3, [r7, #23]
 8102c7c:	2b00      	cmp	r3, #0
 8102c7e:	d109      	bne.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102c80:	4b93      	ldr	r3, [pc, #588]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102c8c:	4990      	ldr	r1, [pc, #576]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102c8e:	4313      	orrs	r3, r2
 8102c90:	650b      	str	r3, [r1, #80]	; 0x50
 8102c92:	e001      	b.n	8102c98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c94:	7dfb      	ldrb	r3, [r7, #23]
 8102c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	681b      	ldr	r3, [r3, #0]
 8102c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102ca0:	2b00      	cmp	r3, #0
 8102ca2:	d03d      	beq.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ca8:	2b04      	cmp	r3, #4
 8102caa:	d826      	bhi.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102cac:	a201      	add	r2, pc, #4	; (adr r2, 8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102cb2:	bf00      	nop
 8102cb4:	08102cc9 	.word	0x08102cc9
 8102cb8:	08102cd7 	.word	0x08102cd7
 8102cbc:	08102ce9 	.word	0x08102ce9
 8102cc0:	08102d01 	.word	0x08102d01
 8102cc4:	08102d01 	.word	0x08102d01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cc8:	4b81      	ldr	r3, [pc, #516]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ccc:	4a80      	ldr	r2, [pc, #512]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102cd4:	e015      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	3304      	adds	r3, #4
 8102cda:	2100      	movs	r1, #0
 8102cdc:	4618      	mov	r0, r3
 8102cde:	f001 f991 	bl	8104004 <RCCEx_PLL2_Config>
 8102ce2:	4603      	mov	r3, r0
 8102ce4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102ce6:	e00c      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	3324      	adds	r3, #36	; 0x24
 8102cec:	2100      	movs	r1, #0
 8102cee:	4618      	mov	r0, r3
 8102cf0:	f001 fa3a 	bl	8104168 <RCCEx_PLL3_Config>
 8102cf4:	4603      	mov	r3, r0
 8102cf6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102cf8:	e003      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102cfa:	2301      	movs	r3, #1
 8102cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8102cfe:	e000      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d02:	7dfb      	ldrb	r3, [r7, #23]
 8102d04:	2b00      	cmp	r3, #0
 8102d06:	d109      	bne.n	8102d1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102d08:	4b71      	ldr	r3, [pc, #452]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d0c:	f023 0207 	bic.w	r2, r3, #7
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d14:	496e      	ldr	r1, [pc, #440]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d16:	4313      	orrs	r3, r2
 8102d18:	650b      	str	r3, [r1, #80]	; 0x50
 8102d1a:	e001      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d1c:	7dfb      	ldrb	r3, [r7, #23]
 8102d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102d28:	2b00      	cmp	r3, #0
 8102d2a:	d042      	beq.n	8102db2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102d34:	d02b      	beq.n	8102d8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102d3a:	d825      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102d3c:	2bc0      	cmp	r3, #192	; 0xc0
 8102d3e:	d028      	beq.n	8102d92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102d40:	2bc0      	cmp	r3, #192	; 0xc0
 8102d42:	d821      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102d44:	2b80      	cmp	r3, #128	; 0x80
 8102d46:	d016      	beq.n	8102d76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102d48:	2b80      	cmp	r3, #128	; 0x80
 8102d4a:	d81d      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102d4c:	2b00      	cmp	r3, #0
 8102d4e:	d002      	beq.n	8102d56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102d50:	2b40      	cmp	r3, #64	; 0x40
 8102d52:	d007      	beq.n	8102d64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102d54:	e018      	b.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d56:	4b5e      	ldr	r3, [pc, #376]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d5a:	4a5d      	ldr	r2, [pc, #372]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102d62:	e017      	b.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	3304      	adds	r3, #4
 8102d68:	2100      	movs	r1, #0
 8102d6a:	4618      	mov	r0, r3
 8102d6c:	f001 f94a 	bl	8104004 <RCCEx_PLL2_Config>
 8102d70:	4603      	mov	r3, r0
 8102d72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102d74:	e00e      	b.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	3324      	adds	r3, #36	; 0x24
 8102d7a:	2100      	movs	r1, #0
 8102d7c:	4618      	mov	r0, r3
 8102d7e:	f001 f9f3 	bl	8104168 <RCCEx_PLL3_Config>
 8102d82:	4603      	mov	r3, r0
 8102d84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102d86:	e005      	b.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d88:	2301      	movs	r3, #1
 8102d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8102d8c:	e002      	b.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102d8e:	bf00      	nop
 8102d90:	e000      	b.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d94:	7dfb      	ldrb	r3, [r7, #23]
 8102d96:	2b00      	cmp	r3, #0
 8102d98:	d109      	bne.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102d9a:	4b4d      	ldr	r3, [pc, #308]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102da6:	494a      	ldr	r1, [pc, #296]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102da8:	4313      	orrs	r3, r2
 8102daa:	650b      	str	r3, [r1, #80]	; 0x50
 8102dac:	e001      	b.n	8102db2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dae:	7dfb      	ldrb	r3, [r7, #23]
 8102db0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	681b      	ldr	r3, [r3, #0]
 8102db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102dba:	2b00      	cmp	r3, #0
 8102dbc:	d049      	beq.n	8102e52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102dc8:	d030      	beq.n	8102e2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102dce:	d82a      	bhi.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102dd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102dd4:	d02c      	beq.n	8102e30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102dd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102dda:	d824      	bhi.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102de0:	d018      	beq.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102de6:	d81e      	bhi.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102de8:	2b00      	cmp	r3, #0
 8102dea:	d003      	beq.n	8102df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102df0:	d007      	beq.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102df2:	e018      	b.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102df4:	4b36      	ldr	r3, [pc, #216]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102df8:	4a35      	ldr	r2, [pc, #212]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102e00:	e017      	b.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	3304      	adds	r3, #4
 8102e06:	2100      	movs	r1, #0
 8102e08:	4618      	mov	r0, r3
 8102e0a:	f001 f8fb 	bl	8104004 <RCCEx_PLL2_Config>
 8102e0e:	4603      	mov	r3, r0
 8102e10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102e12:	e00e      	b.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	3324      	adds	r3, #36	; 0x24
 8102e18:	2100      	movs	r1, #0
 8102e1a:	4618      	mov	r0, r3
 8102e1c:	f001 f9a4 	bl	8104168 <RCCEx_PLL3_Config>
 8102e20:	4603      	mov	r3, r0
 8102e22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102e24:	e005      	b.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102e26:	2301      	movs	r3, #1
 8102e28:	75fb      	strb	r3, [r7, #23]
      break;
 8102e2a:	e002      	b.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102e2c:	bf00      	nop
 8102e2e:	e000      	b.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e32:	7dfb      	ldrb	r3, [r7, #23]
 8102e34:	2b00      	cmp	r3, #0
 8102e36:	d10a      	bne.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102e38:	4b25      	ldr	r3, [pc, #148]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102e46:	4922      	ldr	r1, [pc, #136]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e48:	4313      	orrs	r3, r2
 8102e4a:	658b      	str	r3, [r1, #88]	; 0x58
 8102e4c:	e001      	b.n	8102e52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e4e:	7dfb      	ldrb	r3, [r7, #23]
 8102e50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	d04b      	beq.n	8102ef6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102e68:	d030      	beq.n	8102ecc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102e6e:	d82a      	bhi.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102e70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102e74:	d02e      	beq.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8102e76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102e7a:	d824      	bhi.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102e80:	d018      	beq.n	8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102e86:	d81e      	bhi.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d003      	beq.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102e90:	d007      	beq.n	8102ea2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102e92:	e018      	b.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e94:	4b0e      	ldr	r3, [pc, #56]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e98:	4a0d      	ldr	r2, [pc, #52]	; (8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102ea0:	e019      	b.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	3304      	adds	r3, #4
 8102ea6:	2100      	movs	r1, #0
 8102ea8:	4618      	mov	r0, r3
 8102eaa:	f001 f8ab 	bl	8104004 <RCCEx_PLL2_Config>
 8102eae:	4603      	mov	r3, r0
 8102eb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102eb2:	e010      	b.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	3324      	adds	r3, #36	; 0x24
 8102eb8:	2100      	movs	r1, #0
 8102eba:	4618      	mov	r0, r3
 8102ebc:	f001 f954 	bl	8104168 <RCCEx_PLL3_Config>
 8102ec0:	4603      	mov	r3, r0
 8102ec2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102ec4:	e007      	b.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102ec6:	2301      	movs	r3, #1
 8102ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8102eca:	e004      	b.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102ecc:	bf00      	nop
 8102ece:	e002      	b.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8102ed0:	58024400 	.word	0x58024400
      break;
 8102ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ed6:	7dfb      	ldrb	r3, [r7, #23]
 8102ed8:	2b00      	cmp	r3, #0
 8102eda:	d10a      	bne.n	8102ef2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102edc:	4b99      	ldr	r3, [pc, #612]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ee0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102eea:	4996      	ldr	r1, [pc, #600]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102eec:	4313      	orrs	r3, r2
 8102eee:	658b      	str	r3, [r1, #88]	; 0x58
 8102ef0:	e001      	b.n	8102ef6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ef2:	7dfb      	ldrb	r3, [r7, #23]
 8102ef4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	d032      	beq.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f06:	2b30      	cmp	r3, #48	; 0x30
 8102f08:	d01c      	beq.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8102f0a:	2b30      	cmp	r3, #48	; 0x30
 8102f0c:	d817      	bhi.n	8102f3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102f0e:	2b20      	cmp	r3, #32
 8102f10:	d00c      	beq.n	8102f2c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8102f12:	2b20      	cmp	r3, #32
 8102f14:	d813      	bhi.n	8102f3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102f16:	2b00      	cmp	r3, #0
 8102f18:	d016      	beq.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8102f1a:	2b10      	cmp	r3, #16
 8102f1c:	d10f      	bne.n	8102f3e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f1e:	4b89      	ldr	r3, [pc, #548]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f22:	4a88      	ldr	r2, [pc, #544]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102f2a:	e00e      	b.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	3304      	adds	r3, #4
 8102f30:	2102      	movs	r1, #2
 8102f32:	4618      	mov	r0, r3
 8102f34:	f001 f866 	bl	8104004 <RCCEx_PLL2_Config>
 8102f38:	4603      	mov	r3, r0
 8102f3a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102f3c:	e005      	b.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102f3e:	2301      	movs	r3, #1
 8102f40:	75fb      	strb	r3, [r7, #23]
      break;
 8102f42:	e002      	b.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102f44:	bf00      	nop
 8102f46:	e000      	b.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f4a:	7dfb      	ldrb	r3, [r7, #23]
 8102f4c:	2b00      	cmp	r3, #0
 8102f4e:	d109      	bne.n	8102f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102f50:	4b7c      	ldr	r3, [pc, #496]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f5c:	4979      	ldr	r1, [pc, #484]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102f5e:	4313      	orrs	r3, r2
 8102f60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102f62:	e001      	b.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f64:	7dfb      	ldrb	r3, [r7, #23]
 8102f66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102f70:	2b00      	cmp	r3, #0
 8102f72:	d047      	beq.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f7c:	d030      	beq.n	8102fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8102f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f82:	d82a      	bhi.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102f84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102f88:	d02c      	beq.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8102f8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102f8e:	d824      	bhi.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102f94:	d018      	beq.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8102f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102f9a:	d81e      	bhi.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102f9c:	2b00      	cmp	r3, #0
 8102f9e:	d003      	beq.n	8102fa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8102fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102fa4:	d007      	beq.n	8102fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8102fa6:	e018      	b.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fa8:	4b66      	ldr	r3, [pc, #408]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fac:	4a65      	ldr	r2, [pc, #404]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102fb4:	e017      	b.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	3304      	adds	r3, #4
 8102fba:	2100      	movs	r1, #0
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	f001 f821 	bl	8104004 <RCCEx_PLL2_Config>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102fc6:	e00e      	b.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	3324      	adds	r3, #36	; 0x24
 8102fcc:	2100      	movs	r1, #0
 8102fce:	4618      	mov	r0, r3
 8102fd0:	f001 f8ca 	bl	8104168 <RCCEx_PLL3_Config>
 8102fd4:	4603      	mov	r3, r0
 8102fd6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102fd8:	e005      	b.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fda:	2301      	movs	r3, #1
 8102fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8102fde:	e002      	b.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102fe0:	bf00      	nop
 8102fe2:	e000      	b.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fe6:	7dfb      	ldrb	r3, [r7, #23]
 8102fe8:	2b00      	cmp	r3, #0
 8102fea:	d109      	bne.n	8103000 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102fec:	4b55      	ldr	r3, [pc, #340]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ff0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ff8:	4952      	ldr	r1, [pc, #328]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102ffa:	4313      	orrs	r3, r2
 8102ffc:	650b      	str	r3, [r1, #80]	; 0x50
 8102ffe:	e001      	b.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103000:	7dfb      	ldrb	r3, [r7, #23]
 8103002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810300c:	2b00      	cmp	r3, #0
 810300e:	d049      	beq.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103018:	d02e      	beq.n	8103078 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 810301a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810301e:	d828      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103020:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103024:	d02a      	beq.n	810307c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810302a:	d822      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x476>
 810302c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103030:	d026      	beq.n	8103080 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103032:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103036:	d81c      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810303c:	d010      	beq.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x464>
 810303e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103042:	d816      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103044:	2b00      	cmp	r3, #0
 8103046:	d01d      	beq.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810304c:	d111      	bne.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	3304      	adds	r3, #4
 8103052:	2101      	movs	r1, #1
 8103054:	4618      	mov	r0, r3
 8103056:	f000 ffd5 	bl	8104004 <RCCEx_PLL2_Config>
 810305a:	4603      	mov	r3, r0
 810305c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810305e:	e012      	b.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	3324      	adds	r3, #36	; 0x24
 8103064:	2101      	movs	r1, #1
 8103066:	4618      	mov	r0, r3
 8103068:	f001 f87e 	bl	8104168 <RCCEx_PLL3_Config>
 810306c:	4603      	mov	r3, r0
 810306e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103070:	e009      	b.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103072:	2301      	movs	r3, #1
 8103074:	75fb      	strb	r3, [r7, #23]
      break;
 8103076:	e006      	b.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103078:	bf00      	nop
 810307a:	e004      	b.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810307c:	bf00      	nop
 810307e:	e002      	b.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103080:	bf00      	nop
 8103082:	e000      	b.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103086:	7dfb      	ldrb	r3, [r7, #23]
 8103088:	2b00      	cmp	r3, #0
 810308a:	d109      	bne.n	81030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810308c:	4b2d      	ldr	r3, [pc, #180]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103090:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103094:	687b      	ldr	r3, [r7, #4]
 8103096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103098:	492a      	ldr	r1, [pc, #168]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810309a:	4313      	orrs	r3, r2
 810309c:	650b      	str	r3, [r1, #80]	; 0x50
 810309e:	e001      	b.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030a0:	7dfb      	ldrb	r3, [r7, #23]
 81030a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81030ac:	2b00      	cmp	r3, #0
 81030ae:	d04d      	beq.n	810314c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81030b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81030ba:	d02e      	beq.n	810311a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81030c0:	d828      	bhi.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81030c6:	d02a      	beq.n	810311e <HAL_RCCEx_PeriphCLKConfig+0x522>
 81030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81030cc:	d822      	bhi.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81030ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81030d2:	d026      	beq.n	8103122 <HAL_RCCEx_PeriphCLKConfig+0x526>
 81030d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81030d8:	d81c      	bhi.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81030da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81030de:	d010      	beq.n	8103102 <HAL_RCCEx_PeriphCLKConfig+0x506>
 81030e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81030e4:	d816      	bhi.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81030e6:	2b00      	cmp	r3, #0
 81030e8:	d01d      	beq.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81030ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81030ee:	d111      	bne.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	3304      	adds	r3, #4
 81030f4:	2101      	movs	r1, #1
 81030f6:	4618      	mov	r0, r3
 81030f8:	f000 ff84 	bl	8104004 <RCCEx_PLL2_Config>
 81030fc:	4603      	mov	r3, r0
 81030fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103100:	e012      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	3324      	adds	r3, #36	; 0x24
 8103106:	2101      	movs	r1, #1
 8103108:	4618      	mov	r0, r3
 810310a:	f001 f82d 	bl	8104168 <RCCEx_PLL3_Config>
 810310e:	4603      	mov	r3, r0
 8103110:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103112:	e009      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103114:	2301      	movs	r3, #1
 8103116:	75fb      	strb	r3, [r7, #23]
      break;
 8103118:	e006      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810311a:	bf00      	nop
 810311c:	e004      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810311e:	bf00      	nop
 8103120:	e002      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103122:	bf00      	nop
 8103124:	e000      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103128:	7dfb      	ldrb	r3, [r7, #23]
 810312a:	2b00      	cmp	r3, #0
 810312c:	d10c      	bne.n	8103148 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810312e:	4b05      	ldr	r3, [pc, #20]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103132:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810313c:	4901      	ldr	r1, [pc, #4]	; (8103144 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810313e:	4313      	orrs	r3, r2
 8103140:	658b      	str	r3, [r1, #88]	; 0x58
 8103142:	e003      	b.n	810314c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103148:	7dfb      	ldrb	r3, [r7, #23]
 810314a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103154:	2b00      	cmp	r3, #0
 8103156:	d02f      	beq.n	81031b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810315c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103160:	d00e      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103166:	d814      	bhi.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103168:	2b00      	cmp	r3, #0
 810316a:	d015      	beq.n	8103198 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 810316c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103170:	d10f      	bne.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103172:	4bb0      	ldr	r3, [pc, #704]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103176:	4aaf      	ldr	r2, [pc, #700]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810317c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810317e:	e00c      	b.n	810319a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	3304      	adds	r3, #4
 8103184:	2101      	movs	r1, #1
 8103186:	4618      	mov	r0, r3
 8103188:	f000 ff3c 	bl	8104004 <RCCEx_PLL2_Config>
 810318c:	4603      	mov	r3, r0
 810318e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103190:	e003      	b.n	810319a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103192:	2301      	movs	r3, #1
 8103194:	75fb      	strb	r3, [r7, #23]
      break;
 8103196:	e000      	b.n	810319a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103198:	bf00      	nop
    }

    if(ret == HAL_OK)
 810319a:	7dfb      	ldrb	r3, [r7, #23]
 810319c:	2b00      	cmp	r3, #0
 810319e:	d109      	bne.n	81031b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81031a0:	4ba4      	ldr	r3, [pc, #656]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81031a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81031ac:	49a1      	ldr	r1, [pc, #644]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81031ae:	4313      	orrs	r3, r2
 81031b0:	650b      	str	r3, [r1, #80]	; 0x50
 81031b2:	e001      	b.n	81031b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031b4:	7dfb      	ldrb	r3, [r7, #23]
 81031b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	681b      	ldr	r3, [r3, #0]
 81031bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81031c0:	2b00      	cmp	r3, #0
 81031c2:	d032      	beq.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031c8:	2b03      	cmp	r3, #3
 81031ca:	d81b      	bhi.n	8103204 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81031cc:	a201      	add	r2, pc, #4	; (adr r2, 81031d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031d2:	bf00      	nop
 81031d4:	0810320b 	.word	0x0810320b
 81031d8:	081031e5 	.word	0x081031e5
 81031dc:	081031f3 	.word	0x081031f3
 81031e0:	0810320b 	.word	0x0810320b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031e4:	4b93      	ldr	r3, [pc, #588]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031e8:	4a92      	ldr	r2, [pc, #584]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81031ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81031f0:	e00c      	b.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	3304      	adds	r3, #4
 81031f6:	2102      	movs	r1, #2
 81031f8:	4618      	mov	r0, r3
 81031fa:	f000 ff03 	bl	8104004 <RCCEx_PLL2_Config>
 81031fe:	4603      	mov	r3, r0
 8103200:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103202:	e003      	b.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103204:	2301      	movs	r3, #1
 8103206:	75fb      	strb	r3, [r7, #23]
      break;
 8103208:	e000      	b.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810320a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810320c:	7dfb      	ldrb	r3, [r7, #23]
 810320e:	2b00      	cmp	r3, #0
 8103210:	d109      	bne.n	8103226 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103212:	4b88      	ldr	r3, [pc, #544]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103216:	f023 0203 	bic.w	r2, r3, #3
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810321e:	4985      	ldr	r1, [pc, #532]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103220:	4313      	orrs	r3, r2
 8103222:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103224:	e001      	b.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103226:	7dfb      	ldrb	r3, [r7, #23]
 8103228:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103232:	2b00      	cmp	r3, #0
 8103234:	f000 8088 	beq.w	8103348 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103238:	4b7f      	ldr	r3, [pc, #508]	; (8103438 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810323a:	681b      	ldr	r3, [r3, #0]
 810323c:	4a7e      	ldr	r2, [pc, #504]	; (8103438 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810323e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103244:	f7fe fa24 	bl	8101690 <HAL_GetTick>
 8103248:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810324a:	e009      	b.n	8103260 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810324c:	f7fe fa20 	bl	8101690 <HAL_GetTick>
 8103250:	4602      	mov	r2, r0
 8103252:	693b      	ldr	r3, [r7, #16]
 8103254:	1ad3      	subs	r3, r2, r3
 8103256:	2b64      	cmp	r3, #100	; 0x64
 8103258:	d902      	bls.n	8103260 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810325a:	2303      	movs	r3, #3
 810325c:	75fb      	strb	r3, [r7, #23]
        break;
 810325e:	e005      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103260:	4b75      	ldr	r3, [pc, #468]	; (8103438 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103268:	2b00      	cmp	r3, #0
 810326a:	d0ef      	beq.n	810324c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810326c:	7dfb      	ldrb	r3, [r7, #23]
 810326e:	2b00      	cmp	r3, #0
 8103270:	d168      	bne.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103272:	4b70      	ldr	r3, [pc, #448]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810327c:	4053      	eors	r3, r2
 810327e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103282:	2b00      	cmp	r3, #0
 8103284:	d013      	beq.n	81032ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103286:	4b6b      	ldr	r3, [pc, #428]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810328a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810328e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103290:	4b68      	ldr	r3, [pc, #416]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103294:	4a67      	ldr	r2, [pc, #412]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810329a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810329c:	4b65      	ldr	r3, [pc, #404]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81032a0:	4a64      	ldr	r2, [pc, #400]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81032a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81032a8:	4a62      	ldr	r2, [pc, #392]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032aa:	68fb      	ldr	r3, [r7, #12]
 81032ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81032b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81032b8:	d115      	bne.n	81032e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81032ba:	f7fe f9e9 	bl	8101690 <HAL_GetTick>
 81032be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81032c0:	e00b      	b.n	81032da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81032c2:	f7fe f9e5 	bl	8101690 <HAL_GetTick>
 81032c6:	4602      	mov	r2, r0
 81032c8:	693b      	ldr	r3, [r7, #16]
 81032ca:	1ad3      	subs	r3, r2, r3
 81032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 81032d0:	4293      	cmp	r3, r2
 81032d2:	d902      	bls.n	81032da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81032d4:	2303      	movs	r3, #3
 81032d6:	75fb      	strb	r3, [r7, #23]
            break;
 81032d8:	e005      	b.n	81032e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81032da:	4b56      	ldr	r3, [pc, #344]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81032de:	f003 0302 	and.w	r3, r3, #2
 81032e2:	2b00      	cmp	r3, #0
 81032e4:	d0ed      	beq.n	81032c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81032e6:	7dfb      	ldrb	r3, [r7, #23]
 81032e8:	2b00      	cmp	r3, #0
 81032ea:	d128      	bne.n	810333e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81032f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81032f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81032fa:	d10f      	bne.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x720>
 81032fc:	4b4d      	ldr	r3, [pc, #308]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032fe:	691b      	ldr	r3, [r3, #16]
 8103300:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810330a:	091b      	lsrs	r3, r3, #4
 810330c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103310:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103314:	4947      	ldr	r1, [pc, #284]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103316:	4313      	orrs	r3, r2
 8103318:	610b      	str	r3, [r1, #16]
 810331a:	e005      	b.n	8103328 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810331c:	4b45      	ldr	r3, [pc, #276]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810331e:	691b      	ldr	r3, [r3, #16]
 8103320:	4a44      	ldr	r2, [pc, #272]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103322:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103326:	6113      	str	r3, [r2, #16]
 8103328:	4b42      	ldr	r3, [pc, #264]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810332a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103336:	493f      	ldr	r1, [pc, #252]	; (8103434 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103338:	4313      	orrs	r3, r2
 810333a:	670b      	str	r3, [r1, #112]	; 0x70
 810333c:	e004      	b.n	8103348 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810333e:	7dfb      	ldrb	r3, [r7, #23]
 8103340:	75bb      	strb	r3, [r7, #22]
 8103342:	e001      	b.n	8103348 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103344:	7dfb      	ldrb	r3, [r7, #23]
 8103346:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	681b      	ldr	r3, [r3, #0]
 810334c:	f003 0301 	and.w	r3, r3, #1
 8103350:	2b00      	cmp	r3, #0
 8103352:	f000 8083 	beq.w	810345c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810335a:	2b28      	cmp	r3, #40	; 0x28
 810335c:	d866      	bhi.n	810342c <HAL_RCCEx_PeriphCLKConfig+0x830>
 810335e:	a201      	add	r2, pc, #4	; (adr r2, 8103364 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103364:	0810343d 	.word	0x0810343d
 8103368:	0810342d 	.word	0x0810342d
 810336c:	0810342d 	.word	0x0810342d
 8103370:	0810342d 	.word	0x0810342d
 8103374:	0810342d 	.word	0x0810342d
 8103378:	0810342d 	.word	0x0810342d
 810337c:	0810342d 	.word	0x0810342d
 8103380:	0810342d 	.word	0x0810342d
 8103384:	08103409 	.word	0x08103409
 8103388:	0810342d 	.word	0x0810342d
 810338c:	0810342d 	.word	0x0810342d
 8103390:	0810342d 	.word	0x0810342d
 8103394:	0810342d 	.word	0x0810342d
 8103398:	0810342d 	.word	0x0810342d
 810339c:	0810342d 	.word	0x0810342d
 81033a0:	0810342d 	.word	0x0810342d
 81033a4:	0810341b 	.word	0x0810341b
 81033a8:	0810342d 	.word	0x0810342d
 81033ac:	0810342d 	.word	0x0810342d
 81033b0:	0810342d 	.word	0x0810342d
 81033b4:	0810342d 	.word	0x0810342d
 81033b8:	0810342d 	.word	0x0810342d
 81033bc:	0810342d 	.word	0x0810342d
 81033c0:	0810342d 	.word	0x0810342d
 81033c4:	0810343d 	.word	0x0810343d
 81033c8:	0810342d 	.word	0x0810342d
 81033cc:	0810342d 	.word	0x0810342d
 81033d0:	0810342d 	.word	0x0810342d
 81033d4:	0810342d 	.word	0x0810342d
 81033d8:	0810342d 	.word	0x0810342d
 81033dc:	0810342d 	.word	0x0810342d
 81033e0:	0810342d 	.word	0x0810342d
 81033e4:	0810343d 	.word	0x0810343d
 81033e8:	0810342d 	.word	0x0810342d
 81033ec:	0810342d 	.word	0x0810342d
 81033f0:	0810342d 	.word	0x0810342d
 81033f4:	0810342d 	.word	0x0810342d
 81033f8:	0810342d 	.word	0x0810342d
 81033fc:	0810342d 	.word	0x0810342d
 8103400:	0810342d 	.word	0x0810342d
 8103404:	0810343d 	.word	0x0810343d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	3304      	adds	r3, #4
 810340c:	2101      	movs	r1, #1
 810340e:	4618      	mov	r0, r3
 8103410:	f000 fdf8 	bl	8104004 <RCCEx_PLL2_Config>
 8103414:	4603      	mov	r3, r0
 8103416:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103418:	e011      	b.n	810343e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	3324      	adds	r3, #36	; 0x24
 810341e:	2101      	movs	r1, #1
 8103420:	4618      	mov	r0, r3
 8103422:	f000 fea1 	bl	8104168 <RCCEx_PLL3_Config>
 8103426:	4603      	mov	r3, r0
 8103428:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810342a:	e008      	b.n	810343e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810342c:	2301      	movs	r3, #1
 810342e:	75fb      	strb	r3, [r7, #23]
      break;
 8103430:	e005      	b.n	810343e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8103432:	bf00      	nop
 8103434:	58024400 	.word	0x58024400
 8103438:	58024800 	.word	0x58024800
      break;
 810343c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810343e:	7dfb      	ldrb	r3, [r7, #23]
 8103440:	2b00      	cmp	r3, #0
 8103442:	d109      	bne.n	8103458 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103444:	4b96      	ldr	r3, [pc, #600]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103448:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810344c:	687b      	ldr	r3, [r7, #4]
 810344e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103450:	4993      	ldr	r1, [pc, #588]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103452:	4313      	orrs	r3, r2
 8103454:	654b      	str	r3, [r1, #84]	; 0x54
 8103456:	e001      	b.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103458:	7dfb      	ldrb	r3, [r7, #23]
 810345a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	f003 0302 	and.w	r3, r3, #2
 8103464:	2b00      	cmp	r3, #0
 8103466:	d038      	beq.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810346c:	2b05      	cmp	r3, #5
 810346e:	d821      	bhi.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8103470:	a201      	add	r2, pc, #4	; (adr r2, 8103478 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8103472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103476:	bf00      	nop
 8103478:	081034bb 	.word	0x081034bb
 810347c:	08103491 	.word	0x08103491
 8103480:	081034a3 	.word	0x081034a3
 8103484:	081034bb 	.word	0x081034bb
 8103488:	081034bb 	.word	0x081034bb
 810348c:	081034bb 	.word	0x081034bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	3304      	adds	r3, #4
 8103494:	2101      	movs	r1, #1
 8103496:	4618      	mov	r0, r3
 8103498:	f000 fdb4 	bl	8104004 <RCCEx_PLL2_Config>
 810349c:	4603      	mov	r3, r0
 810349e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81034a0:	e00c      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	3324      	adds	r3, #36	; 0x24
 81034a6:	2101      	movs	r1, #1
 81034a8:	4618      	mov	r0, r3
 81034aa:	f000 fe5d 	bl	8104168 <RCCEx_PLL3_Config>
 81034ae:	4603      	mov	r3, r0
 81034b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81034b2:	e003      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034b4:	2301      	movs	r3, #1
 81034b6:	75fb      	strb	r3, [r7, #23]
      break;
 81034b8:	e000      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81034ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034bc:	7dfb      	ldrb	r3, [r7, #23]
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d109      	bne.n	81034d6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81034c2:	4b77      	ldr	r3, [pc, #476]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034c6:	f023 0207 	bic.w	r2, r3, #7
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81034ce:	4974      	ldr	r1, [pc, #464]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81034d0:	4313      	orrs	r3, r2
 81034d2:	654b      	str	r3, [r1, #84]	; 0x54
 81034d4:	e001      	b.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034d6:	7dfb      	ldrb	r3, [r7, #23]
 81034d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	f003 0304 	and.w	r3, r3, #4
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d03a      	beq.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81034ec:	2b05      	cmp	r3, #5
 81034ee:	d821      	bhi.n	8103534 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81034f0:	a201      	add	r2, pc, #4	; (adr r2, 81034f8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034f6:	bf00      	nop
 81034f8:	0810353b 	.word	0x0810353b
 81034fc:	08103511 	.word	0x08103511
 8103500:	08103523 	.word	0x08103523
 8103504:	0810353b 	.word	0x0810353b
 8103508:	0810353b 	.word	0x0810353b
 810350c:	0810353b 	.word	0x0810353b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	3304      	adds	r3, #4
 8103514:	2101      	movs	r1, #1
 8103516:	4618      	mov	r0, r3
 8103518:	f000 fd74 	bl	8104004 <RCCEx_PLL2_Config>
 810351c:	4603      	mov	r3, r0
 810351e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103520:	e00c      	b.n	810353c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	3324      	adds	r3, #36	; 0x24
 8103526:	2101      	movs	r1, #1
 8103528:	4618      	mov	r0, r3
 810352a:	f000 fe1d 	bl	8104168 <RCCEx_PLL3_Config>
 810352e:	4603      	mov	r3, r0
 8103530:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103532:	e003      	b.n	810353c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103534:	2301      	movs	r3, #1
 8103536:	75fb      	strb	r3, [r7, #23]
      break;
 8103538:	e000      	b.n	810353c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810353a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810353c:	7dfb      	ldrb	r3, [r7, #23]
 810353e:	2b00      	cmp	r3, #0
 8103540:	d10a      	bne.n	8103558 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103542:	4b57      	ldr	r3, [pc, #348]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103546:	f023 0207 	bic.w	r2, r3, #7
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103550:	4953      	ldr	r1, [pc, #332]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103552:	4313      	orrs	r3, r2
 8103554:	658b      	str	r3, [r1, #88]	; 0x58
 8103556:	e001      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103558:	7dfb      	ldrb	r3, [r7, #23]
 810355a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	681b      	ldr	r3, [r3, #0]
 8103560:	f003 0320 	and.w	r3, r3, #32
 8103564:	2b00      	cmp	r3, #0
 8103566:	d04b      	beq.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810356e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103572:	d02e      	beq.n	81035d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103578:	d828      	bhi.n	81035cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810357a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810357e:	d02a      	beq.n	81035d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103584:	d822      	bhi.n	81035cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103586:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810358a:	d026      	beq.n	81035da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810358c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103590:	d81c      	bhi.n	81035cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103596:	d010      	beq.n	81035ba <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8103598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810359c:	d816      	bhi.n	81035cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810359e:	2b00      	cmp	r3, #0
 81035a0:	d01d      	beq.n	81035de <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81035a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81035a6:	d111      	bne.n	81035cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	3304      	adds	r3, #4
 81035ac:	2100      	movs	r1, #0
 81035ae:	4618      	mov	r0, r3
 81035b0:	f000 fd28 	bl	8104004 <RCCEx_PLL2_Config>
 81035b4:	4603      	mov	r3, r0
 81035b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81035b8:	e012      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	3324      	adds	r3, #36	; 0x24
 81035be:	2102      	movs	r1, #2
 81035c0:	4618      	mov	r0, r3
 81035c2:	f000 fdd1 	bl	8104168 <RCCEx_PLL3_Config>
 81035c6:	4603      	mov	r3, r0
 81035c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81035ca:	e009      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81035cc:	2301      	movs	r3, #1
 81035ce:	75fb      	strb	r3, [r7, #23]
      break;
 81035d0:	e006      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81035d2:	bf00      	nop
 81035d4:	e004      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81035d6:	bf00      	nop
 81035d8:	e002      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81035da:	bf00      	nop
 81035dc:	e000      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81035de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81035e0:	7dfb      	ldrb	r3, [r7, #23]
 81035e2:	2b00      	cmp	r3, #0
 81035e4:	d10a      	bne.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81035e6:	4b2e      	ldr	r3, [pc, #184]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81035f4:	492a      	ldr	r1, [pc, #168]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81035f6:	4313      	orrs	r3, r2
 81035f8:	654b      	str	r3, [r1, #84]	; 0x54
 81035fa:	e001      	b.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035fc:	7dfb      	ldrb	r3, [r7, #23]
 81035fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103608:	2b00      	cmp	r3, #0
 810360a:	d04d      	beq.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103612:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103616:	d02e      	beq.n	8103676 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103618:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810361c:	d828      	bhi.n	8103670 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810361e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103622:	d02a      	beq.n	810367a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103628:	d822      	bhi.n	8103670 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810362a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810362e:	d026      	beq.n	810367e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103634:	d81c      	bhi.n	8103670 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810363a:	d010      	beq.n	810365e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 810363c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103640:	d816      	bhi.n	8103670 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103642:	2b00      	cmp	r3, #0
 8103644:	d01d      	beq.n	8103682 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8103646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810364a:	d111      	bne.n	8103670 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	3304      	adds	r3, #4
 8103650:	2100      	movs	r1, #0
 8103652:	4618      	mov	r0, r3
 8103654:	f000 fcd6 	bl	8104004 <RCCEx_PLL2_Config>
 8103658:	4603      	mov	r3, r0
 810365a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810365c:	e012      	b.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	3324      	adds	r3, #36	; 0x24
 8103662:	2102      	movs	r1, #2
 8103664:	4618      	mov	r0, r3
 8103666:	f000 fd7f 	bl	8104168 <RCCEx_PLL3_Config>
 810366a:	4603      	mov	r3, r0
 810366c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810366e:	e009      	b.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103670:	2301      	movs	r3, #1
 8103672:	75fb      	strb	r3, [r7, #23]
      break;
 8103674:	e006      	b.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103676:	bf00      	nop
 8103678:	e004      	b.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810367a:	bf00      	nop
 810367c:	e002      	b.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810367e:	bf00      	nop
 8103680:	e000      	b.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103684:	7dfb      	ldrb	r3, [r7, #23]
 8103686:	2b00      	cmp	r3, #0
 8103688:	d10c      	bne.n	81036a4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810368a:	4b05      	ldr	r3, [pc, #20]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810368e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103698:	4901      	ldr	r1, [pc, #4]	; (81036a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810369a:	4313      	orrs	r3, r2
 810369c:	658b      	str	r3, [r1, #88]	; 0x58
 810369e:	e003      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81036a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036a4:	7dfb      	ldrb	r3, [r7, #23]
 81036a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81036b0:	2b00      	cmp	r3, #0
 81036b2:	d04b      	beq.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81036ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81036be:	d02e      	beq.n	810371e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81036c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81036c4:	d828      	bhi.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81036c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81036ca:	d02a      	beq.n	8103722 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81036cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81036d0:	d822      	bhi.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81036d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81036d6:	d026      	beq.n	8103726 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81036d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81036dc:	d81c      	bhi.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81036de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81036e2:	d010      	beq.n	8103706 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81036e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81036e8:	d816      	bhi.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81036ea:	2b00      	cmp	r3, #0
 81036ec:	d01d      	beq.n	810372a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81036f2:	d111      	bne.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	3304      	adds	r3, #4
 81036f8:	2100      	movs	r1, #0
 81036fa:	4618      	mov	r0, r3
 81036fc:	f000 fc82 	bl	8104004 <RCCEx_PLL2_Config>
 8103700:	4603      	mov	r3, r0
 8103702:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103704:	e012      	b.n	810372c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	3324      	adds	r3, #36	; 0x24
 810370a:	2102      	movs	r1, #2
 810370c:	4618      	mov	r0, r3
 810370e:	f000 fd2b 	bl	8104168 <RCCEx_PLL3_Config>
 8103712:	4603      	mov	r3, r0
 8103714:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103716:	e009      	b.n	810372c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103718:	2301      	movs	r3, #1
 810371a:	75fb      	strb	r3, [r7, #23]
      break;
 810371c:	e006      	b.n	810372c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810371e:	bf00      	nop
 8103720:	e004      	b.n	810372c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103722:	bf00      	nop
 8103724:	e002      	b.n	810372c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103726:	bf00      	nop
 8103728:	e000      	b.n	810372c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810372a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810372c:	7dfb      	ldrb	r3, [r7, #23]
 810372e:	2b00      	cmp	r3, #0
 8103730:	d10a      	bne.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103732:	4b9d      	ldr	r3, [pc, #628]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103740:	4999      	ldr	r1, [pc, #612]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103742:	4313      	orrs	r3, r2
 8103744:	658b      	str	r3, [r1, #88]	; 0x58
 8103746:	e001      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103748:	7dfb      	ldrb	r3, [r7, #23]
 810374a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	f003 0308 	and.w	r3, r3, #8
 8103754:	2b00      	cmp	r3, #0
 8103756:	d01a      	beq.n	810378e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103762:	d10a      	bne.n	810377a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	3324      	adds	r3, #36	; 0x24
 8103768:	2102      	movs	r1, #2
 810376a:	4618      	mov	r0, r3
 810376c:	f000 fcfc 	bl	8104168 <RCCEx_PLL3_Config>
 8103770:	4603      	mov	r3, r0
 8103772:	2b00      	cmp	r3, #0
 8103774:	d001      	beq.n	810377a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8103776:	2301      	movs	r3, #1
 8103778:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810377a:	4b8b      	ldr	r3, [pc, #556]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810377e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103788:	4987      	ldr	r1, [pc, #540]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810378a:	4313      	orrs	r3, r2
 810378c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	f003 0310 	and.w	r3, r3, #16
 8103796:	2b00      	cmp	r3, #0
 8103798:	d01a      	beq.n	81037d0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81037a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81037a4:	d10a      	bne.n	81037bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	3324      	adds	r3, #36	; 0x24
 81037aa:	2102      	movs	r1, #2
 81037ac:	4618      	mov	r0, r3
 81037ae:	f000 fcdb 	bl	8104168 <RCCEx_PLL3_Config>
 81037b2:	4603      	mov	r3, r0
 81037b4:	2b00      	cmp	r3, #0
 81037b6:	d001      	beq.n	81037bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81037b8:	2301      	movs	r3, #1
 81037ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81037bc:	4b7a      	ldr	r3, [pc, #488]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81037ca:	4977      	ldr	r1, [pc, #476]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81037cc:	4313      	orrs	r3, r2
 81037ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	681b      	ldr	r3, [r3, #0]
 81037d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81037d8:	2b00      	cmp	r3, #0
 81037da:	d034      	beq.n	8103846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81037e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81037e6:	d01d      	beq.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81037e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81037ec:	d817      	bhi.n	810381e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81037ee:	2b00      	cmp	r3, #0
 81037f0:	d003      	beq.n	81037fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81037f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81037f6:	d009      	beq.n	810380c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81037f8:	e011      	b.n	810381e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	3304      	adds	r3, #4
 81037fe:	2100      	movs	r1, #0
 8103800:	4618      	mov	r0, r3
 8103802:	f000 fbff 	bl	8104004 <RCCEx_PLL2_Config>
 8103806:	4603      	mov	r3, r0
 8103808:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810380a:	e00c      	b.n	8103826 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	3324      	adds	r3, #36	; 0x24
 8103810:	2102      	movs	r1, #2
 8103812:	4618      	mov	r0, r3
 8103814:	f000 fca8 	bl	8104168 <RCCEx_PLL3_Config>
 8103818:	4603      	mov	r3, r0
 810381a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810381c:	e003      	b.n	8103826 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810381e:	2301      	movs	r3, #1
 8103820:	75fb      	strb	r3, [r7, #23]
      break;
 8103822:	e000      	b.n	8103826 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8103824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103826:	7dfb      	ldrb	r3, [r7, #23]
 8103828:	2b00      	cmp	r3, #0
 810382a:	d10a      	bne.n	8103842 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810382c:	4b5e      	ldr	r3, [pc, #376]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810383a:	495b      	ldr	r1, [pc, #364]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810383c:	4313      	orrs	r3, r2
 810383e:	658b      	str	r3, [r1, #88]	; 0x58
 8103840:	e001      	b.n	8103846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103842:	7dfb      	ldrb	r3, [r7, #23]
 8103844:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810384e:	2b00      	cmp	r3, #0
 8103850:	d033      	beq.n	81038ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810385c:	d01c      	beq.n	8103898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810385e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103862:	d816      	bhi.n	8103892 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8103864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103868:	d003      	beq.n	8103872 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810386a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810386e:	d007      	beq.n	8103880 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8103870:	e00f      	b.n	8103892 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103872:	4b4d      	ldr	r3, [pc, #308]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103876:	4a4c      	ldr	r2, [pc, #304]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810387c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810387e:	e00c      	b.n	810389a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	3324      	adds	r3, #36	; 0x24
 8103884:	2101      	movs	r1, #1
 8103886:	4618      	mov	r0, r3
 8103888:	f000 fc6e 	bl	8104168 <RCCEx_PLL3_Config>
 810388c:	4603      	mov	r3, r0
 810388e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103890:	e003      	b.n	810389a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103892:	2301      	movs	r3, #1
 8103894:	75fb      	strb	r3, [r7, #23]
      break;
 8103896:	e000      	b.n	810389a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8103898:	bf00      	nop
    }

    if(ret == HAL_OK)
 810389a:	7dfb      	ldrb	r3, [r7, #23]
 810389c:	2b00      	cmp	r3, #0
 810389e:	d10a      	bne.n	81038b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81038a0:	4b41      	ldr	r3, [pc, #260]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81038ae:	493e      	ldr	r1, [pc, #248]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038b0:	4313      	orrs	r3, r2
 81038b2:	654b      	str	r3, [r1, #84]	; 0x54
 81038b4:	e001      	b.n	81038ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038b6:	7dfb      	ldrb	r3, [r7, #23]
 81038b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	681b      	ldr	r3, [r3, #0]
 81038be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81038c2:	2b00      	cmp	r3, #0
 81038c4:	d029      	beq.n	810391a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	d003      	beq.n	81038d6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81038ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81038d2:	d007      	beq.n	81038e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81038d4:	e00f      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038d6:	4b34      	ldr	r3, [pc, #208]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038da:	4a33      	ldr	r2, [pc, #204]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81038e2:	e00b      	b.n	81038fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	3304      	adds	r3, #4
 81038e8:	2102      	movs	r1, #2
 81038ea:	4618      	mov	r0, r3
 81038ec:	f000 fb8a 	bl	8104004 <RCCEx_PLL2_Config>
 81038f0:	4603      	mov	r3, r0
 81038f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81038f4:	e002      	b.n	81038fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81038f6:	2301      	movs	r3, #1
 81038f8:	75fb      	strb	r3, [r7, #23]
      break;
 81038fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038fc:	7dfb      	ldrb	r3, [r7, #23]
 81038fe:	2b00      	cmp	r3, #0
 8103900:	d109      	bne.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103902:	4b29      	ldr	r3, [pc, #164]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810390e:	4926      	ldr	r1, [pc, #152]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103910:	4313      	orrs	r3, r2
 8103912:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103914:	e001      	b.n	810391a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103916:	7dfb      	ldrb	r3, [r7, #23]
 8103918:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103922:	2b00      	cmp	r3, #0
 8103924:	d00a      	beq.n	810393c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	3324      	adds	r3, #36	; 0x24
 810392a:	2102      	movs	r1, #2
 810392c:	4618      	mov	r0, r3
 810392e:	f000 fc1b 	bl	8104168 <RCCEx_PLL3_Config>
 8103932:	4603      	mov	r3, r0
 8103934:	2b00      	cmp	r3, #0
 8103936:	d001      	beq.n	810393c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8103938:	2301      	movs	r3, #1
 810393a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	681b      	ldr	r3, [r3, #0]
 8103940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103944:	2b00      	cmp	r3, #0
 8103946:	d033      	beq.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810394c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103950:	d017      	beq.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103956:	d811      	bhi.n	810397c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810395c:	d013      	beq.n	8103986 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810395e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103962:	d80b      	bhi.n	810397c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103964:	2b00      	cmp	r3, #0
 8103966:	d010      	beq.n	810398a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8103968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810396c:	d106      	bne.n	810397c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810396e:	4b0e      	ldr	r3, [pc, #56]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103972:	4a0d      	ldr	r2, [pc, #52]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810397a:	e007      	b.n	810398c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810397c:	2301      	movs	r3, #1
 810397e:	75fb      	strb	r3, [r7, #23]
      break;
 8103980:	e004      	b.n	810398c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103982:	bf00      	nop
 8103984:	e002      	b.n	810398c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103986:	bf00      	nop
 8103988:	e000      	b.n	810398c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810398a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810398c:	7dfb      	ldrb	r3, [r7, #23]
 810398e:	2b00      	cmp	r3, #0
 8103990:	d10c      	bne.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103992:	4b05      	ldr	r3, [pc, #20]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810399e:	4902      	ldr	r1, [pc, #8]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039a0:	4313      	orrs	r3, r2
 81039a2:	654b      	str	r3, [r1, #84]	; 0x54
 81039a4:	e004      	b.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81039a6:	bf00      	nop
 81039a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039ac:	7dfb      	ldrb	r3, [r7, #23]
 81039ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81039b8:	2b00      	cmp	r3, #0
 81039ba:	d008      	beq.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81039bc:	4b31      	ldr	r3, [pc, #196]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81039c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81039c8:	492e      	ldr	r1, [pc, #184]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81039ca:	4313      	orrs	r3, r2
 81039cc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	681b      	ldr	r3, [r3, #0]
 81039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d009      	beq.n	81039ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81039da:	4b2a      	ldr	r3, [pc, #168]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81039dc:	691b      	ldr	r3, [r3, #16]
 81039de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81039e8:	4926      	ldr	r1, [pc, #152]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81039ea:	4313      	orrs	r3, r2
 81039ec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81039f6:	2b00      	cmp	r3, #0
 81039f8:	d008      	beq.n	8103a0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81039fa:	4b22      	ldr	r3, [pc, #136]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81039fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103a06:	491f      	ldr	r1, [pc, #124]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a08:	4313      	orrs	r3, r2
 8103a0a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d00d      	beq.n	8103a34 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103a18:	4b1a      	ldr	r3, [pc, #104]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a1a:	691b      	ldr	r3, [r3, #16]
 8103a1c:	4a19      	ldr	r2, [pc, #100]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103a22:	6113      	str	r3, [r2, #16]
 8103a24:	4b17      	ldr	r3, [pc, #92]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a26:	691a      	ldr	r2, [r3, #16]
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103a2e:	4915      	ldr	r1, [pc, #84]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a30:	4313      	orrs	r3, r2
 8103a32:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	2b00      	cmp	r3, #0
 8103a3a:	da08      	bge.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103a3c:	4b11      	ldr	r3, [pc, #68]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a48:	490e      	ldr	r1, [pc, #56]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a4a:	4313      	orrs	r3, r2
 8103a4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d009      	beq.n	8103a6e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103a5a:	4b0a      	ldr	r3, [pc, #40]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103a68:	4906      	ldr	r1, [pc, #24]	; (8103a84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103a6a:	4313      	orrs	r3, r2
 8103a6c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103a6e:	7dbb      	ldrb	r3, [r7, #22]
 8103a70:	2b00      	cmp	r3, #0
 8103a72:	d101      	bne.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8103a74:	2300      	movs	r3, #0
 8103a76:	e000      	b.n	8103a7a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8103a78:	2301      	movs	r3, #1
}
 8103a7a:	4618      	mov	r0, r3
 8103a7c:	3718      	adds	r7, #24
 8103a7e:	46bd      	mov	sp, r7
 8103a80:	bd80      	pop	{r7, pc}
 8103a82:	bf00      	nop
 8103a84:	58024400 	.word	0x58024400

08103a88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103a88:	b580      	push	{r7, lr}
 8103a8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103a8c:	f7ff f858 	bl	8102b40 <HAL_RCC_GetHCLKFreq>
 8103a90:	4602      	mov	r2, r0
 8103a92:	4b06      	ldr	r3, [pc, #24]	; (8103aac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103a94:	6a1b      	ldr	r3, [r3, #32]
 8103a96:	091b      	lsrs	r3, r3, #4
 8103a98:	f003 0307 	and.w	r3, r3, #7
 8103a9c:	4904      	ldr	r1, [pc, #16]	; (8103ab0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103a9e:	5ccb      	ldrb	r3, [r1, r3]
 8103aa0:	f003 031f 	and.w	r3, r3, #31
 8103aa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103aa8:	4618      	mov	r0, r3
 8103aaa:	bd80      	pop	{r7, pc}
 8103aac:	58024400 	.word	0x58024400
 8103ab0:	08106700 	.word	0x08106700

08103ab4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103ab4:	b480      	push	{r7}
 8103ab6:	b089      	sub	sp, #36	; 0x24
 8103ab8:	af00      	add	r7, sp, #0
 8103aba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103abc:	4ba1      	ldr	r3, [pc, #644]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ac0:	f003 0303 	and.w	r3, r3, #3
 8103ac4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103ac6:	4b9f      	ldr	r3, [pc, #636]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103aca:	0b1b      	lsrs	r3, r3, #12
 8103acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103ad0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103ad2:	4b9c      	ldr	r3, [pc, #624]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ad6:	091b      	lsrs	r3, r3, #4
 8103ad8:	f003 0301 	and.w	r3, r3, #1
 8103adc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103ade:	4b99      	ldr	r3, [pc, #612]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103ae2:	08db      	lsrs	r3, r3, #3
 8103ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103ae8:	693a      	ldr	r2, [r7, #16]
 8103aea:	fb02 f303 	mul.w	r3, r2, r3
 8103aee:	ee07 3a90 	vmov	s15, r3
 8103af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103af6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103afa:	697b      	ldr	r3, [r7, #20]
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	f000 8111 	beq.w	8103d24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103b02:	69bb      	ldr	r3, [r7, #24]
 8103b04:	2b02      	cmp	r3, #2
 8103b06:	f000 8083 	beq.w	8103c10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103b0a:	69bb      	ldr	r3, [r7, #24]
 8103b0c:	2b02      	cmp	r3, #2
 8103b0e:	f200 80a1 	bhi.w	8103c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103b12:	69bb      	ldr	r3, [r7, #24]
 8103b14:	2b00      	cmp	r3, #0
 8103b16:	d003      	beq.n	8103b20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103b18:	69bb      	ldr	r3, [r7, #24]
 8103b1a:	2b01      	cmp	r3, #1
 8103b1c:	d056      	beq.n	8103bcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103b1e:	e099      	b.n	8103c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103b20:	4b88      	ldr	r3, [pc, #544]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b22:	681b      	ldr	r3, [r3, #0]
 8103b24:	f003 0320 	and.w	r3, r3, #32
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d02d      	beq.n	8103b88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103b2c:	4b85      	ldr	r3, [pc, #532]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	08db      	lsrs	r3, r3, #3
 8103b32:	f003 0303 	and.w	r3, r3, #3
 8103b36:	4a84      	ldr	r2, [pc, #528]	; (8103d48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103b38:	fa22 f303 	lsr.w	r3, r2, r3
 8103b3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103b3e:	68bb      	ldr	r3, [r7, #8]
 8103b40:	ee07 3a90 	vmov	s15, r3
 8103b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b48:	697b      	ldr	r3, [r7, #20]
 8103b4a:	ee07 3a90 	vmov	s15, r3
 8103b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b56:	4b7b      	ldr	r3, [pc, #492]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b5e:	ee07 3a90 	vmov	s15, r3
 8103b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8103b6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103b86:	e087      	b.n	8103c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103b88:	697b      	ldr	r3, [r7, #20]
 8103b8a:	ee07 3a90 	vmov	s15, r3
 8103b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103d50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b9a:	4b6a      	ldr	r3, [pc, #424]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ba2:	ee07 3a90 	vmov	s15, r3
 8103ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8103bae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103bca:	e065      	b.n	8103c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103bcc:	697b      	ldr	r3, [r7, #20]
 8103bce:	ee07 3a90 	vmov	s15, r3
 8103bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bde:	4b59      	ldr	r3, [pc, #356]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103be6:	ee07 3a90 	vmov	s15, r3
 8103bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8103bf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103c0e:	e043      	b.n	8103c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c10:	697b      	ldr	r3, [r7, #20]
 8103c12:	ee07 3a90 	vmov	s15, r3
 8103c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c22:	4b48      	ldr	r3, [pc, #288]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c2a:	ee07 3a90 	vmov	s15, r3
 8103c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103c52:	e021      	b.n	8103c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c54:	697b      	ldr	r3, [r7, #20]
 8103c56:	ee07 3a90 	vmov	s15, r3
 8103c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c66:	4b37      	ldr	r3, [pc, #220]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c6e:	ee07 3a90 	vmov	s15, r3
 8103c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103c96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103c98:	4b2a      	ldr	r3, [pc, #168]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c9c:	0a5b      	lsrs	r3, r3, #9
 8103c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103ca2:	ee07 3a90 	vmov	s15, r3
 8103ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8103cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103cbe:	ee17 2a90 	vmov	r2, s15
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103cc6:	4b1f      	ldr	r3, [pc, #124]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103cca:	0c1b      	lsrs	r3, r3, #16
 8103ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103cd0:	ee07 3a90 	vmov	s15, r3
 8103cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8103ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103cec:	ee17 2a90 	vmov	r2, s15
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8103cf4:	4b13      	ldr	r3, [pc, #76]	; (8103d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103cf8:	0e1b      	lsrs	r3, r3, #24
 8103cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103cfe:	ee07 3a90 	vmov	s15, r3
 8103d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d1a:	ee17 2a90 	vmov	r2, s15
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103d22:	e008      	b.n	8103d36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	2200      	movs	r2, #0
 8103d28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	2200      	movs	r2, #0
 8103d2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	2200      	movs	r2, #0
 8103d34:	609a      	str	r2, [r3, #8]
}
 8103d36:	bf00      	nop
 8103d38:	3724      	adds	r7, #36	; 0x24
 8103d3a:	46bd      	mov	sp, r7
 8103d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d40:	4770      	bx	lr
 8103d42:	bf00      	nop
 8103d44:	58024400 	.word	0x58024400
 8103d48:	03d09000 	.word	0x03d09000
 8103d4c:	46000000 	.word	0x46000000
 8103d50:	4c742400 	.word	0x4c742400
 8103d54:	4a742400 	.word	0x4a742400
 8103d58:	4bbebc20 	.word	0x4bbebc20

08103d5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8103d5c:	b480      	push	{r7}
 8103d5e:	b089      	sub	sp, #36	; 0x24
 8103d60:	af00      	add	r7, sp, #0
 8103d62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103d64:	4ba1      	ldr	r3, [pc, #644]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d68:	f003 0303 	and.w	r3, r3, #3
 8103d6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8103d6e:	4b9f      	ldr	r3, [pc, #636]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d72:	0d1b      	lsrs	r3, r3, #20
 8103d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103d78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103d7a:	4b9c      	ldr	r3, [pc, #624]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d7e:	0a1b      	lsrs	r3, r3, #8
 8103d80:	f003 0301 	and.w	r3, r3, #1
 8103d84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8103d86:	4b99      	ldr	r3, [pc, #612]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d8a:	08db      	lsrs	r3, r3, #3
 8103d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103d90:	693a      	ldr	r2, [r7, #16]
 8103d92:	fb02 f303 	mul.w	r3, r2, r3
 8103d96:	ee07 3a90 	vmov	s15, r3
 8103d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103da2:	697b      	ldr	r3, [r7, #20]
 8103da4:	2b00      	cmp	r3, #0
 8103da6:	f000 8111 	beq.w	8103fcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103daa:	69bb      	ldr	r3, [r7, #24]
 8103dac:	2b02      	cmp	r3, #2
 8103dae:	f000 8083 	beq.w	8103eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103db2:	69bb      	ldr	r3, [r7, #24]
 8103db4:	2b02      	cmp	r3, #2
 8103db6:	f200 80a1 	bhi.w	8103efc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103dba:	69bb      	ldr	r3, [r7, #24]
 8103dbc:	2b00      	cmp	r3, #0
 8103dbe:	d003      	beq.n	8103dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103dc0:	69bb      	ldr	r3, [r7, #24]
 8103dc2:	2b01      	cmp	r3, #1
 8103dc4:	d056      	beq.n	8103e74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103dc6:	e099      	b.n	8103efc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103dc8:	4b88      	ldr	r3, [pc, #544]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	f003 0320 	and.w	r3, r3, #32
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d02d      	beq.n	8103e30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103dd4:	4b85      	ldr	r3, [pc, #532]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	08db      	lsrs	r3, r3, #3
 8103dda:	f003 0303 	and.w	r3, r3, #3
 8103dde:	4a84      	ldr	r2, [pc, #528]	; (8103ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103de0:	fa22 f303 	lsr.w	r3, r2, r3
 8103de4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103de6:	68bb      	ldr	r3, [r7, #8]
 8103de8:	ee07 3a90 	vmov	s15, r3
 8103dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103df0:	697b      	ldr	r3, [r7, #20]
 8103df2:	ee07 3a90 	vmov	s15, r3
 8103df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103dfe:	4b7b      	ldr	r3, [pc, #492]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e06:	ee07 3a90 	vmov	s15, r3
 8103e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103e2e:	e087      	b.n	8103f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103e30:	697b      	ldr	r3, [r7, #20]
 8103e32:	ee07 3a90 	vmov	s15, r3
 8103e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e42:	4b6a      	ldr	r3, [pc, #424]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e4a:	ee07 3a90 	vmov	s15, r3
 8103e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103e72:	e065      	b.n	8103f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103e74:	697b      	ldr	r3, [r7, #20]
 8103e76:	ee07 3a90 	vmov	s15, r3
 8103e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103ffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e86:	4b59      	ldr	r3, [pc, #356]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e8e:	ee07 3a90 	vmov	s15, r3
 8103e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103eb6:	e043      	b.n	8103f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103eb8:	697b      	ldr	r3, [r7, #20]
 8103eba:	ee07 3a90 	vmov	s15, r3
 8103ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ec2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103eca:	4b48      	ldr	r3, [pc, #288]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ed2:	ee07 3a90 	vmov	s15, r3
 8103ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ede:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103efa:	e021      	b.n	8103f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103efc:	697b      	ldr	r3, [r7, #20]
 8103efe:	ee07 3a90 	vmov	s15, r3
 8103f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103ffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f0e:	4b37      	ldr	r3, [pc, #220]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f16:	ee07 3a90 	vmov	s15, r3
 8103f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103f40:	4b2a      	ldr	r3, [pc, #168]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f44:	0a5b      	lsrs	r3, r3, #9
 8103f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103f4a:	ee07 3a90 	vmov	s15, r3
 8103f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f66:	ee17 2a90 	vmov	r2, s15
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8103f6e:	4b1f      	ldr	r3, [pc, #124]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f72:	0c1b      	lsrs	r3, r3, #16
 8103f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103f78:	ee07 3a90 	vmov	s15, r3
 8103f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f94:	ee17 2a90 	vmov	r2, s15
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8103f9c:	4b13      	ldr	r3, [pc, #76]	; (8103fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fa0:	0e1b      	lsrs	r3, r3, #24
 8103fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103fa6:	ee07 3a90 	vmov	s15, r3
 8103faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8103fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103fc2:	ee17 2a90 	vmov	r2, s15
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103fca:	e008      	b.n	8103fde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	2200      	movs	r2, #0
 8103fd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	2200      	movs	r2, #0
 8103fd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	2200      	movs	r2, #0
 8103fdc:	609a      	str	r2, [r3, #8]
}
 8103fde:	bf00      	nop
 8103fe0:	3724      	adds	r7, #36	; 0x24
 8103fe2:	46bd      	mov	sp, r7
 8103fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fe8:	4770      	bx	lr
 8103fea:	bf00      	nop
 8103fec:	58024400 	.word	0x58024400
 8103ff0:	03d09000 	.word	0x03d09000
 8103ff4:	46000000 	.word	0x46000000
 8103ff8:	4c742400 	.word	0x4c742400
 8103ffc:	4a742400 	.word	0x4a742400
 8104000:	4bbebc20 	.word	0x4bbebc20

08104004 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104004:	b580      	push	{r7, lr}
 8104006:	b084      	sub	sp, #16
 8104008:	af00      	add	r7, sp, #0
 810400a:	6078      	str	r0, [r7, #4]
 810400c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810400e:	2300      	movs	r3, #0
 8104010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104012:	4b54      	ldr	r3, [pc, #336]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104016:	f003 0303 	and.w	r3, r3, #3
 810401a:	2b03      	cmp	r3, #3
 810401c:	d101      	bne.n	8104022 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810401e:	2301      	movs	r3, #1
 8104020:	e09b      	b.n	810415a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104022:	4b50      	ldr	r3, [pc, #320]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	4a4f      	ldr	r2, [pc, #316]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104028:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810402c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810402e:	f7fd fb2f 	bl	8101690 <HAL_GetTick>
 8104032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104034:	e008      	b.n	8104048 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104036:	f7fd fb2b 	bl	8101690 <HAL_GetTick>
 810403a:	4602      	mov	r2, r0
 810403c:	68bb      	ldr	r3, [r7, #8]
 810403e:	1ad3      	subs	r3, r2, r3
 8104040:	2b02      	cmp	r3, #2
 8104042:	d901      	bls.n	8104048 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104044:	2303      	movs	r3, #3
 8104046:	e088      	b.n	810415a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104048:	4b46      	ldr	r3, [pc, #280]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104050:	2b00      	cmp	r3, #0
 8104052:	d1f0      	bne.n	8104036 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104054:	4b43      	ldr	r3, [pc, #268]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104058:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	031b      	lsls	r3, r3, #12
 8104062:	4940      	ldr	r1, [pc, #256]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104064:	4313      	orrs	r3, r2
 8104066:	628b      	str	r3, [r1, #40]	; 0x28
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	685b      	ldr	r3, [r3, #4]
 810406c:	3b01      	subs	r3, #1
 810406e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	689b      	ldr	r3, [r3, #8]
 8104076:	3b01      	subs	r3, #1
 8104078:	025b      	lsls	r3, r3, #9
 810407a:	b29b      	uxth	r3, r3
 810407c:	431a      	orrs	r2, r3
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	68db      	ldr	r3, [r3, #12]
 8104082:	3b01      	subs	r3, #1
 8104084:	041b      	lsls	r3, r3, #16
 8104086:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810408a:	431a      	orrs	r2, r3
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	691b      	ldr	r3, [r3, #16]
 8104090:	3b01      	subs	r3, #1
 8104092:	061b      	lsls	r3, r3, #24
 8104094:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104098:	4932      	ldr	r1, [pc, #200]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 810409a:	4313      	orrs	r3, r2
 810409c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810409e:	4b31      	ldr	r3, [pc, #196]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	695b      	ldr	r3, [r3, #20]
 81040aa:	492e      	ldr	r1, [pc, #184]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040ac:	4313      	orrs	r3, r2
 81040ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81040b0:	4b2c      	ldr	r3, [pc, #176]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040b4:	f023 0220 	bic.w	r2, r3, #32
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	699b      	ldr	r3, [r3, #24]
 81040bc:	4929      	ldr	r1, [pc, #164]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040be:	4313      	orrs	r3, r2
 81040c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81040c2:	4b28      	ldr	r3, [pc, #160]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040c6:	4a27      	ldr	r2, [pc, #156]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040c8:	f023 0310 	bic.w	r3, r3, #16
 81040cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81040ce:	4b25      	ldr	r3, [pc, #148]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81040d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81040da:	687a      	ldr	r2, [r7, #4]
 81040dc:	69d2      	ldr	r2, [r2, #28]
 81040de:	00d2      	lsls	r2, r2, #3
 81040e0:	4920      	ldr	r1, [pc, #128]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040e2:	4313      	orrs	r3, r2
 81040e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81040e6:	4b1f      	ldr	r3, [pc, #124]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040ea:	4a1e      	ldr	r2, [pc, #120]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040ec:	f043 0310 	orr.w	r3, r3, #16
 81040f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81040f2:	683b      	ldr	r3, [r7, #0]
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d106      	bne.n	8104106 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81040f8:	4b1a      	ldr	r3, [pc, #104]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040fc:	4a19      	ldr	r2, [pc, #100]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 81040fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104104:	e00f      	b.n	8104126 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104106:	683b      	ldr	r3, [r7, #0]
 8104108:	2b01      	cmp	r3, #1
 810410a:	d106      	bne.n	810411a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810410c:	4b15      	ldr	r3, [pc, #84]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 810410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104110:	4a14      	ldr	r2, [pc, #80]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104116:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104118:	e005      	b.n	8104126 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810411a:	4b12      	ldr	r3, [pc, #72]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 810411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810411e:	4a11      	ldr	r2, [pc, #68]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104124:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104126:	4b0f      	ldr	r3, [pc, #60]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	4a0e      	ldr	r2, [pc, #56]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 810412c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104132:	f7fd faad 	bl	8101690 <HAL_GetTick>
 8104136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104138:	e008      	b.n	810414c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810413a:	f7fd faa9 	bl	8101690 <HAL_GetTick>
 810413e:	4602      	mov	r2, r0
 8104140:	68bb      	ldr	r3, [r7, #8]
 8104142:	1ad3      	subs	r3, r2, r3
 8104144:	2b02      	cmp	r3, #2
 8104146:	d901      	bls.n	810414c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104148:	2303      	movs	r3, #3
 810414a:	e006      	b.n	810415a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810414c:	4b05      	ldr	r3, [pc, #20]	; (8104164 <RCCEx_PLL2_Config+0x160>)
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104154:	2b00      	cmp	r3, #0
 8104156:	d0f0      	beq.n	810413a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104158:	7bfb      	ldrb	r3, [r7, #15]
}
 810415a:	4618      	mov	r0, r3
 810415c:	3710      	adds	r7, #16
 810415e:	46bd      	mov	sp, r7
 8104160:	bd80      	pop	{r7, pc}
 8104162:	bf00      	nop
 8104164:	58024400 	.word	0x58024400

08104168 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104168:	b580      	push	{r7, lr}
 810416a:	b084      	sub	sp, #16
 810416c:	af00      	add	r7, sp, #0
 810416e:	6078      	str	r0, [r7, #4]
 8104170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104172:	2300      	movs	r3, #0
 8104174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104176:	4b54      	ldr	r3, [pc, #336]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810417a:	f003 0303 	and.w	r3, r3, #3
 810417e:	2b03      	cmp	r3, #3
 8104180:	d101      	bne.n	8104186 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104182:	2301      	movs	r3, #1
 8104184:	e09b      	b.n	81042be <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104186:	4b50      	ldr	r3, [pc, #320]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a4f      	ldr	r2, [pc, #316]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 810418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104192:	f7fd fa7d 	bl	8101690 <HAL_GetTick>
 8104196:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104198:	e008      	b.n	81041ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810419a:	f7fd fa79 	bl	8101690 <HAL_GetTick>
 810419e:	4602      	mov	r2, r0
 81041a0:	68bb      	ldr	r3, [r7, #8]
 81041a2:	1ad3      	subs	r3, r2, r3
 81041a4:	2b02      	cmp	r3, #2
 81041a6:	d901      	bls.n	81041ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81041a8:	2303      	movs	r3, #3
 81041aa:	e088      	b.n	81042be <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81041ac:	4b46      	ldr	r3, [pc, #280]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81041b4:	2b00      	cmp	r3, #0
 81041b6:	d1f0      	bne.n	810419a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81041b8:	4b43      	ldr	r3, [pc, #268]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 81041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	051b      	lsls	r3, r3, #20
 81041c6:	4940      	ldr	r1, [pc, #256]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 81041c8:	4313      	orrs	r3, r2
 81041ca:	628b      	str	r3, [r1, #40]	; 0x28
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	685b      	ldr	r3, [r3, #4]
 81041d0:	3b01      	subs	r3, #1
 81041d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	689b      	ldr	r3, [r3, #8]
 81041da:	3b01      	subs	r3, #1
 81041dc:	025b      	lsls	r3, r3, #9
 81041de:	b29b      	uxth	r3, r3
 81041e0:	431a      	orrs	r2, r3
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	68db      	ldr	r3, [r3, #12]
 81041e6:	3b01      	subs	r3, #1
 81041e8:	041b      	lsls	r3, r3, #16
 81041ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81041ee:	431a      	orrs	r2, r3
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	691b      	ldr	r3, [r3, #16]
 81041f4:	3b01      	subs	r3, #1
 81041f6:	061b      	lsls	r3, r3, #24
 81041f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81041fc:	4932      	ldr	r1, [pc, #200]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 81041fe:	4313      	orrs	r3, r2
 8104200:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104202:	4b31      	ldr	r3, [pc, #196]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810420a:	687b      	ldr	r3, [r7, #4]
 810420c:	695b      	ldr	r3, [r3, #20]
 810420e:	492e      	ldr	r1, [pc, #184]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104210:	4313      	orrs	r3, r2
 8104212:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104214:	4b2c      	ldr	r3, [pc, #176]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104218:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	699b      	ldr	r3, [r3, #24]
 8104220:	4929      	ldr	r1, [pc, #164]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104222:	4313      	orrs	r3, r2
 8104224:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104226:	4b28      	ldr	r3, [pc, #160]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810422a:	4a27      	ldr	r2, [pc, #156]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 810422c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104232:	4b25      	ldr	r3, [pc, #148]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810423a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810423e:	687a      	ldr	r2, [r7, #4]
 8104240:	69d2      	ldr	r2, [r2, #28]
 8104242:	00d2      	lsls	r2, r2, #3
 8104244:	4920      	ldr	r1, [pc, #128]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104246:	4313      	orrs	r3, r2
 8104248:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810424a:	4b1f      	ldr	r3, [pc, #124]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 810424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810424e:	4a1e      	ldr	r2, [pc, #120]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104256:	683b      	ldr	r3, [r7, #0]
 8104258:	2b00      	cmp	r3, #0
 810425a:	d106      	bne.n	810426a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810425c:	4b1a      	ldr	r3, [pc, #104]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 810425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104260:	4a19      	ldr	r2, [pc, #100]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104262:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104268:	e00f      	b.n	810428a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810426a:	683b      	ldr	r3, [r7, #0]
 810426c:	2b01      	cmp	r3, #1
 810426e:	d106      	bne.n	810427e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104270:	4b15      	ldr	r3, [pc, #84]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104274:	4a14      	ldr	r2, [pc, #80]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104276:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810427a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810427c:	e005      	b.n	810428a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810427e:	4b12      	ldr	r3, [pc, #72]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104282:	4a11      	ldr	r2, [pc, #68]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104288:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810428a:	4b0f      	ldr	r3, [pc, #60]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 810428c:	681b      	ldr	r3, [r3, #0]
 810428e:	4a0e      	ldr	r2, [pc, #56]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 8104290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104296:	f7fd f9fb 	bl	8101690 <HAL_GetTick>
 810429a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810429c:	e008      	b.n	81042b0 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810429e:	f7fd f9f7 	bl	8101690 <HAL_GetTick>
 81042a2:	4602      	mov	r2, r0
 81042a4:	68bb      	ldr	r3, [r7, #8]
 81042a6:	1ad3      	subs	r3, r2, r3
 81042a8:	2b02      	cmp	r3, #2
 81042aa:	d901      	bls.n	81042b0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81042ac:	2303      	movs	r3, #3
 81042ae:	e006      	b.n	81042be <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81042b0:	4b05      	ldr	r3, [pc, #20]	; (81042c8 <RCCEx_PLL3_Config+0x160>)
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81042b8:	2b00      	cmp	r3, #0
 81042ba:	d0f0      	beq.n	810429e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 81042be:	4618      	mov	r0, r3
 81042c0:	3710      	adds	r7, #16
 81042c2:	46bd      	mov	sp, r7
 81042c4:	bd80      	pop	{r7, pc}
 81042c6:	bf00      	nop
 81042c8:	58024400 	.word	0x58024400

081042cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 81042cc:	b580      	push	{r7, lr}
 81042ce:	b082      	sub	sp, #8
 81042d0:	af00      	add	r7, sp, #0
 81042d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d101      	bne.n	81042de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 81042da:	2301      	movs	r3, #1
 81042dc:	e049      	b.n	8104372 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81042e4:	b2db      	uxtb	r3, r3
 81042e6:	2b00      	cmp	r3, #0
 81042e8:	d106      	bne.n	81042f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	2200      	movs	r2, #0
 81042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 81042f2:	6878      	ldr	r0, [r7, #4]
 81042f4:	f7fc ffd6 	bl	81012a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	2202      	movs	r2, #2
 81042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681a      	ldr	r2, [r3, #0]
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	3304      	adds	r3, #4
 8104308:	4619      	mov	r1, r3
 810430a:	4610      	mov	r0, r2
 810430c:	f000 fa5c 	bl	81047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	2201      	movs	r2, #1
 8104314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	2201      	movs	r2, #1
 810431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	2201      	movs	r2, #1
 8104324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	2201      	movs	r2, #1
 810432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	2201      	movs	r2, #1
 8104334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	2201      	movs	r2, #1
 810433c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	2201      	movs	r2, #1
 8104344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	2201      	movs	r2, #1
 810434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	2201      	movs	r2, #1
 8104354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	2201      	movs	r2, #1
 810435c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	2201      	movs	r2, #1
 8104364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	2201      	movs	r2, #1
 810436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8104370:	2300      	movs	r3, #0
}
 8104372:	4618      	mov	r0, r3
 8104374:	3708      	adds	r7, #8
 8104376:	46bd      	mov	sp, r7
 8104378:	bd80      	pop	{r7, pc}

0810437a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810437a:	b580      	push	{r7, lr}
 810437c:	b082      	sub	sp, #8
 810437e:	af00      	add	r7, sp, #0
 8104380:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	691b      	ldr	r3, [r3, #16]
 8104388:	f003 0302 	and.w	r3, r3, #2
 810438c:	2b02      	cmp	r3, #2
 810438e:	d122      	bne.n	81043d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	68db      	ldr	r3, [r3, #12]
 8104396:	f003 0302 	and.w	r3, r3, #2
 810439a:	2b02      	cmp	r3, #2
 810439c:	d11b      	bne.n	81043d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	f06f 0202 	mvn.w	r2, #2
 81043a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	2201      	movs	r2, #1
 81043ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	699b      	ldr	r3, [r3, #24]
 81043b4:	f003 0303 	and.w	r3, r3, #3
 81043b8:	2b00      	cmp	r3, #0
 81043ba:	d003      	beq.n	81043c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81043bc:	6878      	ldr	r0, [r7, #4]
 81043be:	f7fc fd8f 	bl	8100ee0 <HAL_TIM_IC_CaptureCallback>
 81043c2:	e005      	b.n	81043d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81043c4:	6878      	ldr	r0, [r7, #4]
 81043c6:	f000 f9e1 	bl	810478c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81043ca:	6878      	ldr	r0, [r7, #4]
 81043cc:	f000 f9e8 	bl	81047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	2200      	movs	r2, #0
 81043d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	691b      	ldr	r3, [r3, #16]
 81043dc:	f003 0304 	and.w	r3, r3, #4
 81043e0:	2b04      	cmp	r3, #4
 81043e2:	d122      	bne.n	810442a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	68db      	ldr	r3, [r3, #12]
 81043ea:	f003 0304 	and.w	r3, r3, #4
 81043ee:	2b04      	cmp	r3, #4
 81043f0:	d11b      	bne.n	810442a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	f06f 0204 	mvn.w	r2, #4
 81043fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	2202      	movs	r2, #2
 8104400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	699b      	ldr	r3, [r3, #24]
 8104408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810440c:	2b00      	cmp	r3, #0
 810440e:	d003      	beq.n	8104418 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104410:	6878      	ldr	r0, [r7, #4]
 8104412:	f7fc fd65 	bl	8100ee0 <HAL_TIM_IC_CaptureCallback>
 8104416:	e005      	b.n	8104424 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104418:	6878      	ldr	r0, [r7, #4]
 810441a:	f000 f9b7 	bl	810478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810441e:	6878      	ldr	r0, [r7, #4]
 8104420:	f000 f9be 	bl	81047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	2200      	movs	r2, #0
 8104428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	691b      	ldr	r3, [r3, #16]
 8104430:	f003 0308 	and.w	r3, r3, #8
 8104434:	2b08      	cmp	r3, #8
 8104436:	d122      	bne.n	810447e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	681b      	ldr	r3, [r3, #0]
 810443c:	68db      	ldr	r3, [r3, #12]
 810443e:	f003 0308 	and.w	r3, r3, #8
 8104442:	2b08      	cmp	r3, #8
 8104444:	d11b      	bne.n	810447e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	f06f 0208 	mvn.w	r2, #8
 810444e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	2204      	movs	r2, #4
 8104454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	69db      	ldr	r3, [r3, #28]
 810445c:	f003 0303 	and.w	r3, r3, #3
 8104460:	2b00      	cmp	r3, #0
 8104462:	d003      	beq.n	810446c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104464:	6878      	ldr	r0, [r7, #4]
 8104466:	f7fc fd3b 	bl	8100ee0 <HAL_TIM_IC_CaptureCallback>
 810446a:	e005      	b.n	8104478 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810446c:	6878      	ldr	r0, [r7, #4]
 810446e:	f000 f98d 	bl	810478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104472:	6878      	ldr	r0, [r7, #4]
 8104474:	f000 f994 	bl	81047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104478:	687b      	ldr	r3, [r7, #4]
 810447a:	2200      	movs	r2, #0
 810447c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	691b      	ldr	r3, [r3, #16]
 8104484:	f003 0310 	and.w	r3, r3, #16
 8104488:	2b10      	cmp	r3, #16
 810448a:	d122      	bne.n	81044d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	68db      	ldr	r3, [r3, #12]
 8104492:	f003 0310 	and.w	r3, r3, #16
 8104496:	2b10      	cmp	r3, #16
 8104498:	d11b      	bne.n	81044d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810449a:	687b      	ldr	r3, [r7, #4]
 810449c:	681b      	ldr	r3, [r3, #0]
 810449e:	f06f 0210 	mvn.w	r2, #16
 81044a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	2208      	movs	r2, #8
 81044a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	681b      	ldr	r3, [r3, #0]
 81044ae:	69db      	ldr	r3, [r3, #28]
 81044b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81044b4:	2b00      	cmp	r3, #0
 81044b6:	d003      	beq.n	81044c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81044b8:	6878      	ldr	r0, [r7, #4]
 81044ba:	f7fc fd11 	bl	8100ee0 <HAL_TIM_IC_CaptureCallback>
 81044be:	e005      	b.n	81044cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81044c0:	6878      	ldr	r0, [r7, #4]
 81044c2:	f000 f963 	bl	810478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81044c6:	6878      	ldr	r0, [r7, #4]
 81044c8:	f000 f96a 	bl	81047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	2200      	movs	r2, #0
 81044d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	681b      	ldr	r3, [r3, #0]
 81044d6:	691b      	ldr	r3, [r3, #16]
 81044d8:	f003 0301 	and.w	r3, r3, #1
 81044dc:	2b01      	cmp	r3, #1
 81044de:	d10e      	bne.n	81044fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	68db      	ldr	r3, [r3, #12]
 81044e6:	f003 0301 	and.w	r3, r3, #1
 81044ea:	2b01      	cmp	r3, #1
 81044ec:	d107      	bne.n	81044fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	f06f 0201 	mvn.w	r2, #1
 81044f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81044f8:	6878      	ldr	r0, [r7, #4]
 81044fa:	f000 f93d 	bl	8104778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	691b      	ldr	r3, [r3, #16]
 8104504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104508:	2b80      	cmp	r3, #128	; 0x80
 810450a:	d10e      	bne.n	810452a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	68db      	ldr	r3, [r3, #12]
 8104512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104516:	2b80      	cmp	r3, #128	; 0x80
 8104518:	d107      	bne.n	810452a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8104522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104524:	6878      	ldr	r0, [r7, #4]
 8104526:	f000 fbab 	bl	8104c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	691b      	ldr	r3, [r3, #16]
 8104530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104538:	d10e      	bne.n	8104558 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	68db      	ldr	r3, [r3, #12]
 8104540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104544:	2b80      	cmp	r3, #128	; 0x80
 8104546:	d107      	bne.n	8104558 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8104550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104552:	6878      	ldr	r0, [r7, #4]
 8104554:	f000 fb9e 	bl	8104c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	691b      	ldr	r3, [r3, #16]
 810455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104562:	2b40      	cmp	r3, #64	; 0x40
 8104564:	d10e      	bne.n	8104584 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	68db      	ldr	r3, [r3, #12]
 810456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104570:	2b40      	cmp	r3, #64	; 0x40
 8104572:	d107      	bne.n	8104584 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810457e:	6878      	ldr	r0, [r7, #4]
 8104580:	f000 f918 	bl	81047b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	691b      	ldr	r3, [r3, #16]
 810458a:	f003 0320 	and.w	r3, r3, #32
 810458e:	2b20      	cmp	r3, #32
 8104590:	d10e      	bne.n	81045b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	68db      	ldr	r3, [r3, #12]
 8104598:	f003 0320 	and.w	r3, r3, #32
 810459c:	2b20      	cmp	r3, #32
 810459e:	d107      	bne.n	81045b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	f06f 0220 	mvn.w	r2, #32
 81045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81045aa:	6878      	ldr	r0, [r7, #4]
 81045ac:	f000 fb5e 	bl	8104c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81045b0:	bf00      	nop
 81045b2:	3708      	adds	r7, #8
 81045b4:	46bd      	mov	sp, r7
 81045b6:	bd80      	pop	{r7, pc}

081045b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 81045b8:	b580      	push	{r7, lr}
 81045ba:	b086      	sub	sp, #24
 81045bc:	af00      	add	r7, sp, #0
 81045be:	60f8      	str	r0, [r7, #12]
 81045c0:	60b9      	str	r1, [r7, #8]
 81045c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81045c4:	2300      	movs	r3, #0
 81045c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 81045c8:	68fb      	ldr	r3, [r7, #12]
 81045ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81045ce:	2b01      	cmp	r3, #1
 81045d0:	d101      	bne.n	81045d6 <HAL_TIM_IC_ConfigChannel+0x1e>
 81045d2:	2302      	movs	r3, #2
 81045d4:	e088      	b.n	81046e8 <HAL_TIM_IC_ConfigChannel+0x130>
 81045d6:	68fb      	ldr	r3, [r7, #12]
 81045d8:	2201      	movs	r2, #1
 81045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	2b00      	cmp	r3, #0
 81045e2:	d11b      	bne.n	810461c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 81045e4:	68fb      	ldr	r3, [r7, #12]
 81045e6:	6818      	ldr	r0, [r3, #0]
 81045e8:	68bb      	ldr	r3, [r7, #8]
 81045ea:	6819      	ldr	r1, [r3, #0]
 81045ec:	68bb      	ldr	r3, [r7, #8]
 81045ee:	685a      	ldr	r2, [r3, #4]
 81045f0:	68bb      	ldr	r3, [r7, #8]
 81045f2:	68db      	ldr	r3, [r3, #12]
 81045f4:	f000 f982 	bl	81048fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 81045f8:	68fb      	ldr	r3, [r7, #12]
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	699a      	ldr	r2, [r3, #24]
 81045fe:	68fb      	ldr	r3, [r7, #12]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	f022 020c 	bic.w	r2, r2, #12
 8104606:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8104608:	68fb      	ldr	r3, [r7, #12]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	6999      	ldr	r1, [r3, #24]
 810460e:	68bb      	ldr	r3, [r7, #8]
 8104610:	689a      	ldr	r2, [r3, #8]
 8104612:	68fb      	ldr	r3, [r7, #12]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	430a      	orrs	r2, r1
 8104618:	619a      	str	r2, [r3, #24]
 810461a:	e060      	b.n	81046de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	2b04      	cmp	r3, #4
 8104620:	d11c      	bne.n	810465c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8104622:	68fb      	ldr	r3, [r7, #12]
 8104624:	6818      	ldr	r0, [r3, #0]
 8104626:	68bb      	ldr	r3, [r7, #8]
 8104628:	6819      	ldr	r1, [r3, #0]
 810462a:	68bb      	ldr	r3, [r7, #8]
 810462c:	685a      	ldr	r2, [r3, #4]
 810462e:	68bb      	ldr	r3, [r7, #8]
 8104630:	68db      	ldr	r3, [r3, #12]
 8104632:	f000 f9d7 	bl	81049e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8104636:	68fb      	ldr	r3, [r7, #12]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	699a      	ldr	r2, [r3, #24]
 810463c:	68fb      	ldr	r3, [r7, #12]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8104644:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8104646:	68fb      	ldr	r3, [r7, #12]
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	6999      	ldr	r1, [r3, #24]
 810464c:	68bb      	ldr	r3, [r7, #8]
 810464e:	689b      	ldr	r3, [r3, #8]
 8104650:	021a      	lsls	r2, r3, #8
 8104652:	68fb      	ldr	r3, [r7, #12]
 8104654:	681b      	ldr	r3, [r3, #0]
 8104656:	430a      	orrs	r2, r1
 8104658:	619a      	str	r2, [r3, #24]
 810465a:	e040      	b.n	81046de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	2b08      	cmp	r3, #8
 8104660:	d11b      	bne.n	810469a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8104662:	68fb      	ldr	r3, [r7, #12]
 8104664:	6818      	ldr	r0, [r3, #0]
 8104666:	68bb      	ldr	r3, [r7, #8]
 8104668:	6819      	ldr	r1, [r3, #0]
 810466a:	68bb      	ldr	r3, [r7, #8]
 810466c:	685a      	ldr	r2, [r3, #4]
 810466e:	68bb      	ldr	r3, [r7, #8]
 8104670:	68db      	ldr	r3, [r3, #12]
 8104672:	f000 f9f4 	bl	8104a5e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8104676:	68fb      	ldr	r3, [r7, #12]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	69da      	ldr	r2, [r3, #28]
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	f022 020c 	bic.w	r2, r2, #12
 8104684:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8104686:	68fb      	ldr	r3, [r7, #12]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	69d9      	ldr	r1, [r3, #28]
 810468c:	68bb      	ldr	r3, [r7, #8]
 810468e:	689a      	ldr	r2, [r3, #8]
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	430a      	orrs	r2, r1
 8104696:	61da      	str	r2, [r3, #28]
 8104698:	e021      	b.n	81046de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	2b0c      	cmp	r3, #12
 810469e:	d11c      	bne.n	81046da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 81046a0:	68fb      	ldr	r3, [r7, #12]
 81046a2:	6818      	ldr	r0, [r3, #0]
 81046a4:	68bb      	ldr	r3, [r7, #8]
 81046a6:	6819      	ldr	r1, [r3, #0]
 81046a8:	68bb      	ldr	r3, [r7, #8]
 81046aa:	685a      	ldr	r2, [r3, #4]
 81046ac:	68bb      	ldr	r3, [r7, #8]
 81046ae:	68db      	ldr	r3, [r3, #12]
 81046b0:	f000 fa11 	bl	8104ad6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	69da      	ldr	r2, [r3, #28]
 81046ba:	68fb      	ldr	r3, [r7, #12]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 81046c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 81046c4:	68fb      	ldr	r3, [r7, #12]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	69d9      	ldr	r1, [r3, #28]
 81046ca:	68bb      	ldr	r3, [r7, #8]
 81046cc:	689b      	ldr	r3, [r3, #8]
 81046ce:	021a      	lsls	r2, r3, #8
 81046d0:	68fb      	ldr	r3, [r7, #12]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	430a      	orrs	r2, r1
 81046d6:	61da      	str	r2, [r3, #28]
 81046d8:	e001      	b.n	81046de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 81046da:	2301      	movs	r3, #1
 81046dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 81046de:	68fb      	ldr	r3, [r7, #12]
 81046e0:	2200      	movs	r2, #0
 81046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81046e6:	7dfb      	ldrb	r3, [r7, #23]
}
 81046e8:	4618      	mov	r0, r3
 81046ea:	3718      	adds	r7, #24
 81046ec:	46bd      	mov	sp, r7
 81046ee:	bd80      	pop	{r7, pc}

081046f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81046f0:	b480      	push	{r7}
 81046f2:	b085      	sub	sp, #20
 81046f4:	af00      	add	r7, sp, #0
 81046f6:	6078      	str	r0, [r7, #4]
 81046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 81046fa:	2300      	movs	r3, #0
 81046fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 81046fe:	683b      	ldr	r3, [r7, #0]
 8104700:	2b0c      	cmp	r3, #12
 8104702:	d831      	bhi.n	8104768 <HAL_TIM_ReadCapturedValue+0x78>
 8104704:	a201      	add	r2, pc, #4	; (adr r2, 810470c <HAL_TIM_ReadCapturedValue+0x1c>)
 8104706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810470a:	bf00      	nop
 810470c:	08104741 	.word	0x08104741
 8104710:	08104769 	.word	0x08104769
 8104714:	08104769 	.word	0x08104769
 8104718:	08104769 	.word	0x08104769
 810471c:	0810474b 	.word	0x0810474b
 8104720:	08104769 	.word	0x08104769
 8104724:	08104769 	.word	0x08104769
 8104728:	08104769 	.word	0x08104769
 810472c:	08104755 	.word	0x08104755
 8104730:	08104769 	.word	0x08104769
 8104734:	08104769 	.word	0x08104769
 8104738:	08104769 	.word	0x08104769
 810473c:	0810475f 	.word	0x0810475f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104746:	60fb      	str	r3, [r7, #12]

      break;
 8104748:	e00f      	b.n	810476a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104750:	60fb      	str	r3, [r7, #12]

      break;
 8104752:	e00a      	b.n	810476a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810475a:	60fb      	str	r3, [r7, #12]

      break;
 810475c:	e005      	b.n	810476a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104764:	60fb      	str	r3, [r7, #12]

      break;
 8104766:	e000      	b.n	810476a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8104768:	bf00      	nop
  }

  return tmpreg;
 810476a:	68fb      	ldr	r3, [r7, #12]
}
 810476c:	4618      	mov	r0, r3
 810476e:	3714      	adds	r7, #20
 8104770:	46bd      	mov	sp, r7
 8104772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104776:	4770      	bx	lr

08104778 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8104778:	b480      	push	{r7}
 810477a:	b083      	sub	sp, #12
 810477c:	af00      	add	r7, sp, #0
 810477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8104780:	bf00      	nop
 8104782:	370c      	adds	r7, #12
 8104784:	46bd      	mov	sp, r7
 8104786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810478a:	4770      	bx	lr

0810478c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810478c:	b480      	push	{r7}
 810478e:	b083      	sub	sp, #12
 8104790:	af00      	add	r7, sp, #0
 8104792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8104794:	bf00      	nop
 8104796:	370c      	adds	r7, #12
 8104798:	46bd      	mov	sp, r7
 810479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810479e:	4770      	bx	lr

081047a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81047a0:	b480      	push	{r7}
 81047a2:	b083      	sub	sp, #12
 81047a4:	af00      	add	r7, sp, #0
 81047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81047a8:	bf00      	nop
 81047aa:	370c      	adds	r7, #12
 81047ac:	46bd      	mov	sp, r7
 81047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047b2:	4770      	bx	lr

081047b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81047b4:	b480      	push	{r7}
 81047b6:	b083      	sub	sp, #12
 81047b8:	af00      	add	r7, sp, #0
 81047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81047bc:	bf00      	nop
 81047be:	370c      	adds	r7, #12
 81047c0:	46bd      	mov	sp, r7
 81047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047c6:	4770      	bx	lr

081047c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81047c8:	b480      	push	{r7}
 81047ca:	b085      	sub	sp, #20
 81047cc:	af00      	add	r7, sp, #0
 81047ce:	6078      	str	r0, [r7, #4]
 81047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	4a40      	ldr	r2, [pc, #256]	; (81048dc <TIM_Base_SetConfig+0x114>)
 81047dc:	4293      	cmp	r3, r2
 81047de:	d013      	beq.n	8104808 <TIM_Base_SetConfig+0x40>
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81047e6:	d00f      	beq.n	8104808 <TIM_Base_SetConfig+0x40>
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	4a3d      	ldr	r2, [pc, #244]	; (81048e0 <TIM_Base_SetConfig+0x118>)
 81047ec:	4293      	cmp	r3, r2
 81047ee:	d00b      	beq.n	8104808 <TIM_Base_SetConfig+0x40>
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	4a3c      	ldr	r2, [pc, #240]	; (81048e4 <TIM_Base_SetConfig+0x11c>)
 81047f4:	4293      	cmp	r3, r2
 81047f6:	d007      	beq.n	8104808 <TIM_Base_SetConfig+0x40>
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	4a3b      	ldr	r2, [pc, #236]	; (81048e8 <TIM_Base_SetConfig+0x120>)
 81047fc:	4293      	cmp	r3, r2
 81047fe:	d003      	beq.n	8104808 <TIM_Base_SetConfig+0x40>
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	4a3a      	ldr	r2, [pc, #232]	; (81048ec <TIM_Base_SetConfig+0x124>)
 8104804:	4293      	cmp	r3, r2
 8104806:	d108      	bne.n	810481a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8104808:	68fb      	ldr	r3, [r7, #12]
 810480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8104810:	683b      	ldr	r3, [r7, #0]
 8104812:	685b      	ldr	r3, [r3, #4]
 8104814:	68fa      	ldr	r2, [r7, #12]
 8104816:	4313      	orrs	r3, r2
 8104818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	4a2f      	ldr	r2, [pc, #188]	; (81048dc <TIM_Base_SetConfig+0x114>)
 810481e:	4293      	cmp	r3, r2
 8104820:	d01f      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104828:	d01b      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 810482a:	687b      	ldr	r3, [r7, #4]
 810482c:	4a2c      	ldr	r2, [pc, #176]	; (81048e0 <TIM_Base_SetConfig+0x118>)
 810482e:	4293      	cmp	r3, r2
 8104830:	d017      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	4a2b      	ldr	r2, [pc, #172]	; (81048e4 <TIM_Base_SetConfig+0x11c>)
 8104836:	4293      	cmp	r3, r2
 8104838:	d013      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	4a2a      	ldr	r2, [pc, #168]	; (81048e8 <TIM_Base_SetConfig+0x120>)
 810483e:	4293      	cmp	r3, r2
 8104840:	d00f      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	4a29      	ldr	r2, [pc, #164]	; (81048ec <TIM_Base_SetConfig+0x124>)
 8104846:	4293      	cmp	r3, r2
 8104848:	d00b      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	4a28      	ldr	r2, [pc, #160]	; (81048f0 <TIM_Base_SetConfig+0x128>)
 810484e:	4293      	cmp	r3, r2
 8104850:	d007      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	4a27      	ldr	r2, [pc, #156]	; (81048f4 <TIM_Base_SetConfig+0x12c>)
 8104856:	4293      	cmp	r3, r2
 8104858:	d003      	beq.n	8104862 <TIM_Base_SetConfig+0x9a>
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	4a26      	ldr	r2, [pc, #152]	; (81048f8 <TIM_Base_SetConfig+0x130>)
 810485e:	4293      	cmp	r3, r2
 8104860:	d108      	bne.n	8104874 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810486a:	683b      	ldr	r3, [r7, #0]
 810486c:	68db      	ldr	r3, [r3, #12]
 810486e:	68fa      	ldr	r2, [r7, #12]
 8104870:	4313      	orrs	r3, r2
 8104872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810487a:	683b      	ldr	r3, [r7, #0]
 810487c:	695b      	ldr	r3, [r3, #20]
 810487e:	4313      	orrs	r3, r2
 8104880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	68fa      	ldr	r2, [r7, #12]
 8104886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8104888:	683b      	ldr	r3, [r7, #0]
 810488a:	689a      	ldr	r2, [r3, #8]
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104890:	683b      	ldr	r3, [r7, #0]
 8104892:	681a      	ldr	r2, [r3, #0]
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104898:	687b      	ldr	r3, [r7, #4]
 810489a:	4a10      	ldr	r2, [pc, #64]	; (81048dc <TIM_Base_SetConfig+0x114>)
 810489c:	4293      	cmp	r3, r2
 810489e:	d00f      	beq.n	81048c0 <TIM_Base_SetConfig+0xf8>
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	4a12      	ldr	r2, [pc, #72]	; (81048ec <TIM_Base_SetConfig+0x124>)
 81048a4:	4293      	cmp	r3, r2
 81048a6:	d00b      	beq.n	81048c0 <TIM_Base_SetConfig+0xf8>
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	4a11      	ldr	r2, [pc, #68]	; (81048f0 <TIM_Base_SetConfig+0x128>)
 81048ac:	4293      	cmp	r3, r2
 81048ae:	d007      	beq.n	81048c0 <TIM_Base_SetConfig+0xf8>
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	4a10      	ldr	r2, [pc, #64]	; (81048f4 <TIM_Base_SetConfig+0x12c>)
 81048b4:	4293      	cmp	r3, r2
 81048b6:	d003      	beq.n	81048c0 <TIM_Base_SetConfig+0xf8>
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	4a0f      	ldr	r2, [pc, #60]	; (81048f8 <TIM_Base_SetConfig+0x130>)
 81048bc:	4293      	cmp	r3, r2
 81048be:	d103      	bne.n	81048c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81048c0:	683b      	ldr	r3, [r7, #0]
 81048c2:	691a      	ldr	r2, [r3, #16]
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	2201      	movs	r2, #1
 81048cc:	615a      	str	r2, [r3, #20]
}
 81048ce:	bf00      	nop
 81048d0:	3714      	adds	r7, #20
 81048d2:	46bd      	mov	sp, r7
 81048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048d8:	4770      	bx	lr
 81048da:	bf00      	nop
 81048dc:	40010000 	.word	0x40010000
 81048e0:	40000400 	.word	0x40000400
 81048e4:	40000800 	.word	0x40000800
 81048e8:	40000c00 	.word	0x40000c00
 81048ec:	40010400 	.word	0x40010400
 81048f0:	40014000 	.word	0x40014000
 81048f4:	40014400 	.word	0x40014400
 81048f8:	40014800 	.word	0x40014800

081048fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 81048fc:	b480      	push	{r7}
 81048fe:	b087      	sub	sp, #28
 8104900:	af00      	add	r7, sp, #0
 8104902:	60f8      	str	r0, [r7, #12]
 8104904:	60b9      	str	r1, [r7, #8]
 8104906:	607a      	str	r2, [r7, #4]
 8104908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	6a1b      	ldr	r3, [r3, #32]
 810490e:	f023 0201 	bic.w	r2, r3, #1
 8104912:	68fb      	ldr	r3, [r7, #12]
 8104914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104916:	68fb      	ldr	r3, [r7, #12]
 8104918:	699b      	ldr	r3, [r3, #24]
 810491a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810491c:	68fb      	ldr	r3, [r7, #12]
 810491e:	6a1b      	ldr	r3, [r3, #32]
 8104920:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8104922:	68fb      	ldr	r3, [r7, #12]
 8104924:	4a28      	ldr	r2, [pc, #160]	; (81049c8 <TIM_TI1_SetConfig+0xcc>)
 8104926:	4293      	cmp	r3, r2
 8104928:	d01b      	beq.n	8104962 <TIM_TI1_SetConfig+0x66>
 810492a:	68fb      	ldr	r3, [r7, #12]
 810492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104930:	d017      	beq.n	8104962 <TIM_TI1_SetConfig+0x66>
 8104932:	68fb      	ldr	r3, [r7, #12]
 8104934:	4a25      	ldr	r2, [pc, #148]	; (81049cc <TIM_TI1_SetConfig+0xd0>)
 8104936:	4293      	cmp	r3, r2
 8104938:	d013      	beq.n	8104962 <TIM_TI1_SetConfig+0x66>
 810493a:	68fb      	ldr	r3, [r7, #12]
 810493c:	4a24      	ldr	r2, [pc, #144]	; (81049d0 <TIM_TI1_SetConfig+0xd4>)
 810493e:	4293      	cmp	r3, r2
 8104940:	d00f      	beq.n	8104962 <TIM_TI1_SetConfig+0x66>
 8104942:	68fb      	ldr	r3, [r7, #12]
 8104944:	4a23      	ldr	r2, [pc, #140]	; (81049d4 <TIM_TI1_SetConfig+0xd8>)
 8104946:	4293      	cmp	r3, r2
 8104948:	d00b      	beq.n	8104962 <TIM_TI1_SetConfig+0x66>
 810494a:	68fb      	ldr	r3, [r7, #12]
 810494c:	4a22      	ldr	r2, [pc, #136]	; (81049d8 <TIM_TI1_SetConfig+0xdc>)
 810494e:	4293      	cmp	r3, r2
 8104950:	d007      	beq.n	8104962 <TIM_TI1_SetConfig+0x66>
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	4a21      	ldr	r2, [pc, #132]	; (81049dc <TIM_TI1_SetConfig+0xe0>)
 8104956:	4293      	cmp	r3, r2
 8104958:	d003      	beq.n	8104962 <TIM_TI1_SetConfig+0x66>
 810495a:	68fb      	ldr	r3, [r7, #12]
 810495c:	4a20      	ldr	r2, [pc, #128]	; (81049e0 <TIM_TI1_SetConfig+0xe4>)
 810495e:	4293      	cmp	r3, r2
 8104960:	d101      	bne.n	8104966 <TIM_TI1_SetConfig+0x6a>
 8104962:	2301      	movs	r3, #1
 8104964:	e000      	b.n	8104968 <TIM_TI1_SetConfig+0x6c>
 8104966:	2300      	movs	r3, #0
 8104968:	2b00      	cmp	r3, #0
 810496a:	d008      	beq.n	810497e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810496c:	697b      	ldr	r3, [r7, #20]
 810496e:	f023 0303 	bic.w	r3, r3, #3
 8104972:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8104974:	697a      	ldr	r2, [r7, #20]
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	4313      	orrs	r3, r2
 810497a:	617b      	str	r3, [r7, #20]
 810497c:	e003      	b.n	8104986 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810497e:	697b      	ldr	r3, [r7, #20]
 8104980:	f043 0301 	orr.w	r3, r3, #1
 8104984:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8104986:	697b      	ldr	r3, [r7, #20]
 8104988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810498c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810498e:	683b      	ldr	r3, [r7, #0]
 8104990:	011b      	lsls	r3, r3, #4
 8104992:	b2db      	uxtb	r3, r3
 8104994:	697a      	ldr	r2, [r7, #20]
 8104996:	4313      	orrs	r3, r2
 8104998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810499a:	693b      	ldr	r3, [r7, #16]
 810499c:	f023 030a 	bic.w	r3, r3, #10
 81049a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 81049a2:	68bb      	ldr	r3, [r7, #8]
 81049a4:	f003 030a 	and.w	r3, r3, #10
 81049a8:	693a      	ldr	r2, [r7, #16]
 81049aa:	4313      	orrs	r3, r2
 81049ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	697a      	ldr	r2, [r7, #20]
 81049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81049b4:	68fb      	ldr	r3, [r7, #12]
 81049b6:	693a      	ldr	r2, [r7, #16]
 81049b8:	621a      	str	r2, [r3, #32]
}
 81049ba:	bf00      	nop
 81049bc:	371c      	adds	r7, #28
 81049be:	46bd      	mov	sp, r7
 81049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049c4:	4770      	bx	lr
 81049c6:	bf00      	nop
 81049c8:	40010000 	.word	0x40010000
 81049cc:	40000400 	.word	0x40000400
 81049d0:	40000800 	.word	0x40000800
 81049d4:	40000c00 	.word	0x40000c00
 81049d8:	40010400 	.word	0x40010400
 81049dc:	40001800 	.word	0x40001800
 81049e0:	40014000 	.word	0x40014000

081049e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81049e4:	b480      	push	{r7}
 81049e6:	b087      	sub	sp, #28
 81049e8:	af00      	add	r7, sp, #0
 81049ea:	60f8      	str	r0, [r7, #12]
 81049ec:	60b9      	str	r1, [r7, #8]
 81049ee:	607a      	str	r2, [r7, #4]
 81049f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	6a1b      	ldr	r3, [r3, #32]
 81049f6:	f023 0210 	bic.w	r2, r3, #16
 81049fa:	68fb      	ldr	r3, [r7, #12]
 81049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81049fe:	68fb      	ldr	r3, [r7, #12]
 8104a00:	699b      	ldr	r3, [r3, #24]
 8104a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	6a1b      	ldr	r3, [r3, #32]
 8104a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8104a0a:	697b      	ldr	r3, [r7, #20]
 8104a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8104a12:	687b      	ldr	r3, [r7, #4]
 8104a14:	021b      	lsls	r3, r3, #8
 8104a16:	697a      	ldr	r2, [r7, #20]
 8104a18:	4313      	orrs	r3, r2
 8104a1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8104a1c:	697b      	ldr	r3, [r7, #20]
 8104a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8104a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8104a24:	683b      	ldr	r3, [r7, #0]
 8104a26:	031b      	lsls	r3, r3, #12
 8104a28:	b29b      	uxth	r3, r3
 8104a2a:	697a      	ldr	r2, [r7, #20]
 8104a2c:	4313      	orrs	r3, r2
 8104a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8104a30:	693b      	ldr	r3, [r7, #16]
 8104a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8104a36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8104a38:	68bb      	ldr	r3, [r7, #8]
 8104a3a:	011b      	lsls	r3, r3, #4
 8104a3c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8104a40:	693a      	ldr	r2, [r7, #16]
 8104a42:	4313      	orrs	r3, r2
 8104a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	697a      	ldr	r2, [r7, #20]
 8104a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8104a4c:	68fb      	ldr	r3, [r7, #12]
 8104a4e:	693a      	ldr	r2, [r7, #16]
 8104a50:	621a      	str	r2, [r3, #32]
}
 8104a52:	bf00      	nop
 8104a54:	371c      	adds	r7, #28
 8104a56:	46bd      	mov	sp, r7
 8104a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a5c:	4770      	bx	lr

08104a5e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8104a5e:	b480      	push	{r7}
 8104a60:	b087      	sub	sp, #28
 8104a62:	af00      	add	r7, sp, #0
 8104a64:	60f8      	str	r0, [r7, #12]
 8104a66:	60b9      	str	r1, [r7, #8]
 8104a68:	607a      	str	r2, [r7, #4]
 8104a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8104a6c:	68fb      	ldr	r3, [r7, #12]
 8104a6e:	6a1b      	ldr	r3, [r3, #32]
 8104a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8104a74:	68fb      	ldr	r3, [r7, #12]
 8104a76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8104a78:	68fb      	ldr	r3, [r7, #12]
 8104a7a:	69db      	ldr	r3, [r3, #28]
 8104a7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	6a1b      	ldr	r3, [r3, #32]
 8104a82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8104a84:	697b      	ldr	r3, [r7, #20]
 8104a86:	f023 0303 	bic.w	r3, r3, #3
 8104a8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8104a8c:	697a      	ldr	r2, [r7, #20]
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	4313      	orrs	r3, r2
 8104a92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8104a94:	697b      	ldr	r3, [r7, #20]
 8104a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8104a9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8104a9c:	683b      	ldr	r3, [r7, #0]
 8104a9e:	011b      	lsls	r3, r3, #4
 8104aa0:	b2db      	uxtb	r3, r3
 8104aa2:	697a      	ldr	r2, [r7, #20]
 8104aa4:	4313      	orrs	r3, r2
 8104aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8104aa8:	693b      	ldr	r3, [r7, #16]
 8104aaa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8104aae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8104ab0:	68bb      	ldr	r3, [r7, #8]
 8104ab2:	021b      	lsls	r3, r3, #8
 8104ab4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8104ab8:	693a      	ldr	r2, [r7, #16]
 8104aba:	4313      	orrs	r3, r2
 8104abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8104abe:	68fb      	ldr	r3, [r7, #12]
 8104ac0:	697a      	ldr	r2, [r7, #20]
 8104ac2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	693a      	ldr	r2, [r7, #16]
 8104ac8:	621a      	str	r2, [r3, #32]
}
 8104aca:	bf00      	nop
 8104acc:	371c      	adds	r7, #28
 8104ace:	46bd      	mov	sp, r7
 8104ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ad4:	4770      	bx	lr

08104ad6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8104ad6:	b480      	push	{r7}
 8104ad8:	b087      	sub	sp, #28
 8104ada:	af00      	add	r7, sp, #0
 8104adc:	60f8      	str	r0, [r7, #12]
 8104ade:	60b9      	str	r1, [r7, #8]
 8104ae0:	607a      	str	r2, [r7, #4]
 8104ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8104ae4:	68fb      	ldr	r3, [r7, #12]
 8104ae6:	6a1b      	ldr	r3, [r3, #32]
 8104ae8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104aec:	68fb      	ldr	r3, [r7, #12]
 8104aee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	69db      	ldr	r3, [r3, #28]
 8104af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8104af6:	68fb      	ldr	r3, [r7, #12]
 8104af8:	6a1b      	ldr	r3, [r3, #32]
 8104afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8104afc:	697b      	ldr	r3, [r7, #20]
 8104afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104b02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	021b      	lsls	r3, r3, #8
 8104b08:	697a      	ldr	r2, [r7, #20]
 8104b0a:	4313      	orrs	r3, r2
 8104b0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8104b0e:	697b      	ldr	r3, [r7, #20]
 8104b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8104b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8104b16:	683b      	ldr	r3, [r7, #0]
 8104b18:	031b      	lsls	r3, r3, #12
 8104b1a:	b29b      	uxth	r3, r3
 8104b1c:	697a      	ldr	r2, [r7, #20]
 8104b1e:	4313      	orrs	r3, r2
 8104b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8104b22:	693b      	ldr	r3, [r7, #16]
 8104b24:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8104b28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8104b2a:	68bb      	ldr	r3, [r7, #8]
 8104b2c:	031b      	lsls	r3, r3, #12
 8104b2e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8104b32:	693a      	ldr	r2, [r7, #16]
 8104b34:	4313      	orrs	r3, r2
 8104b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8104b38:	68fb      	ldr	r3, [r7, #12]
 8104b3a:	697a      	ldr	r2, [r7, #20]
 8104b3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8104b3e:	68fb      	ldr	r3, [r7, #12]
 8104b40:	693a      	ldr	r2, [r7, #16]
 8104b42:	621a      	str	r2, [r3, #32]
}
 8104b44:	bf00      	nop
 8104b46:	371c      	adds	r7, #28
 8104b48:	46bd      	mov	sp, r7
 8104b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b4e:	4770      	bx	lr

08104b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8104b50:	b480      	push	{r7}
 8104b52:	b085      	sub	sp, #20
 8104b54:	af00      	add	r7, sp, #0
 8104b56:	6078      	str	r0, [r7, #4]
 8104b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104b60:	2b01      	cmp	r3, #1
 8104b62:	d101      	bne.n	8104b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8104b64:	2302      	movs	r3, #2
 8104b66:	e06d      	b.n	8104c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	2201      	movs	r2, #1
 8104b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	2202      	movs	r2, #2
 8104b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	681b      	ldr	r3, [r3, #0]
 8104b7c:	685b      	ldr	r3, [r3, #4]
 8104b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	681b      	ldr	r3, [r3, #0]
 8104b84:	689b      	ldr	r3, [r3, #8]
 8104b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	4a30      	ldr	r2, [pc, #192]	; (8104c50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8104b8e:	4293      	cmp	r3, r2
 8104b90:	d004      	beq.n	8104b9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	681b      	ldr	r3, [r3, #0]
 8104b96:	4a2f      	ldr	r2, [pc, #188]	; (8104c54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8104b98:	4293      	cmp	r3, r2
 8104b9a:	d108      	bne.n	8104bae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8104b9c:	68fb      	ldr	r3, [r7, #12]
 8104b9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8104ba2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8104ba4:	683b      	ldr	r3, [r7, #0]
 8104ba6:	685b      	ldr	r3, [r3, #4]
 8104ba8:	68fa      	ldr	r2, [r7, #12]
 8104baa:	4313      	orrs	r3, r2
 8104bac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104bb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8104bb6:	683b      	ldr	r3, [r7, #0]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	68fa      	ldr	r2, [r7, #12]
 8104bbc:	4313      	orrs	r3, r2
 8104bbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	68fa      	ldr	r2, [r7, #12]
 8104bc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	4a20      	ldr	r2, [pc, #128]	; (8104c50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8104bce:	4293      	cmp	r3, r2
 8104bd0:	d022      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	681b      	ldr	r3, [r3, #0]
 8104bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104bda:	d01d      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	4a1d      	ldr	r2, [pc, #116]	; (8104c58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8104be2:	4293      	cmp	r3, r2
 8104be4:	d018      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	681b      	ldr	r3, [r3, #0]
 8104bea:	4a1c      	ldr	r2, [pc, #112]	; (8104c5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8104bec:	4293      	cmp	r3, r2
 8104bee:	d013      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	681b      	ldr	r3, [r3, #0]
 8104bf4:	4a1a      	ldr	r2, [pc, #104]	; (8104c60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8104bf6:	4293      	cmp	r3, r2
 8104bf8:	d00e      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	681b      	ldr	r3, [r3, #0]
 8104bfe:	4a15      	ldr	r2, [pc, #84]	; (8104c54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8104c00:	4293      	cmp	r3, r2
 8104c02:	d009      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	681b      	ldr	r3, [r3, #0]
 8104c08:	4a16      	ldr	r2, [pc, #88]	; (8104c64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8104c0a:	4293      	cmp	r3, r2
 8104c0c:	d004      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	4a15      	ldr	r2, [pc, #84]	; (8104c68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8104c14:	4293      	cmp	r3, r2
 8104c16:	d10c      	bne.n	8104c32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8104c18:	68bb      	ldr	r3, [r7, #8]
 8104c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8104c1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8104c20:	683b      	ldr	r3, [r7, #0]
 8104c22:	689b      	ldr	r3, [r3, #8]
 8104c24:	68ba      	ldr	r2, [r7, #8]
 8104c26:	4313      	orrs	r3, r2
 8104c28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	68ba      	ldr	r2, [r7, #8]
 8104c30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	2201      	movs	r2, #1
 8104c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	2200      	movs	r2, #0
 8104c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104c42:	2300      	movs	r3, #0
}
 8104c44:	4618      	mov	r0, r3
 8104c46:	3714      	adds	r7, #20
 8104c48:	46bd      	mov	sp, r7
 8104c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c4e:	4770      	bx	lr
 8104c50:	40010000 	.word	0x40010000
 8104c54:	40010400 	.word	0x40010400
 8104c58:	40000400 	.word	0x40000400
 8104c5c:	40000800 	.word	0x40000800
 8104c60:	40000c00 	.word	0x40000c00
 8104c64:	40001800 	.word	0x40001800
 8104c68:	40014000 	.word	0x40014000

08104c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8104c6c:	b480      	push	{r7}
 8104c6e:	b083      	sub	sp, #12
 8104c70:	af00      	add	r7, sp, #0
 8104c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8104c74:	bf00      	nop
 8104c76:	370c      	adds	r7, #12
 8104c78:	46bd      	mov	sp, r7
 8104c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c7e:	4770      	bx	lr

08104c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8104c80:	b480      	push	{r7}
 8104c82:	b083      	sub	sp, #12
 8104c84:	af00      	add	r7, sp, #0
 8104c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8104c88:	bf00      	nop
 8104c8a:	370c      	adds	r7, #12
 8104c8c:	46bd      	mov	sp, r7
 8104c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c92:	4770      	bx	lr

08104c94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8104c94:	b480      	push	{r7}
 8104c96:	b083      	sub	sp, #12
 8104c98:	af00      	add	r7, sp, #0
 8104c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8104c9c:	bf00      	nop
 8104c9e:	370c      	adds	r7, #12
 8104ca0:	46bd      	mov	sp, r7
 8104ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ca6:	4770      	bx	lr

08104ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104ca8:	b580      	push	{r7, lr}
 8104caa:	b082      	sub	sp, #8
 8104cac:	af00      	add	r7, sp, #0
 8104cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	2b00      	cmp	r3, #0
 8104cb4:	d101      	bne.n	8104cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104cb6:	2301      	movs	r3, #1
 8104cb8:	e042      	b.n	8104d40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104cc0:	2b00      	cmp	r3, #0
 8104cc2:	d106      	bne.n	8104cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	2200      	movs	r2, #0
 8104cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104ccc:	6878      	ldr	r0, [r7, #4]
 8104cce:	f7fc fb3b 	bl	8101348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	2224      	movs	r2, #36	; 0x24
 8104cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	681a      	ldr	r2, [r3, #0]
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	681b      	ldr	r3, [r3, #0]
 8104ce4:	f022 0201 	bic.w	r2, r2, #1
 8104ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104cea:	6878      	ldr	r0, [r7, #4]
 8104cec:	f000 fbea 	bl	81054c4 <UART_SetConfig>
 8104cf0:	4603      	mov	r3, r0
 8104cf2:	2b01      	cmp	r3, #1
 8104cf4:	d101      	bne.n	8104cfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104cf6:	2301      	movs	r3, #1
 8104cf8:	e022      	b.n	8104d40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104cfe:	2b00      	cmp	r3, #0
 8104d00:	d002      	beq.n	8104d08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8104d02:	6878      	ldr	r0, [r7, #4]
 8104d04:	f001 f946 	bl	8105f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	681b      	ldr	r3, [r3, #0]
 8104d0c:	685a      	ldr	r2, [r3, #4]
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	689a      	ldr	r2, [r3, #8]
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	681a      	ldr	r2, [r3, #0]
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	681b      	ldr	r3, [r3, #0]
 8104d32:	f042 0201 	orr.w	r2, r2, #1
 8104d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104d38:	6878      	ldr	r0, [r7, #4]
 8104d3a:	f001 f9cd 	bl	81060d8 <UART_CheckIdleState>
 8104d3e:	4603      	mov	r3, r0
}
 8104d40:	4618      	mov	r0, r3
 8104d42:	3708      	adds	r7, #8
 8104d44:	46bd      	mov	sp, r7
 8104d46:	bd80      	pop	{r7, pc}

08104d48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8104d48:	b580      	push	{r7, lr}
 8104d4a:	b0ba      	sub	sp, #232	; 0xe8
 8104d4c:	af00      	add	r7, sp, #0
 8104d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8104d50:	687b      	ldr	r3, [r7, #4]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	69db      	ldr	r3, [r3, #28]
 8104d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	681b      	ldr	r3, [r3, #0]
 8104d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	689b      	ldr	r3, [r3, #8]
 8104d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8104d6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8104d72:	f640 030f 	movw	r3, #2063	; 0x80f
 8104d76:	4013      	ands	r3, r2
 8104d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8104d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8104d80:	2b00      	cmp	r3, #0
 8104d82:	d11b      	bne.n	8104dbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8104d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104d88:	f003 0320 	and.w	r3, r3, #32
 8104d8c:	2b00      	cmp	r3, #0
 8104d8e:	d015      	beq.n	8104dbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8104d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104d94:	f003 0320 	and.w	r3, r3, #32
 8104d98:	2b00      	cmp	r3, #0
 8104d9a:	d105      	bne.n	8104da8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8104d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	d009      	beq.n	8104dbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104dac:	2b00      	cmp	r3, #0
 8104dae:	f000 835c 	beq.w	810546a <HAL_UART_IRQHandler+0x722>
      {
        huart->RxISR(huart);
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104db6:	6878      	ldr	r0, [r7, #4]
 8104db8:	4798      	blx	r3
      }
      return;
 8104dba:	e356      	b.n	810546a <HAL_UART_IRQHandler+0x722>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8104dbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8104dc0:	2b00      	cmp	r3, #0
 8104dc2:	f000 811f 	beq.w	8105004 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8104dc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8104dca:	4b8b      	ldr	r3, [pc, #556]	; (8104ff8 <HAL_UART_IRQHandler+0x2b0>)
 8104dcc:	4013      	ands	r3, r2
 8104dce:	2b00      	cmp	r3, #0
 8104dd0:	d106      	bne.n	8104de0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8104dd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8104dd6:	4b89      	ldr	r3, [pc, #548]	; (8104ffc <HAL_UART_IRQHandler+0x2b4>)
 8104dd8:	4013      	ands	r3, r2
 8104dda:	2b00      	cmp	r3, #0
 8104ddc:	f000 8112 	beq.w	8105004 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8104de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104de4:	f003 0301 	and.w	r3, r3, #1
 8104de8:	2b00      	cmp	r3, #0
 8104dea:	d011      	beq.n	8104e10 <HAL_UART_IRQHandler+0xc8>
 8104dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104df4:	2b00      	cmp	r3, #0
 8104df6:	d00b      	beq.n	8104e10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	2201      	movs	r2, #1
 8104dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104e06:	f043 0201 	orr.w	r2, r3, #1
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8104e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e14:	f003 0302 	and.w	r3, r3, #2
 8104e18:	2b00      	cmp	r3, #0
 8104e1a:	d011      	beq.n	8104e40 <HAL_UART_IRQHandler+0xf8>
 8104e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104e20:	f003 0301 	and.w	r3, r3, #1
 8104e24:	2b00      	cmp	r3, #0
 8104e26:	d00b      	beq.n	8104e40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	2202      	movs	r2, #2
 8104e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104e36:	f043 0204 	orr.w	r2, r3, #4
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8104e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e44:	f003 0304 	and.w	r3, r3, #4
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d011      	beq.n	8104e70 <HAL_UART_IRQHandler+0x128>
 8104e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104e50:	f003 0301 	and.w	r3, r3, #1
 8104e54:	2b00      	cmp	r3, #0
 8104e56:	d00b      	beq.n	8104e70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	2204      	movs	r2, #4
 8104e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104e66:	f043 0202 	orr.w	r2, r3, #2
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8104e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e74:	f003 0308 	and.w	r3, r3, #8
 8104e78:	2b00      	cmp	r3, #0
 8104e7a:	d017      	beq.n	8104eac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104e80:	f003 0320 	and.w	r3, r3, #32
 8104e84:	2b00      	cmp	r3, #0
 8104e86:	d105      	bne.n	8104e94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8104e88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8104e8c:	4b5a      	ldr	r3, [pc, #360]	; (8104ff8 <HAL_UART_IRQHandler+0x2b0>)
 8104e8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104e90:	2b00      	cmp	r3, #0
 8104e92:	d00b      	beq.n	8104eac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	2208      	movs	r2, #8
 8104e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104ea2:	f043 0208 	orr.w	r2, r3, #8
 8104ea6:	687b      	ldr	r3, [r7, #4]
 8104ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8104eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104eb4:	2b00      	cmp	r3, #0
 8104eb6:	d012      	beq.n	8104ede <HAL_UART_IRQHandler+0x196>
 8104eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8104ec0:	2b00      	cmp	r3, #0
 8104ec2:	d00c      	beq.n	8104ede <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	681b      	ldr	r3, [r3, #0]
 8104ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104ed4:	f043 0220 	orr.w	r2, r3, #32
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104ee4:	2b00      	cmp	r3, #0
 8104ee6:	f000 82c2 	beq.w	810546e <HAL_UART_IRQHandler+0x726>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8104eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104eee:	f003 0320 	and.w	r3, r3, #32
 8104ef2:	2b00      	cmp	r3, #0
 8104ef4:	d013      	beq.n	8104f1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8104ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104efa:	f003 0320 	and.w	r3, r3, #32
 8104efe:	2b00      	cmp	r3, #0
 8104f00:	d105      	bne.n	8104f0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8104f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104f0a:	2b00      	cmp	r3, #0
 8104f0c:	d007      	beq.n	8104f1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104f12:	2b00      	cmp	r3, #0
 8104f14:	d003      	beq.n	8104f1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104f1a:	6878      	ldr	r0, [r7, #4]
 8104f1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8104f1e:	687b      	ldr	r3, [r7, #4]
 8104f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	689b      	ldr	r3, [r3, #8]
 8104f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104f32:	2b40      	cmp	r3, #64	; 0x40
 8104f34:	d005      	beq.n	8104f42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8104f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8104f3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8104f3e:	2b00      	cmp	r3, #0
 8104f40:	d04f      	beq.n	8104fe2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8104f42:	6878      	ldr	r0, [r7, #4]
 8104f44:	f001 f9db 	bl	81062fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	689b      	ldr	r3, [r3, #8]
 8104f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104f52:	2b40      	cmp	r3, #64	; 0x40
 8104f54:	d141      	bne.n	8104fda <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	681b      	ldr	r3, [r3, #0]
 8104f5a:	3308      	adds	r3, #8
 8104f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8104f64:	e853 3f00 	ldrex	r3, [r3]
 8104f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8104f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8104f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	3308      	adds	r3, #8
 8104f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8104f82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8104f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8104f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8104f92:	e841 2300 	strex	r3, r2, [r1]
 8104f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8104f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8104f9e:	2b00      	cmp	r3, #0
 8104fa0:	d1d9      	bne.n	8104f56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104fa6:	2b00      	cmp	r3, #0
 8104fa8:	d013      	beq.n	8104fd2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104fae:	4a14      	ldr	r2, [pc, #80]	; (8105000 <HAL_UART_IRQHandler+0x2b8>)
 8104fb0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104fb6:	4618      	mov	r0, r3
 8104fb8:	f7fc ffb8 	bl	8101f2c <HAL_DMA_Abort_IT>
 8104fbc:	4603      	mov	r3, r0
 8104fbe:	2b00      	cmp	r3, #0
 8104fc0:	d017      	beq.n	8104ff2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104fc8:	687a      	ldr	r2, [r7, #4]
 8104fca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8104fcc:	4610      	mov	r0, r2
 8104fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104fd0:	e00f      	b.n	8104ff2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8104fd2:	6878      	ldr	r0, [r7, #4]
 8104fd4:	f000 fa60 	bl	8105498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104fd8:	e00b      	b.n	8104ff2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8104fda:	6878      	ldr	r0, [r7, #4]
 8104fdc:	f000 fa5c 	bl	8105498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104fe0:	e007      	b.n	8104ff2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8104fe2:	6878      	ldr	r0, [r7, #4]
 8104fe4:	f000 fa58 	bl	8105498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	2200      	movs	r2, #0
 8104fec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8104ff0:	e23d      	b.n	810546e <HAL_UART_IRQHandler+0x726>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104ff2:	bf00      	nop
    return;
 8104ff4:	e23b      	b.n	810546e <HAL_UART_IRQHandler+0x726>
 8104ff6:	bf00      	nop
 8104ff8:	10000001 	.word	0x10000001
 8104ffc:	04000120 	.word	0x04000120
 8105000:	081063cb 	.word	0x081063cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105008:	2b01      	cmp	r3, #1
 810500a:	f040 81d0 	bne.w	81053ae <HAL_UART_IRQHandler+0x666>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8105012:	f003 0310 	and.w	r3, r3, #16
 8105016:	2b00      	cmp	r3, #0
 8105018:	f000 81c9 	beq.w	81053ae <HAL_UART_IRQHandler+0x666>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810501c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8105020:	f003 0310 	and.w	r3, r3, #16
 8105024:	2b00      	cmp	r3, #0
 8105026:	f000 81c2 	beq.w	81053ae <HAL_UART_IRQHandler+0x666>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	2210      	movs	r2, #16
 8105030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	689b      	ldr	r3, [r3, #8]
 8105038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810503c:	2b40      	cmp	r3, #64	; 0x40
 810503e:	f040 813b 	bne.w	81052b8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105046:	681b      	ldr	r3, [r3, #0]
 8105048:	4a8b      	ldr	r2, [pc, #556]	; (8105278 <HAL_UART_IRQHandler+0x530>)
 810504a:	4293      	cmp	r3, r2
 810504c:	d059      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	4a89      	ldr	r2, [pc, #548]	; (810527c <HAL_UART_IRQHandler+0x534>)
 8105056:	4293      	cmp	r3, r2
 8105058:	d053      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	4a87      	ldr	r2, [pc, #540]	; (8105280 <HAL_UART_IRQHandler+0x538>)
 8105062:	4293      	cmp	r3, r2
 8105064:	d04d      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	4a85      	ldr	r2, [pc, #532]	; (8105284 <HAL_UART_IRQHandler+0x53c>)
 810506e:	4293      	cmp	r3, r2
 8105070:	d047      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	4a83      	ldr	r2, [pc, #524]	; (8105288 <HAL_UART_IRQHandler+0x540>)
 810507a:	4293      	cmp	r3, r2
 810507c:	d041      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	4a81      	ldr	r2, [pc, #516]	; (810528c <HAL_UART_IRQHandler+0x544>)
 8105086:	4293      	cmp	r3, r2
 8105088:	d03b      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	4a7f      	ldr	r2, [pc, #508]	; (8105290 <HAL_UART_IRQHandler+0x548>)
 8105092:	4293      	cmp	r3, r2
 8105094:	d035      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	4a7d      	ldr	r2, [pc, #500]	; (8105294 <HAL_UART_IRQHandler+0x54c>)
 810509e:	4293      	cmp	r3, r2
 81050a0:	d02f      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050a2:	687b      	ldr	r3, [r7, #4]
 81050a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	4a7b      	ldr	r2, [pc, #492]	; (8105298 <HAL_UART_IRQHandler+0x550>)
 81050aa:	4293      	cmp	r3, r2
 81050ac:	d029      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050b2:	681b      	ldr	r3, [r3, #0]
 81050b4:	4a79      	ldr	r2, [pc, #484]	; (810529c <HAL_UART_IRQHandler+0x554>)
 81050b6:	4293      	cmp	r3, r2
 81050b8:	d023      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	4a77      	ldr	r2, [pc, #476]	; (81052a0 <HAL_UART_IRQHandler+0x558>)
 81050c2:	4293      	cmp	r3, r2
 81050c4:	d01d      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	4a75      	ldr	r2, [pc, #468]	; (81052a4 <HAL_UART_IRQHandler+0x55c>)
 81050ce:	4293      	cmp	r3, r2
 81050d0:	d017      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	4a73      	ldr	r2, [pc, #460]	; (81052a8 <HAL_UART_IRQHandler+0x560>)
 81050da:	4293      	cmp	r3, r2
 81050dc:	d011      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050e2:	681b      	ldr	r3, [r3, #0]
 81050e4:	4a71      	ldr	r2, [pc, #452]	; (81052ac <HAL_UART_IRQHandler+0x564>)
 81050e6:	4293      	cmp	r3, r2
 81050e8:	d00b      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050ea:	687b      	ldr	r3, [r7, #4]
 81050ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050ee:	681b      	ldr	r3, [r3, #0]
 81050f0:	4a6f      	ldr	r2, [pc, #444]	; (81052b0 <HAL_UART_IRQHandler+0x568>)
 81050f2:	4293      	cmp	r3, r2
 81050f4:	d005      	beq.n	8105102 <HAL_UART_IRQHandler+0x3ba>
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	4a6d      	ldr	r2, [pc, #436]	; (81052b4 <HAL_UART_IRQHandler+0x56c>)
 81050fe:	4293      	cmp	r3, r2
 8105100:	d105      	bne.n	810510e <HAL_UART_IRQHandler+0x3c6>
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105106:	681b      	ldr	r3, [r3, #0]
 8105108:	685b      	ldr	r3, [r3, #4]
 810510a:	b29b      	uxth	r3, r3
 810510c:	e004      	b.n	8105118 <HAL_UART_IRQHandler+0x3d0>
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	685b      	ldr	r3, [r3, #4]
 8105116:	b29b      	uxth	r3, r3
 8105118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 810511c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8105120:	2b00      	cmp	r3, #0
 8105122:	f000 81a6 	beq.w	8105472 <HAL_UART_IRQHandler+0x72a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810512c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8105130:	429a      	cmp	r2, r3
 8105132:	f080 819e 	bcs.w	8105472 <HAL_UART_IRQHandler+0x72a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 810513c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105144:	69db      	ldr	r3, [r3, #28]
 8105146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810514a:	f000 8086 	beq.w	810525a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 810515a:	e853 3f00 	ldrex	r3, [r3]
 810515e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8105162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8105166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810516a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	461a      	mov	r2, r3
 8105174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8105178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810517c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105180:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8105184:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8105188:	e841 2300 	strex	r3, r2, [r1]
 810518c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8105190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8105194:	2b00      	cmp	r3, #0
 8105196:	d1da      	bne.n	810514e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	681b      	ldr	r3, [r3, #0]
 810519c:	3308      	adds	r3, #8
 810519e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81051a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81051a2:	e853 3f00 	ldrex	r3, [r3]
 81051a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 81051a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81051aa:	f023 0301 	bic.w	r3, r3, #1
 81051ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	3308      	adds	r3, #8
 81051b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 81051bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 81051c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81051c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 81051c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 81051c8:	e841 2300 	strex	r3, r2, [r1]
 81051cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 81051ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81051d0:	2b00      	cmp	r3, #0
 81051d2:	d1e1      	bne.n	8105198 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	3308      	adds	r3, #8
 81051da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81051dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81051de:	e853 3f00 	ldrex	r3, [r3]
 81051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 81051e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81051e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81051ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	3308      	adds	r3, #8
 81051f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 81051f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 81051fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81051fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 81051fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8105200:	e841 2300 	strex	r3, r2, [r1]
 8105204:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8105206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8105208:	2b00      	cmp	r3, #0
 810520a:	d1e3      	bne.n	81051d4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	2220      	movs	r2, #32
 8105210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	2200      	movs	r2, #0
 8105218:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810521a:	687b      	ldr	r3, [r7, #4]
 810521c:	681b      	ldr	r3, [r3, #0]
 810521e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105222:	e853 3f00 	ldrex	r3, [r3]
 8105226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8105228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810522a:	f023 0310 	bic.w	r3, r3, #16
 810522e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	681b      	ldr	r3, [r3, #0]
 8105236:	461a      	mov	r2, r3
 8105238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810523c:	65bb      	str	r3, [r7, #88]	; 0x58
 810523e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8105242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8105244:	e841 2300 	strex	r3, r2, [r1]
 8105248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 810524a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810524c:	2b00      	cmp	r3, #0
 810524e:	d1e4      	bne.n	810521a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105254:	4618      	mov	r0, r3
 8105256:	f7fc fb4b 	bl	81018f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105266:	b29b      	uxth	r3, r3
 8105268:	1ad3      	subs	r3, r2, r3
 810526a:	b29b      	uxth	r3, r3
 810526c:	4619      	mov	r1, r3
 810526e:	6878      	ldr	r0, [r7, #4]
 8105270:	f000 f91c 	bl	81054ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8105274:	e0fd      	b.n	8105472 <HAL_UART_IRQHandler+0x72a>
 8105276:	bf00      	nop
 8105278:	40020010 	.word	0x40020010
 810527c:	40020028 	.word	0x40020028
 8105280:	40020040 	.word	0x40020040
 8105284:	40020058 	.word	0x40020058
 8105288:	40020070 	.word	0x40020070
 810528c:	40020088 	.word	0x40020088
 8105290:	400200a0 	.word	0x400200a0
 8105294:	400200b8 	.word	0x400200b8
 8105298:	40020410 	.word	0x40020410
 810529c:	40020428 	.word	0x40020428
 81052a0:	40020440 	.word	0x40020440
 81052a4:	40020458 	.word	0x40020458
 81052a8:	40020470 	.word	0x40020470
 81052ac:	40020488 	.word	0x40020488
 81052b0:	400204a0 	.word	0x400204a0
 81052b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81052c4:	b29b      	uxth	r3, r3
 81052c6:	1ad3      	subs	r3, r2, r3
 81052c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81052d2:	b29b      	uxth	r3, r3
 81052d4:	2b00      	cmp	r3, #0
 81052d6:	f000 80ce 	beq.w	8105476 <HAL_UART_IRQHandler+0x72e>
          && (nb_rx_data > 0U))
 81052da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 81052de:	2b00      	cmp	r3, #0
 81052e0:	f000 80c9 	beq.w	8105476 <HAL_UART_IRQHandler+0x72e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	681b      	ldr	r3, [r3, #0]
 81052e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81052ec:	e853 3f00 	ldrex	r3, [r3]
 81052f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 81052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81052f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81052f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	461a      	mov	r2, r3
 8105302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8105306:	647b      	str	r3, [r7, #68]	; 0x44
 8105308:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810530a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810530c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810530e:	e841 2300 	strex	r3, r2, [r1]
 8105312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8105314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105316:	2b00      	cmp	r3, #0
 8105318:	d1e4      	bne.n	81052e4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	681b      	ldr	r3, [r3, #0]
 810531e:	3308      	adds	r3, #8
 8105320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105324:	e853 3f00 	ldrex	r3, [r3]
 8105328:	623b      	str	r3, [r7, #32]
   return(result);
 810532a:	6a3b      	ldr	r3, [r7, #32]
 810532c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105330:	f023 0301 	bic.w	r3, r3, #1
 8105334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	681b      	ldr	r3, [r3, #0]
 810533c:	3308      	adds	r3, #8
 810533e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8105342:	633a      	str	r2, [r7, #48]	; 0x30
 8105344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8105348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810534a:	e841 2300 	strex	r3, r2, [r1]
 810534e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8105350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105352:	2b00      	cmp	r3, #0
 8105354:	d1e1      	bne.n	810531a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	2220      	movs	r2, #32
 810535a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	2200      	movs	r2, #0
 8105362:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	2200      	movs	r2, #0
 8105368:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105370:	693b      	ldr	r3, [r7, #16]
 8105372:	e853 3f00 	ldrex	r3, [r3]
 8105376:	60fb      	str	r3, [r7, #12]
   return(result);
 8105378:	68fb      	ldr	r3, [r7, #12]
 810537a:	f023 0310 	bic.w	r3, r3, #16
 810537e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	461a      	mov	r2, r3
 8105388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810538c:	61fb      	str	r3, [r7, #28]
 810538e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105390:	69b9      	ldr	r1, [r7, #24]
 8105392:	69fa      	ldr	r2, [r7, #28]
 8105394:	e841 2300 	strex	r3, r2, [r1]
 8105398:	617b      	str	r3, [r7, #20]
   return(result);
 810539a:	697b      	ldr	r3, [r7, #20]
 810539c:	2b00      	cmp	r3, #0
 810539e:	d1e4      	bne.n	810536a <HAL_UART_IRQHandler+0x622>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 81053a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 81053a4:	4619      	mov	r1, r3
 81053a6:	6878      	ldr	r0, [r7, #4]
 81053a8:	f000 f880 	bl	81054ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 81053ac:	e063      	b.n	8105476 <HAL_UART_IRQHandler+0x72e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81053b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81053b6:	2b00      	cmp	r3, #0
 81053b8:	d00e      	beq.n	81053d8 <HAL_UART_IRQHandler+0x690>
 81053ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81053c2:	2b00      	cmp	r3, #0
 81053c4:	d008      	beq.n	81053d8 <HAL_UART_IRQHandler+0x690>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	681b      	ldr	r3, [r3, #0]
 81053ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 81053ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 81053d0:	6878      	ldr	r0, [r7, #4]
 81053d2:	f001 f83b 	bl	810644c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81053d6:	e051      	b.n	810547c <HAL_UART_IRQHandler+0x734>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81053dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	d014      	beq.n	810540e <HAL_UART_IRQHandler+0x6c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81053ec:	2b00      	cmp	r3, #0
 81053ee:	d105      	bne.n	81053fc <HAL_UART_IRQHandler+0x6b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81053f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81053f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81053f8:	2b00      	cmp	r3, #0
 81053fa:	d008      	beq.n	810540e <HAL_UART_IRQHandler+0x6c6>
  {
    if (huart->TxISR != NULL)
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105400:	2b00      	cmp	r3, #0
 8105402:	d03a      	beq.n	810547a <HAL_UART_IRQHandler+0x732>
    {
      huart->TxISR(huart);
 8105404:	687b      	ldr	r3, [r7, #4]
 8105406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105408:	6878      	ldr	r0, [r7, #4]
 810540a:	4798      	blx	r3
    }
    return;
 810540c:	e035      	b.n	810547a <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8105412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105416:	2b00      	cmp	r3, #0
 8105418:	d009      	beq.n	810542e <HAL_UART_IRQHandler+0x6e6>
 810541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105422:	2b00      	cmp	r3, #0
 8105424:	d003      	beq.n	810542e <HAL_UART_IRQHandler+0x6e6>
  {
    UART_EndTransmit_IT(huart);
 8105426:	6878      	ldr	r0, [r7, #4]
 8105428:	f000 ffe5 	bl	81063f6 <UART_EndTransmit_IT>
    return;
 810542c:	e026      	b.n	810547c <HAL_UART_IRQHandler+0x734>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8105432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105436:	2b00      	cmp	r3, #0
 8105438:	d009      	beq.n	810544e <HAL_UART_IRQHandler+0x706>
 810543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810543e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8105442:	2b00      	cmp	r3, #0
 8105444:	d003      	beq.n	810544e <HAL_UART_IRQHandler+0x706>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8105446:	6878      	ldr	r0, [r7, #4]
 8105448:	f001 f814 	bl	8106474 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810544c:	e016      	b.n	810547c <HAL_UART_IRQHandler+0x734>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8105452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105456:	2b00      	cmp	r3, #0
 8105458:	d010      	beq.n	810547c <HAL_UART_IRQHandler+0x734>
 810545a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810545e:	2b00      	cmp	r3, #0
 8105460:	da0c      	bge.n	810547c <HAL_UART_IRQHandler+0x734>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8105462:	6878      	ldr	r0, [r7, #4]
 8105464:	f000 fffc 	bl	8106460 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8105468:	e008      	b.n	810547c <HAL_UART_IRQHandler+0x734>
      return;
 810546a:	bf00      	nop
 810546c:	e006      	b.n	810547c <HAL_UART_IRQHandler+0x734>
    return;
 810546e:	bf00      	nop
 8105470:	e004      	b.n	810547c <HAL_UART_IRQHandler+0x734>
      return;
 8105472:	bf00      	nop
 8105474:	e002      	b.n	810547c <HAL_UART_IRQHandler+0x734>
      return;
 8105476:	bf00      	nop
 8105478:	e000      	b.n	810547c <HAL_UART_IRQHandler+0x734>
    return;
 810547a:	bf00      	nop
  }
}
 810547c:	37e8      	adds	r7, #232	; 0xe8
 810547e:	46bd      	mov	sp, r7
 8105480:	bd80      	pop	{r7, pc}
 8105482:	bf00      	nop

08105484 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8105484:	b480      	push	{r7}
 8105486:	b083      	sub	sp, #12
 8105488:	af00      	add	r7, sp, #0
 810548a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810548c:	bf00      	nop
 810548e:	370c      	adds	r7, #12
 8105490:	46bd      	mov	sp, r7
 8105492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105496:	4770      	bx	lr

08105498 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8105498:	b480      	push	{r7}
 810549a:	b083      	sub	sp, #12
 810549c:	af00      	add	r7, sp, #0
 810549e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 81054a0:	bf00      	nop
 81054a2:	370c      	adds	r7, #12
 81054a4:	46bd      	mov	sp, r7
 81054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054aa:	4770      	bx	lr

081054ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 81054ac:	b480      	push	{r7}
 81054ae:	b083      	sub	sp, #12
 81054b0:	af00      	add	r7, sp, #0
 81054b2:	6078      	str	r0, [r7, #4]
 81054b4:	460b      	mov	r3, r1
 81054b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 81054b8:	bf00      	nop
 81054ba:	370c      	adds	r7, #12
 81054bc:	46bd      	mov	sp, r7
 81054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054c2:	4770      	bx	lr

081054c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81054c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81054c8:	b092      	sub	sp, #72	; 0x48
 81054ca:	af00      	add	r7, sp, #0
 81054cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81054ce:	2300      	movs	r3, #0
 81054d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81054d4:	697b      	ldr	r3, [r7, #20]
 81054d6:	689a      	ldr	r2, [r3, #8]
 81054d8:	697b      	ldr	r3, [r7, #20]
 81054da:	691b      	ldr	r3, [r3, #16]
 81054dc:	431a      	orrs	r2, r3
 81054de:	697b      	ldr	r3, [r7, #20]
 81054e0:	695b      	ldr	r3, [r3, #20]
 81054e2:	431a      	orrs	r2, r3
 81054e4:	697b      	ldr	r3, [r7, #20]
 81054e6:	69db      	ldr	r3, [r3, #28]
 81054e8:	4313      	orrs	r3, r2
 81054ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81054ec:	697b      	ldr	r3, [r7, #20]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	681a      	ldr	r2, [r3, #0]
 81054f2:	4bbd      	ldr	r3, [pc, #756]	; (81057e8 <UART_SetConfig+0x324>)
 81054f4:	4013      	ands	r3, r2
 81054f6:	697a      	ldr	r2, [r7, #20]
 81054f8:	6812      	ldr	r2, [r2, #0]
 81054fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81054fc:	430b      	orrs	r3, r1
 81054fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105500:	697b      	ldr	r3, [r7, #20]
 8105502:	681b      	ldr	r3, [r3, #0]
 8105504:	685b      	ldr	r3, [r3, #4]
 8105506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810550a:	697b      	ldr	r3, [r7, #20]
 810550c:	68da      	ldr	r2, [r3, #12]
 810550e:	697b      	ldr	r3, [r7, #20]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	430a      	orrs	r2, r1
 8105514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105516:	697b      	ldr	r3, [r7, #20]
 8105518:	699b      	ldr	r3, [r3, #24]
 810551a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810551c:	697b      	ldr	r3, [r7, #20]
 810551e:	681b      	ldr	r3, [r3, #0]
 8105520:	4ab2      	ldr	r2, [pc, #712]	; (81057ec <UART_SetConfig+0x328>)
 8105522:	4293      	cmp	r3, r2
 8105524:	d004      	beq.n	8105530 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105526:	697b      	ldr	r3, [r7, #20]
 8105528:	6a1b      	ldr	r3, [r3, #32]
 810552a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810552c:	4313      	orrs	r3, r2
 810552e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105530:	697b      	ldr	r3, [r7, #20]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	689b      	ldr	r3, [r3, #8]
 8105536:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810553a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810553e:	697a      	ldr	r2, [r7, #20]
 8105540:	6812      	ldr	r2, [r2, #0]
 8105542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105544:	430b      	orrs	r3, r1
 8105546:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105548:	697b      	ldr	r3, [r7, #20]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810554e:	f023 010f 	bic.w	r1, r3, #15
 8105552:	697b      	ldr	r3, [r7, #20]
 8105554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105556:	697b      	ldr	r3, [r7, #20]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	430a      	orrs	r2, r1
 810555c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810555e:	697b      	ldr	r3, [r7, #20]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	4aa3      	ldr	r2, [pc, #652]	; (81057f0 <UART_SetConfig+0x32c>)
 8105564:	4293      	cmp	r3, r2
 8105566:	d177      	bne.n	8105658 <UART_SetConfig+0x194>
 8105568:	4ba2      	ldr	r3, [pc, #648]	; (81057f4 <UART_SetConfig+0x330>)
 810556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810556c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105570:	2b28      	cmp	r3, #40	; 0x28
 8105572:	d86d      	bhi.n	8105650 <UART_SetConfig+0x18c>
 8105574:	a201      	add	r2, pc, #4	; (adr r2, 810557c <UART_SetConfig+0xb8>)
 8105576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810557a:	bf00      	nop
 810557c:	08105621 	.word	0x08105621
 8105580:	08105651 	.word	0x08105651
 8105584:	08105651 	.word	0x08105651
 8105588:	08105651 	.word	0x08105651
 810558c:	08105651 	.word	0x08105651
 8105590:	08105651 	.word	0x08105651
 8105594:	08105651 	.word	0x08105651
 8105598:	08105651 	.word	0x08105651
 810559c:	08105629 	.word	0x08105629
 81055a0:	08105651 	.word	0x08105651
 81055a4:	08105651 	.word	0x08105651
 81055a8:	08105651 	.word	0x08105651
 81055ac:	08105651 	.word	0x08105651
 81055b0:	08105651 	.word	0x08105651
 81055b4:	08105651 	.word	0x08105651
 81055b8:	08105651 	.word	0x08105651
 81055bc:	08105631 	.word	0x08105631
 81055c0:	08105651 	.word	0x08105651
 81055c4:	08105651 	.word	0x08105651
 81055c8:	08105651 	.word	0x08105651
 81055cc:	08105651 	.word	0x08105651
 81055d0:	08105651 	.word	0x08105651
 81055d4:	08105651 	.word	0x08105651
 81055d8:	08105651 	.word	0x08105651
 81055dc:	08105639 	.word	0x08105639
 81055e0:	08105651 	.word	0x08105651
 81055e4:	08105651 	.word	0x08105651
 81055e8:	08105651 	.word	0x08105651
 81055ec:	08105651 	.word	0x08105651
 81055f0:	08105651 	.word	0x08105651
 81055f4:	08105651 	.word	0x08105651
 81055f8:	08105651 	.word	0x08105651
 81055fc:	08105641 	.word	0x08105641
 8105600:	08105651 	.word	0x08105651
 8105604:	08105651 	.word	0x08105651
 8105608:	08105651 	.word	0x08105651
 810560c:	08105651 	.word	0x08105651
 8105610:	08105651 	.word	0x08105651
 8105614:	08105651 	.word	0x08105651
 8105618:	08105651 	.word	0x08105651
 810561c:	08105649 	.word	0x08105649
 8105620:	2301      	movs	r3, #1
 8105622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105626:	e220      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105628:	2304      	movs	r3, #4
 810562a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810562e:	e21c      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105630:	2308      	movs	r3, #8
 8105632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105636:	e218      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105638:	2310      	movs	r3, #16
 810563a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810563e:	e214      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105640:	2320      	movs	r3, #32
 8105642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105646:	e210      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105648:	2340      	movs	r3, #64	; 0x40
 810564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810564e:	e20c      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105650:	2380      	movs	r3, #128	; 0x80
 8105652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105656:	e208      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105658:	697b      	ldr	r3, [r7, #20]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	4a66      	ldr	r2, [pc, #408]	; (81057f8 <UART_SetConfig+0x334>)
 810565e:	4293      	cmp	r3, r2
 8105660:	d130      	bne.n	81056c4 <UART_SetConfig+0x200>
 8105662:	4b64      	ldr	r3, [pc, #400]	; (81057f4 <UART_SetConfig+0x330>)
 8105664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105666:	f003 0307 	and.w	r3, r3, #7
 810566a:	2b05      	cmp	r3, #5
 810566c:	d826      	bhi.n	81056bc <UART_SetConfig+0x1f8>
 810566e:	a201      	add	r2, pc, #4	; (adr r2, 8105674 <UART_SetConfig+0x1b0>)
 8105670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105674:	0810568d 	.word	0x0810568d
 8105678:	08105695 	.word	0x08105695
 810567c:	0810569d 	.word	0x0810569d
 8105680:	081056a5 	.word	0x081056a5
 8105684:	081056ad 	.word	0x081056ad
 8105688:	081056b5 	.word	0x081056b5
 810568c:	2300      	movs	r3, #0
 810568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105692:	e1ea      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105694:	2304      	movs	r3, #4
 8105696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810569a:	e1e6      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810569c:	2308      	movs	r3, #8
 810569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056a2:	e1e2      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81056a4:	2310      	movs	r3, #16
 81056a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056aa:	e1de      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81056ac:	2320      	movs	r3, #32
 81056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056b2:	e1da      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81056b4:	2340      	movs	r3, #64	; 0x40
 81056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056ba:	e1d6      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81056bc:	2380      	movs	r3, #128	; 0x80
 81056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056c2:	e1d2      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81056c4:	697b      	ldr	r3, [r7, #20]
 81056c6:	681b      	ldr	r3, [r3, #0]
 81056c8:	4a4c      	ldr	r2, [pc, #304]	; (81057fc <UART_SetConfig+0x338>)
 81056ca:	4293      	cmp	r3, r2
 81056cc:	d130      	bne.n	8105730 <UART_SetConfig+0x26c>
 81056ce:	4b49      	ldr	r3, [pc, #292]	; (81057f4 <UART_SetConfig+0x330>)
 81056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81056d2:	f003 0307 	and.w	r3, r3, #7
 81056d6:	2b05      	cmp	r3, #5
 81056d8:	d826      	bhi.n	8105728 <UART_SetConfig+0x264>
 81056da:	a201      	add	r2, pc, #4	; (adr r2, 81056e0 <UART_SetConfig+0x21c>)
 81056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056e0:	081056f9 	.word	0x081056f9
 81056e4:	08105701 	.word	0x08105701
 81056e8:	08105709 	.word	0x08105709
 81056ec:	08105711 	.word	0x08105711
 81056f0:	08105719 	.word	0x08105719
 81056f4:	08105721 	.word	0x08105721
 81056f8:	2300      	movs	r3, #0
 81056fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056fe:	e1b4      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105700:	2304      	movs	r3, #4
 8105702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105706:	e1b0      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105708:	2308      	movs	r3, #8
 810570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810570e:	e1ac      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105710:	2310      	movs	r3, #16
 8105712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105716:	e1a8      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105718:	2320      	movs	r3, #32
 810571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810571e:	e1a4      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105720:	2340      	movs	r3, #64	; 0x40
 8105722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105726:	e1a0      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105728:	2380      	movs	r3, #128	; 0x80
 810572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810572e:	e19c      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105730:	697b      	ldr	r3, [r7, #20]
 8105732:	681b      	ldr	r3, [r3, #0]
 8105734:	4a32      	ldr	r2, [pc, #200]	; (8105800 <UART_SetConfig+0x33c>)
 8105736:	4293      	cmp	r3, r2
 8105738:	d130      	bne.n	810579c <UART_SetConfig+0x2d8>
 810573a:	4b2e      	ldr	r3, [pc, #184]	; (81057f4 <UART_SetConfig+0x330>)
 810573c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810573e:	f003 0307 	and.w	r3, r3, #7
 8105742:	2b05      	cmp	r3, #5
 8105744:	d826      	bhi.n	8105794 <UART_SetConfig+0x2d0>
 8105746:	a201      	add	r2, pc, #4	; (adr r2, 810574c <UART_SetConfig+0x288>)
 8105748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810574c:	08105765 	.word	0x08105765
 8105750:	0810576d 	.word	0x0810576d
 8105754:	08105775 	.word	0x08105775
 8105758:	0810577d 	.word	0x0810577d
 810575c:	08105785 	.word	0x08105785
 8105760:	0810578d 	.word	0x0810578d
 8105764:	2300      	movs	r3, #0
 8105766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810576a:	e17e      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810576c:	2304      	movs	r3, #4
 810576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105772:	e17a      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105774:	2308      	movs	r3, #8
 8105776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810577a:	e176      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810577c:	2310      	movs	r3, #16
 810577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105782:	e172      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105784:	2320      	movs	r3, #32
 8105786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810578a:	e16e      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810578c:	2340      	movs	r3, #64	; 0x40
 810578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105792:	e16a      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105794:	2380      	movs	r3, #128	; 0x80
 8105796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810579a:	e166      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810579c:	697b      	ldr	r3, [r7, #20]
 810579e:	681b      	ldr	r3, [r3, #0]
 81057a0:	4a18      	ldr	r2, [pc, #96]	; (8105804 <UART_SetConfig+0x340>)
 81057a2:	4293      	cmp	r3, r2
 81057a4:	d140      	bne.n	8105828 <UART_SetConfig+0x364>
 81057a6:	4b13      	ldr	r3, [pc, #76]	; (81057f4 <UART_SetConfig+0x330>)
 81057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81057aa:	f003 0307 	and.w	r3, r3, #7
 81057ae:	2b05      	cmp	r3, #5
 81057b0:	d836      	bhi.n	8105820 <UART_SetConfig+0x35c>
 81057b2:	a201      	add	r2, pc, #4	; (adr r2, 81057b8 <UART_SetConfig+0x2f4>)
 81057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057b8:	081057d1 	.word	0x081057d1
 81057bc:	081057d9 	.word	0x081057d9
 81057c0:	081057e1 	.word	0x081057e1
 81057c4:	08105809 	.word	0x08105809
 81057c8:	08105811 	.word	0x08105811
 81057cc:	08105819 	.word	0x08105819
 81057d0:	2300      	movs	r3, #0
 81057d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057d6:	e148      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81057d8:	2304      	movs	r3, #4
 81057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057de:	e144      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81057e0:	2308      	movs	r3, #8
 81057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057e6:	e140      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81057e8:	cfff69f3 	.word	0xcfff69f3
 81057ec:	58000c00 	.word	0x58000c00
 81057f0:	40011000 	.word	0x40011000
 81057f4:	58024400 	.word	0x58024400
 81057f8:	40004400 	.word	0x40004400
 81057fc:	40004800 	.word	0x40004800
 8105800:	40004c00 	.word	0x40004c00
 8105804:	40005000 	.word	0x40005000
 8105808:	2310      	movs	r3, #16
 810580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810580e:	e12c      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105810:	2320      	movs	r3, #32
 8105812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105816:	e128      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105818:	2340      	movs	r3, #64	; 0x40
 810581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810581e:	e124      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105820:	2380      	movs	r3, #128	; 0x80
 8105822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105826:	e120      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105828:	697b      	ldr	r3, [r7, #20]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	4acb      	ldr	r2, [pc, #812]	; (8105b5c <UART_SetConfig+0x698>)
 810582e:	4293      	cmp	r3, r2
 8105830:	d176      	bne.n	8105920 <UART_SetConfig+0x45c>
 8105832:	4bcb      	ldr	r3, [pc, #812]	; (8105b60 <UART_SetConfig+0x69c>)
 8105834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810583a:	2b28      	cmp	r3, #40	; 0x28
 810583c:	d86c      	bhi.n	8105918 <UART_SetConfig+0x454>
 810583e:	a201      	add	r2, pc, #4	; (adr r2, 8105844 <UART_SetConfig+0x380>)
 8105840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105844:	081058e9 	.word	0x081058e9
 8105848:	08105919 	.word	0x08105919
 810584c:	08105919 	.word	0x08105919
 8105850:	08105919 	.word	0x08105919
 8105854:	08105919 	.word	0x08105919
 8105858:	08105919 	.word	0x08105919
 810585c:	08105919 	.word	0x08105919
 8105860:	08105919 	.word	0x08105919
 8105864:	081058f1 	.word	0x081058f1
 8105868:	08105919 	.word	0x08105919
 810586c:	08105919 	.word	0x08105919
 8105870:	08105919 	.word	0x08105919
 8105874:	08105919 	.word	0x08105919
 8105878:	08105919 	.word	0x08105919
 810587c:	08105919 	.word	0x08105919
 8105880:	08105919 	.word	0x08105919
 8105884:	081058f9 	.word	0x081058f9
 8105888:	08105919 	.word	0x08105919
 810588c:	08105919 	.word	0x08105919
 8105890:	08105919 	.word	0x08105919
 8105894:	08105919 	.word	0x08105919
 8105898:	08105919 	.word	0x08105919
 810589c:	08105919 	.word	0x08105919
 81058a0:	08105919 	.word	0x08105919
 81058a4:	08105901 	.word	0x08105901
 81058a8:	08105919 	.word	0x08105919
 81058ac:	08105919 	.word	0x08105919
 81058b0:	08105919 	.word	0x08105919
 81058b4:	08105919 	.word	0x08105919
 81058b8:	08105919 	.word	0x08105919
 81058bc:	08105919 	.word	0x08105919
 81058c0:	08105919 	.word	0x08105919
 81058c4:	08105909 	.word	0x08105909
 81058c8:	08105919 	.word	0x08105919
 81058cc:	08105919 	.word	0x08105919
 81058d0:	08105919 	.word	0x08105919
 81058d4:	08105919 	.word	0x08105919
 81058d8:	08105919 	.word	0x08105919
 81058dc:	08105919 	.word	0x08105919
 81058e0:	08105919 	.word	0x08105919
 81058e4:	08105911 	.word	0x08105911
 81058e8:	2301      	movs	r3, #1
 81058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81058ee:	e0bc      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81058f0:	2304      	movs	r3, #4
 81058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81058f6:	e0b8      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81058f8:	2308      	movs	r3, #8
 81058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81058fe:	e0b4      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105900:	2310      	movs	r3, #16
 8105902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105906:	e0b0      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105908:	2320      	movs	r3, #32
 810590a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810590e:	e0ac      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105910:	2340      	movs	r3, #64	; 0x40
 8105912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105916:	e0a8      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105918:	2380      	movs	r3, #128	; 0x80
 810591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810591e:	e0a4      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105920:	697b      	ldr	r3, [r7, #20]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	4a8f      	ldr	r2, [pc, #572]	; (8105b64 <UART_SetConfig+0x6a0>)
 8105926:	4293      	cmp	r3, r2
 8105928:	d130      	bne.n	810598c <UART_SetConfig+0x4c8>
 810592a:	4b8d      	ldr	r3, [pc, #564]	; (8105b60 <UART_SetConfig+0x69c>)
 810592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810592e:	f003 0307 	and.w	r3, r3, #7
 8105932:	2b05      	cmp	r3, #5
 8105934:	d826      	bhi.n	8105984 <UART_SetConfig+0x4c0>
 8105936:	a201      	add	r2, pc, #4	; (adr r2, 810593c <UART_SetConfig+0x478>)
 8105938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810593c:	08105955 	.word	0x08105955
 8105940:	0810595d 	.word	0x0810595d
 8105944:	08105965 	.word	0x08105965
 8105948:	0810596d 	.word	0x0810596d
 810594c:	08105975 	.word	0x08105975
 8105950:	0810597d 	.word	0x0810597d
 8105954:	2300      	movs	r3, #0
 8105956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810595a:	e086      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810595c:	2304      	movs	r3, #4
 810595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105962:	e082      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105964:	2308      	movs	r3, #8
 8105966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810596a:	e07e      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810596c:	2310      	movs	r3, #16
 810596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105972:	e07a      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105974:	2320      	movs	r3, #32
 8105976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810597a:	e076      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810597c:	2340      	movs	r3, #64	; 0x40
 810597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105982:	e072      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105984:	2380      	movs	r3, #128	; 0x80
 8105986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810598a:	e06e      	b.n	8105a6a <UART_SetConfig+0x5a6>
 810598c:	697b      	ldr	r3, [r7, #20]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	4a75      	ldr	r2, [pc, #468]	; (8105b68 <UART_SetConfig+0x6a4>)
 8105992:	4293      	cmp	r3, r2
 8105994:	d130      	bne.n	81059f8 <UART_SetConfig+0x534>
 8105996:	4b72      	ldr	r3, [pc, #456]	; (8105b60 <UART_SetConfig+0x69c>)
 8105998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810599a:	f003 0307 	and.w	r3, r3, #7
 810599e:	2b05      	cmp	r3, #5
 81059a0:	d826      	bhi.n	81059f0 <UART_SetConfig+0x52c>
 81059a2:	a201      	add	r2, pc, #4	; (adr r2, 81059a8 <UART_SetConfig+0x4e4>)
 81059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059a8:	081059c1 	.word	0x081059c1
 81059ac:	081059c9 	.word	0x081059c9
 81059b0:	081059d1 	.word	0x081059d1
 81059b4:	081059d9 	.word	0x081059d9
 81059b8:	081059e1 	.word	0x081059e1
 81059bc:	081059e9 	.word	0x081059e9
 81059c0:	2300      	movs	r3, #0
 81059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059c6:	e050      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81059c8:	2304      	movs	r3, #4
 81059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059ce:	e04c      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81059d0:	2308      	movs	r3, #8
 81059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059d6:	e048      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81059d8:	2310      	movs	r3, #16
 81059da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059de:	e044      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81059e0:	2320      	movs	r3, #32
 81059e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059e6:	e040      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81059e8:	2340      	movs	r3, #64	; 0x40
 81059ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059ee:	e03c      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81059f0:	2380      	movs	r3, #128	; 0x80
 81059f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059f6:	e038      	b.n	8105a6a <UART_SetConfig+0x5a6>
 81059f8:	697b      	ldr	r3, [r7, #20]
 81059fa:	681b      	ldr	r3, [r3, #0]
 81059fc:	4a5b      	ldr	r2, [pc, #364]	; (8105b6c <UART_SetConfig+0x6a8>)
 81059fe:	4293      	cmp	r3, r2
 8105a00:	d130      	bne.n	8105a64 <UART_SetConfig+0x5a0>
 8105a02:	4b57      	ldr	r3, [pc, #348]	; (8105b60 <UART_SetConfig+0x69c>)
 8105a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a06:	f003 0307 	and.w	r3, r3, #7
 8105a0a:	2b05      	cmp	r3, #5
 8105a0c:	d826      	bhi.n	8105a5c <UART_SetConfig+0x598>
 8105a0e:	a201      	add	r2, pc, #4	; (adr r2, 8105a14 <UART_SetConfig+0x550>)
 8105a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a14:	08105a2d 	.word	0x08105a2d
 8105a18:	08105a35 	.word	0x08105a35
 8105a1c:	08105a3d 	.word	0x08105a3d
 8105a20:	08105a45 	.word	0x08105a45
 8105a24:	08105a4d 	.word	0x08105a4d
 8105a28:	08105a55 	.word	0x08105a55
 8105a2c:	2302      	movs	r3, #2
 8105a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a32:	e01a      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105a34:	2304      	movs	r3, #4
 8105a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a3a:	e016      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105a3c:	2308      	movs	r3, #8
 8105a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a42:	e012      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105a44:	2310      	movs	r3, #16
 8105a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a4a:	e00e      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105a4c:	2320      	movs	r3, #32
 8105a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a52:	e00a      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105a54:	2340      	movs	r3, #64	; 0x40
 8105a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a5a:	e006      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105a5c:	2380      	movs	r3, #128	; 0x80
 8105a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a62:	e002      	b.n	8105a6a <UART_SetConfig+0x5a6>
 8105a64:	2380      	movs	r3, #128	; 0x80
 8105a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105a6a:	697b      	ldr	r3, [r7, #20]
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	4a3f      	ldr	r2, [pc, #252]	; (8105b6c <UART_SetConfig+0x6a8>)
 8105a70:	4293      	cmp	r3, r2
 8105a72:	f040 80f8 	bne.w	8105c66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105a76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105a7a:	2b20      	cmp	r3, #32
 8105a7c:	dc46      	bgt.n	8105b0c <UART_SetConfig+0x648>
 8105a7e:	2b02      	cmp	r3, #2
 8105a80:	f2c0 8082 	blt.w	8105b88 <UART_SetConfig+0x6c4>
 8105a84:	3b02      	subs	r3, #2
 8105a86:	2b1e      	cmp	r3, #30
 8105a88:	d87e      	bhi.n	8105b88 <UART_SetConfig+0x6c4>
 8105a8a:	a201      	add	r2, pc, #4	; (adr r2, 8105a90 <UART_SetConfig+0x5cc>)
 8105a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a90:	08105b13 	.word	0x08105b13
 8105a94:	08105b89 	.word	0x08105b89
 8105a98:	08105b1b 	.word	0x08105b1b
 8105a9c:	08105b89 	.word	0x08105b89
 8105aa0:	08105b89 	.word	0x08105b89
 8105aa4:	08105b89 	.word	0x08105b89
 8105aa8:	08105b2b 	.word	0x08105b2b
 8105aac:	08105b89 	.word	0x08105b89
 8105ab0:	08105b89 	.word	0x08105b89
 8105ab4:	08105b89 	.word	0x08105b89
 8105ab8:	08105b89 	.word	0x08105b89
 8105abc:	08105b89 	.word	0x08105b89
 8105ac0:	08105b89 	.word	0x08105b89
 8105ac4:	08105b89 	.word	0x08105b89
 8105ac8:	08105b3b 	.word	0x08105b3b
 8105acc:	08105b89 	.word	0x08105b89
 8105ad0:	08105b89 	.word	0x08105b89
 8105ad4:	08105b89 	.word	0x08105b89
 8105ad8:	08105b89 	.word	0x08105b89
 8105adc:	08105b89 	.word	0x08105b89
 8105ae0:	08105b89 	.word	0x08105b89
 8105ae4:	08105b89 	.word	0x08105b89
 8105ae8:	08105b89 	.word	0x08105b89
 8105aec:	08105b89 	.word	0x08105b89
 8105af0:	08105b89 	.word	0x08105b89
 8105af4:	08105b89 	.word	0x08105b89
 8105af8:	08105b89 	.word	0x08105b89
 8105afc:	08105b89 	.word	0x08105b89
 8105b00:	08105b89 	.word	0x08105b89
 8105b04:	08105b89 	.word	0x08105b89
 8105b08:	08105b7b 	.word	0x08105b7b
 8105b0c:	2b40      	cmp	r3, #64	; 0x40
 8105b0e:	d037      	beq.n	8105b80 <UART_SetConfig+0x6bc>
 8105b10:	e03a      	b.n	8105b88 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105b12:	f7fd ffb9 	bl	8103a88 <HAL_RCCEx_GetD3PCLK1Freq>
 8105b16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105b18:	e03c      	b.n	8105b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105b1e:	4618      	mov	r0, r3
 8105b20:	f7fd ffc8 	bl	8103ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b28:	e034      	b.n	8105b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105b2a:	f107 0318 	add.w	r3, r7, #24
 8105b2e:	4618      	mov	r0, r3
 8105b30:	f7fe f914 	bl	8103d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105b34:	69fb      	ldr	r3, [r7, #28]
 8105b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b38:	e02c      	b.n	8105b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105b3a:	4b09      	ldr	r3, [pc, #36]	; (8105b60 <UART_SetConfig+0x69c>)
 8105b3c:	681b      	ldr	r3, [r3, #0]
 8105b3e:	f003 0320 	and.w	r3, r3, #32
 8105b42:	2b00      	cmp	r3, #0
 8105b44:	d016      	beq.n	8105b74 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105b46:	4b06      	ldr	r3, [pc, #24]	; (8105b60 <UART_SetConfig+0x69c>)
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	08db      	lsrs	r3, r3, #3
 8105b4c:	f003 0303 	and.w	r3, r3, #3
 8105b50:	4a07      	ldr	r2, [pc, #28]	; (8105b70 <UART_SetConfig+0x6ac>)
 8105b52:	fa22 f303 	lsr.w	r3, r2, r3
 8105b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105b58:	e01c      	b.n	8105b94 <UART_SetConfig+0x6d0>
 8105b5a:	bf00      	nop
 8105b5c:	40011400 	.word	0x40011400
 8105b60:	58024400 	.word	0x58024400
 8105b64:	40007800 	.word	0x40007800
 8105b68:	40007c00 	.word	0x40007c00
 8105b6c:	58000c00 	.word	0x58000c00
 8105b70:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105b74:	4b9d      	ldr	r3, [pc, #628]	; (8105dec <UART_SetConfig+0x928>)
 8105b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b78:	e00c      	b.n	8105b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105b7a:	4b9d      	ldr	r3, [pc, #628]	; (8105df0 <UART_SetConfig+0x92c>)
 8105b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b7e:	e009      	b.n	8105b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b86:	e005      	b.n	8105b94 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105b88:	2300      	movs	r3, #0
 8105b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105b8c:	2301      	movs	r3, #1
 8105b8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105b92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105b96:	2b00      	cmp	r3, #0
 8105b98:	f000 81de 	beq.w	8105f58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105b9c:	697b      	ldr	r3, [r7, #20]
 8105b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ba0:	4a94      	ldr	r2, [pc, #592]	; (8105df4 <UART_SetConfig+0x930>)
 8105ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105ba6:	461a      	mov	r2, r3
 8105ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8105bae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105bb0:	697b      	ldr	r3, [r7, #20]
 8105bb2:	685a      	ldr	r2, [r3, #4]
 8105bb4:	4613      	mov	r3, r2
 8105bb6:	005b      	lsls	r3, r3, #1
 8105bb8:	4413      	add	r3, r2
 8105bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105bbc:	429a      	cmp	r2, r3
 8105bbe:	d305      	bcc.n	8105bcc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105bc0:	697b      	ldr	r3, [r7, #20]
 8105bc2:	685b      	ldr	r3, [r3, #4]
 8105bc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105bc8:	429a      	cmp	r2, r3
 8105bca:	d903      	bls.n	8105bd4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8105bcc:	2301      	movs	r3, #1
 8105bce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105bd2:	e1c1      	b.n	8105f58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105bd6:	2200      	movs	r2, #0
 8105bd8:	60bb      	str	r3, [r7, #8]
 8105bda:	60fa      	str	r2, [r7, #12]
 8105bdc:	697b      	ldr	r3, [r7, #20]
 8105bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105be0:	4a84      	ldr	r2, [pc, #528]	; (8105df4 <UART_SetConfig+0x930>)
 8105be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105be6:	b29b      	uxth	r3, r3
 8105be8:	2200      	movs	r2, #0
 8105bea:	603b      	str	r3, [r7, #0]
 8105bec:	607a      	str	r2, [r7, #4]
 8105bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8105bf6:	f7fa ff5d 	bl	8100ab4 <__aeabi_uldivmod>
 8105bfa:	4602      	mov	r2, r0
 8105bfc:	460b      	mov	r3, r1
 8105bfe:	4610      	mov	r0, r2
 8105c00:	4619      	mov	r1, r3
 8105c02:	f04f 0200 	mov.w	r2, #0
 8105c06:	f04f 0300 	mov.w	r3, #0
 8105c0a:	020b      	lsls	r3, r1, #8
 8105c0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105c10:	0202      	lsls	r2, r0, #8
 8105c12:	6979      	ldr	r1, [r7, #20]
 8105c14:	6849      	ldr	r1, [r1, #4]
 8105c16:	0849      	lsrs	r1, r1, #1
 8105c18:	2000      	movs	r0, #0
 8105c1a:	460c      	mov	r4, r1
 8105c1c:	4605      	mov	r5, r0
 8105c1e:	eb12 0804 	adds.w	r8, r2, r4
 8105c22:	eb43 0905 	adc.w	r9, r3, r5
 8105c26:	697b      	ldr	r3, [r7, #20]
 8105c28:	685b      	ldr	r3, [r3, #4]
 8105c2a:	2200      	movs	r2, #0
 8105c2c:	469a      	mov	sl, r3
 8105c2e:	4693      	mov	fp, r2
 8105c30:	4652      	mov	r2, sl
 8105c32:	465b      	mov	r3, fp
 8105c34:	4640      	mov	r0, r8
 8105c36:	4649      	mov	r1, r9
 8105c38:	f7fa ff3c 	bl	8100ab4 <__aeabi_uldivmod>
 8105c3c:	4602      	mov	r2, r0
 8105c3e:	460b      	mov	r3, r1
 8105c40:	4613      	mov	r3, r2
 8105c42:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105c4a:	d308      	bcc.n	8105c5e <UART_SetConfig+0x79a>
 8105c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105c52:	d204      	bcs.n	8105c5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8105c54:	697b      	ldr	r3, [r7, #20]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105c5a:	60da      	str	r2, [r3, #12]
 8105c5c:	e17c      	b.n	8105f58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8105c5e:	2301      	movs	r3, #1
 8105c60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105c64:	e178      	b.n	8105f58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105c66:	697b      	ldr	r3, [r7, #20]
 8105c68:	69db      	ldr	r3, [r3, #28]
 8105c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105c6e:	f040 80c5 	bne.w	8105dfc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8105c72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105c76:	2b20      	cmp	r3, #32
 8105c78:	dc48      	bgt.n	8105d0c <UART_SetConfig+0x848>
 8105c7a:	2b00      	cmp	r3, #0
 8105c7c:	db7b      	blt.n	8105d76 <UART_SetConfig+0x8b2>
 8105c7e:	2b20      	cmp	r3, #32
 8105c80:	d879      	bhi.n	8105d76 <UART_SetConfig+0x8b2>
 8105c82:	a201      	add	r2, pc, #4	; (adr r2, 8105c88 <UART_SetConfig+0x7c4>)
 8105c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c88:	08105d13 	.word	0x08105d13
 8105c8c:	08105d1b 	.word	0x08105d1b
 8105c90:	08105d77 	.word	0x08105d77
 8105c94:	08105d77 	.word	0x08105d77
 8105c98:	08105d23 	.word	0x08105d23
 8105c9c:	08105d77 	.word	0x08105d77
 8105ca0:	08105d77 	.word	0x08105d77
 8105ca4:	08105d77 	.word	0x08105d77
 8105ca8:	08105d33 	.word	0x08105d33
 8105cac:	08105d77 	.word	0x08105d77
 8105cb0:	08105d77 	.word	0x08105d77
 8105cb4:	08105d77 	.word	0x08105d77
 8105cb8:	08105d77 	.word	0x08105d77
 8105cbc:	08105d77 	.word	0x08105d77
 8105cc0:	08105d77 	.word	0x08105d77
 8105cc4:	08105d77 	.word	0x08105d77
 8105cc8:	08105d43 	.word	0x08105d43
 8105ccc:	08105d77 	.word	0x08105d77
 8105cd0:	08105d77 	.word	0x08105d77
 8105cd4:	08105d77 	.word	0x08105d77
 8105cd8:	08105d77 	.word	0x08105d77
 8105cdc:	08105d77 	.word	0x08105d77
 8105ce0:	08105d77 	.word	0x08105d77
 8105ce4:	08105d77 	.word	0x08105d77
 8105ce8:	08105d77 	.word	0x08105d77
 8105cec:	08105d77 	.word	0x08105d77
 8105cf0:	08105d77 	.word	0x08105d77
 8105cf4:	08105d77 	.word	0x08105d77
 8105cf8:	08105d77 	.word	0x08105d77
 8105cfc:	08105d77 	.word	0x08105d77
 8105d00:	08105d77 	.word	0x08105d77
 8105d04:	08105d77 	.word	0x08105d77
 8105d08:	08105d69 	.word	0x08105d69
 8105d0c:	2b40      	cmp	r3, #64	; 0x40
 8105d0e:	d02e      	beq.n	8105d6e <UART_SetConfig+0x8aa>
 8105d10:	e031      	b.n	8105d76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105d12:	f7fc ff47 	bl	8102ba4 <HAL_RCC_GetPCLK1Freq>
 8105d16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105d18:	e033      	b.n	8105d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105d1a:	f7fc ff59 	bl	8102bd0 <HAL_RCC_GetPCLK2Freq>
 8105d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105d20:	e02f      	b.n	8105d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105d26:	4618      	mov	r0, r3
 8105d28:	f7fd fec4 	bl	8103ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d30:	e027      	b.n	8105d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d32:	f107 0318 	add.w	r3, r7, #24
 8105d36:	4618      	mov	r0, r3
 8105d38:	f7fe f810 	bl	8103d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105d3c:	69fb      	ldr	r3, [r7, #28]
 8105d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d40:	e01f      	b.n	8105d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105d42:	4b2d      	ldr	r3, [pc, #180]	; (8105df8 <UART_SetConfig+0x934>)
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	f003 0320 	and.w	r3, r3, #32
 8105d4a:	2b00      	cmp	r3, #0
 8105d4c:	d009      	beq.n	8105d62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105d4e:	4b2a      	ldr	r3, [pc, #168]	; (8105df8 <UART_SetConfig+0x934>)
 8105d50:	681b      	ldr	r3, [r3, #0]
 8105d52:	08db      	lsrs	r3, r3, #3
 8105d54:	f003 0303 	and.w	r3, r3, #3
 8105d58:	4a24      	ldr	r2, [pc, #144]	; (8105dec <UART_SetConfig+0x928>)
 8105d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8105d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105d60:	e00f      	b.n	8105d82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8105d62:	4b22      	ldr	r3, [pc, #136]	; (8105dec <UART_SetConfig+0x928>)
 8105d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d66:	e00c      	b.n	8105d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105d68:	4b21      	ldr	r3, [pc, #132]	; (8105df0 <UART_SetConfig+0x92c>)
 8105d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d6c:	e009      	b.n	8105d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d74:	e005      	b.n	8105d82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8105d76:	2300      	movs	r3, #0
 8105d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105d7a:	2301      	movs	r3, #1
 8105d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8105d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105d84:	2b00      	cmp	r3, #0
 8105d86:	f000 80e7 	beq.w	8105f58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105d8a:	697b      	ldr	r3, [r7, #20]
 8105d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d8e:	4a19      	ldr	r2, [pc, #100]	; (8105df4 <UART_SetConfig+0x930>)
 8105d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105d94:	461a      	mov	r2, r3
 8105d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8105d9c:	005a      	lsls	r2, r3, #1
 8105d9e:	697b      	ldr	r3, [r7, #20]
 8105da0:	685b      	ldr	r3, [r3, #4]
 8105da2:	085b      	lsrs	r3, r3, #1
 8105da4:	441a      	add	r2, r3
 8105da6:	697b      	ldr	r3, [r7, #20]
 8105da8:	685b      	ldr	r3, [r3, #4]
 8105daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8105dae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105db2:	2b0f      	cmp	r3, #15
 8105db4:	d916      	bls.n	8105de4 <UART_SetConfig+0x920>
 8105db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105dbc:	d212      	bcs.n	8105de4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dc0:	b29b      	uxth	r3, r3
 8105dc2:	f023 030f 	bic.w	r3, r3, #15
 8105dc6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dca:	085b      	lsrs	r3, r3, #1
 8105dcc:	b29b      	uxth	r3, r3
 8105dce:	f003 0307 	and.w	r3, r3, #7
 8105dd2:	b29a      	uxth	r2, r3
 8105dd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8105dd6:	4313      	orrs	r3, r2
 8105dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8105dda:	697b      	ldr	r3, [r7, #20]
 8105ddc:	681b      	ldr	r3, [r3, #0]
 8105dde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8105de0:	60da      	str	r2, [r3, #12]
 8105de2:	e0b9      	b.n	8105f58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105de4:	2301      	movs	r3, #1
 8105de6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105dea:	e0b5      	b.n	8105f58 <UART_SetConfig+0xa94>
 8105dec:	03d09000 	.word	0x03d09000
 8105df0:	003d0900 	.word	0x003d0900
 8105df4:	08106710 	.word	0x08106710
 8105df8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8105dfc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105e00:	2b20      	cmp	r3, #32
 8105e02:	dc49      	bgt.n	8105e98 <UART_SetConfig+0x9d4>
 8105e04:	2b00      	cmp	r3, #0
 8105e06:	db7c      	blt.n	8105f02 <UART_SetConfig+0xa3e>
 8105e08:	2b20      	cmp	r3, #32
 8105e0a:	d87a      	bhi.n	8105f02 <UART_SetConfig+0xa3e>
 8105e0c:	a201      	add	r2, pc, #4	; (adr r2, 8105e14 <UART_SetConfig+0x950>)
 8105e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e12:	bf00      	nop
 8105e14:	08105e9f 	.word	0x08105e9f
 8105e18:	08105ea7 	.word	0x08105ea7
 8105e1c:	08105f03 	.word	0x08105f03
 8105e20:	08105f03 	.word	0x08105f03
 8105e24:	08105eaf 	.word	0x08105eaf
 8105e28:	08105f03 	.word	0x08105f03
 8105e2c:	08105f03 	.word	0x08105f03
 8105e30:	08105f03 	.word	0x08105f03
 8105e34:	08105ebf 	.word	0x08105ebf
 8105e38:	08105f03 	.word	0x08105f03
 8105e3c:	08105f03 	.word	0x08105f03
 8105e40:	08105f03 	.word	0x08105f03
 8105e44:	08105f03 	.word	0x08105f03
 8105e48:	08105f03 	.word	0x08105f03
 8105e4c:	08105f03 	.word	0x08105f03
 8105e50:	08105f03 	.word	0x08105f03
 8105e54:	08105ecf 	.word	0x08105ecf
 8105e58:	08105f03 	.word	0x08105f03
 8105e5c:	08105f03 	.word	0x08105f03
 8105e60:	08105f03 	.word	0x08105f03
 8105e64:	08105f03 	.word	0x08105f03
 8105e68:	08105f03 	.word	0x08105f03
 8105e6c:	08105f03 	.word	0x08105f03
 8105e70:	08105f03 	.word	0x08105f03
 8105e74:	08105f03 	.word	0x08105f03
 8105e78:	08105f03 	.word	0x08105f03
 8105e7c:	08105f03 	.word	0x08105f03
 8105e80:	08105f03 	.word	0x08105f03
 8105e84:	08105f03 	.word	0x08105f03
 8105e88:	08105f03 	.word	0x08105f03
 8105e8c:	08105f03 	.word	0x08105f03
 8105e90:	08105f03 	.word	0x08105f03
 8105e94:	08105ef5 	.word	0x08105ef5
 8105e98:	2b40      	cmp	r3, #64	; 0x40
 8105e9a:	d02e      	beq.n	8105efa <UART_SetConfig+0xa36>
 8105e9c:	e031      	b.n	8105f02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105e9e:	f7fc fe81 	bl	8102ba4 <HAL_RCC_GetPCLK1Freq>
 8105ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105ea4:	e033      	b.n	8105f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105ea6:	f7fc fe93 	bl	8102bd0 <HAL_RCC_GetPCLK2Freq>
 8105eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105eac:	e02f      	b.n	8105f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105eb2:	4618      	mov	r0, r3
 8105eb4:	f7fd fdfe 	bl	8103ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ebc:	e027      	b.n	8105f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105ebe:	f107 0318 	add.w	r3, r7, #24
 8105ec2:	4618      	mov	r0, r3
 8105ec4:	f7fd ff4a 	bl	8103d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105ec8:	69fb      	ldr	r3, [r7, #28]
 8105eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ecc:	e01f      	b.n	8105f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ece:	4b2d      	ldr	r3, [pc, #180]	; (8105f84 <UART_SetConfig+0xac0>)
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	f003 0320 	and.w	r3, r3, #32
 8105ed6:	2b00      	cmp	r3, #0
 8105ed8:	d009      	beq.n	8105eee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105eda:	4b2a      	ldr	r3, [pc, #168]	; (8105f84 <UART_SetConfig+0xac0>)
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	08db      	lsrs	r3, r3, #3
 8105ee0:	f003 0303 	and.w	r3, r3, #3
 8105ee4:	4a28      	ldr	r2, [pc, #160]	; (8105f88 <UART_SetConfig+0xac4>)
 8105ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8105eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105eec:	e00f      	b.n	8105f0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8105eee:	4b26      	ldr	r3, [pc, #152]	; (8105f88 <UART_SetConfig+0xac4>)
 8105ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ef2:	e00c      	b.n	8105f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105ef4:	4b25      	ldr	r3, [pc, #148]	; (8105f8c <UART_SetConfig+0xac8>)
 8105ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ef8:	e009      	b.n	8105f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f00:	e005      	b.n	8105f0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8105f02:	2300      	movs	r3, #0
 8105f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105f06:	2301      	movs	r3, #1
 8105f08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105f0c:	bf00      	nop
    }

    if (pclk != 0U)
 8105f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	d021      	beq.n	8105f58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105f14:	697b      	ldr	r3, [r7, #20]
 8105f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f18:	4a1d      	ldr	r2, [pc, #116]	; (8105f90 <UART_SetConfig+0xacc>)
 8105f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105f1e:	461a      	mov	r2, r3
 8105f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8105f26:	697b      	ldr	r3, [r7, #20]
 8105f28:	685b      	ldr	r3, [r3, #4]
 8105f2a:	085b      	lsrs	r3, r3, #1
 8105f2c:	441a      	add	r2, r3
 8105f2e:	697b      	ldr	r3, [r7, #20]
 8105f30:	685b      	ldr	r3, [r3, #4]
 8105f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8105f36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f3a:	2b0f      	cmp	r3, #15
 8105f3c:	d909      	bls.n	8105f52 <UART_SetConfig+0xa8e>
 8105f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105f44:	d205      	bcs.n	8105f52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f48:	b29a      	uxth	r2, r3
 8105f4a:	697b      	ldr	r3, [r7, #20]
 8105f4c:	681b      	ldr	r3, [r3, #0]
 8105f4e:	60da      	str	r2, [r3, #12]
 8105f50:	e002      	b.n	8105f58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105f52:	2301      	movs	r3, #1
 8105f54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105f58:	697b      	ldr	r3, [r7, #20]
 8105f5a:	2201      	movs	r2, #1
 8105f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105f60:	697b      	ldr	r3, [r7, #20]
 8105f62:	2201      	movs	r2, #1
 8105f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105f68:	697b      	ldr	r3, [r7, #20]
 8105f6a:	2200      	movs	r2, #0
 8105f6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8105f6e:	697b      	ldr	r3, [r7, #20]
 8105f70:	2200      	movs	r2, #0
 8105f72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8105f74:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8105f78:	4618      	mov	r0, r3
 8105f7a:	3748      	adds	r7, #72	; 0x48
 8105f7c:	46bd      	mov	sp, r7
 8105f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105f82:	bf00      	nop
 8105f84:	58024400 	.word	0x58024400
 8105f88:	03d09000 	.word	0x03d09000
 8105f8c:	003d0900 	.word	0x003d0900
 8105f90:	08106710 	.word	0x08106710

08105f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105f94:	b480      	push	{r7}
 8105f96:	b083      	sub	sp, #12
 8105f98:	af00      	add	r7, sp, #0
 8105f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fa0:	f003 0301 	and.w	r3, r3, #1
 8105fa4:	2b00      	cmp	r3, #0
 8105fa6:	d00a      	beq.n	8105fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	685b      	ldr	r3, [r3, #4]
 8105fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	681b      	ldr	r3, [r3, #0]
 8105fba:	430a      	orrs	r2, r1
 8105fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fc2:	f003 0302 	and.w	r3, r3, #2
 8105fc6:	2b00      	cmp	r3, #0
 8105fc8:	d00a      	beq.n	8105fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	685b      	ldr	r3, [r3, #4]
 8105fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	430a      	orrs	r2, r1
 8105fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fe4:	f003 0304 	and.w	r3, r3, #4
 8105fe8:	2b00      	cmp	r3, #0
 8105fea:	d00a      	beq.n	8106002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	685b      	ldr	r3, [r3, #4]
 8105ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	430a      	orrs	r2, r1
 8106000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106006:	f003 0308 	and.w	r3, r3, #8
 810600a:	2b00      	cmp	r3, #0
 810600c:	d00a      	beq.n	8106024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	685b      	ldr	r3, [r3, #4]
 8106014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	430a      	orrs	r2, r1
 8106022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106028:	f003 0310 	and.w	r3, r3, #16
 810602c:	2b00      	cmp	r3, #0
 810602e:	d00a      	beq.n	8106046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	681b      	ldr	r3, [r3, #0]
 8106034:	689b      	ldr	r3, [r3, #8]
 8106036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810603e:	687b      	ldr	r3, [r7, #4]
 8106040:	681b      	ldr	r3, [r3, #0]
 8106042:	430a      	orrs	r2, r1
 8106044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810604a:	f003 0320 	and.w	r3, r3, #32
 810604e:	2b00      	cmp	r3, #0
 8106050:	d00a      	beq.n	8106068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	689b      	ldr	r3, [r3, #8]
 8106058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8106060:	687b      	ldr	r3, [r7, #4]
 8106062:	681b      	ldr	r3, [r3, #0]
 8106064:	430a      	orrs	r2, r1
 8106066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106070:	2b00      	cmp	r3, #0
 8106072:	d01a      	beq.n	81060aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	681b      	ldr	r3, [r3, #0]
 8106078:	685b      	ldr	r3, [r3, #4]
 810607a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	681b      	ldr	r3, [r3, #0]
 8106086:	430a      	orrs	r2, r1
 8106088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810608e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106092:	d10a      	bne.n	81060aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	681b      	ldr	r3, [r3, #0]
 8106098:	685b      	ldr	r3, [r3, #4]
 810609a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810609e:	687b      	ldr	r3, [r7, #4]
 81060a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	681b      	ldr	r3, [r3, #0]
 81060a6:	430a      	orrs	r2, r1
 81060a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81060b2:	2b00      	cmp	r3, #0
 81060b4:	d00a      	beq.n	81060cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	681b      	ldr	r3, [r3, #0]
 81060ba:	685b      	ldr	r3, [r3, #4]
 81060bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	430a      	orrs	r2, r1
 81060ca:	605a      	str	r2, [r3, #4]
  }
}
 81060cc:	bf00      	nop
 81060ce:	370c      	adds	r7, #12
 81060d0:	46bd      	mov	sp, r7
 81060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060d6:	4770      	bx	lr

081060d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81060d8:	b580      	push	{r7, lr}
 81060da:	b086      	sub	sp, #24
 81060dc:	af02      	add	r7, sp, #8
 81060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	2200      	movs	r2, #0
 81060e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81060e8:	f7fb fad2 	bl	8101690 <HAL_GetTick>
 81060ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	681b      	ldr	r3, [r3, #0]
 81060f2:	681b      	ldr	r3, [r3, #0]
 81060f4:	f003 0308 	and.w	r3, r3, #8
 81060f8:	2b08      	cmp	r3, #8
 81060fa:	d10e      	bne.n	810611a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81060fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106100:	9300      	str	r3, [sp, #0]
 8106102:	68fb      	ldr	r3, [r7, #12]
 8106104:	2200      	movs	r2, #0
 8106106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810610a:	6878      	ldr	r0, [r7, #4]
 810610c:	f000 f82f 	bl	810616e <UART_WaitOnFlagUntilTimeout>
 8106110:	4603      	mov	r3, r0
 8106112:	2b00      	cmp	r3, #0
 8106114:	d001      	beq.n	810611a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106116:	2303      	movs	r3, #3
 8106118:	e025      	b.n	8106166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	681b      	ldr	r3, [r3, #0]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	f003 0304 	and.w	r3, r3, #4
 8106124:	2b04      	cmp	r3, #4
 8106126:	d10e      	bne.n	8106146 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810612c:	9300      	str	r3, [sp, #0]
 810612e:	68fb      	ldr	r3, [r7, #12]
 8106130:	2200      	movs	r2, #0
 8106132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106136:	6878      	ldr	r0, [r7, #4]
 8106138:	f000 f819 	bl	810616e <UART_WaitOnFlagUntilTimeout>
 810613c:	4603      	mov	r3, r0
 810613e:	2b00      	cmp	r3, #0
 8106140:	d001      	beq.n	8106146 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106142:	2303      	movs	r3, #3
 8106144:	e00f      	b.n	8106166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	2220      	movs	r2, #32
 810614a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	2220      	movs	r2, #32
 8106152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	2200      	movs	r2, #0
 810615a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	2200      	movs	r2, #0
 8106160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106164:	2300      	movs	r3, #0
}
 8106166:	4618      	mov	r0, r3
 8106168:	3710      	adds	r7, #16
 810616a:	46bd      	mov	sp, r7
 810616c:	bd80      	pop	{r7, pc}

0810616e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810616e:	b580      	push	{r7, lr}
 8106170:	b09c      	sub	sp, #112	; 0x70
 8106172:	af00      	add	r7, sp, #0
 8106174:	60f8      	str	r0, [r7, #12]
 8106176:	60b9      	str	r1, [r7, #8]
 8106178:	603b      	str	r3, [r7, #0]
 810617a:	4613      	mov	r3, r2
 810617c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810617e:	e0a9      	b.n	81062d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106186:	f000 80a5 	beq.w	81062d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810618a:	f7fb fa81 	bl	8101690 <HAL_GetTick>
 810618e:	4602      	mov	r2, r0
 8106190:	683b      	ldr	r3, [r7, #0]
 8106192:	1ad3      	subs	r3, r2, r3
 8106194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8106196:	429a      	cmp	r2, r3
 8106198:	d302      	bcc.n	81061a0 <UART_WaitOnFlagUntilTimeout+0x32>
 810619a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810619c:	2b00      	cmp	r3, #0
 810619e:	d140      	bne.n	8106222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81061a0:	68fb      	ldr	r3, [r7, #12]
 81061a2:	681b      	ldr	r3, [r3, #0]
 81061a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81061a8:	e853 3f00 	ldrex	r3, [r3]
 81061ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 81061ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81061b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81061b4:	667b      	str	r3, [r7, #100]	; 0x64
 81061b6:	68fb      	ldr	r3, [r7, #12]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	461a      	mov	r2, r3
 81061bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81061be:	65fb      	str	r3, [r7, #92]	; 0x5c
 81061c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81061c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81061c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81061c6:	e841 2300 	strex	r3, r2, [r1]
 81061ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 81061cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81061ce:	2b00      	cmp	r3, #0
 81061d0:	d1e6      	bne.n	81061a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81061d2:	68fb      	ldr	r3, [r7, #12]
 81061d4:	681b      	ldr	r3, [r3, #0]
 81061d6:	3308      	adds	r3, #8
 81061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81061dc:	e853 3f00 	ldrex	r3, [r3]
 81061e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061e4:	f023 0301 	bic.w	r3, r3, #1
 81061e8:	663b      	str	r3, [r7, #96]	; 0x60
 81061ea:	68fb      	ldr	r3, [r7, #12]
 81061ec:	681b      	ldr	r3, [r3, #0]
 81061ee:	3308      	adds	r3, #8
 81061f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81061f2:	64ba      	str	r2, [r7, #72]	; 0x48
 81061f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81061f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81061f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81061fa:	e841 2300 	strex	r3, r2, [r1]
 81061fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8106200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106202:	2b00      	cmp	r3, #0
 8106204:	d1e5      	bne.n	81061d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8106206:	68fb      	ldr	r3, [r7, #12]
 8106208:	2220      	movs	r2, #32
 810620a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810620e:	68fb      	ldr	r3, [r7, #12]
 8106210:	2220      	movs	r2, #32
 8106212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106216:	68fb      	ldr	r3, [r7, #12]
 8106218:	2200      	movs	r2, #0
 810621a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810621e:	2303      	movs	r3, #3
 8106220:	e069      	b.n	81062f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8106222:	68fb      	ldr	r3, [r7, #12]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	681b      	ldr	r3, [r3, #0]
 8106228:	f003 0304 	and.w	r3, r3, #4
 810622c:	2b00      	cmp	r3, #0
 810622e:	d051      	beq.n	81062d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106230:	68fb      	ldr	r3, [r7, #12]
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	69db      	ldr	r3, [r3, #28]
 8106236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810623a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810623e:	d149      	bne.n	81062d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106240:	68fb      	ldr	r3, [r7, #12]
 8106242:	681b      	ldr	r3, [r3, #0]
 8106244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810624a:	68fb      	ldr	r3, [r7, #12]
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106252:	e853 3f00 	ldrex	r3, [r3]
 8106256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810625a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810625e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8106260:	68fb      	ldr	r3, [r7, #12]
 8106262:	681b      	ldr	r3, [r3, #0]
 8106264:	461a      	mov	r2, r3
 8106266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8106268:	637b      	str	r3, [r7, #52]	; 0x34
 810626a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810626c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810626e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106270:	e841 2300 	strex	r3, r2, [r1]
 8106274:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106278:	2b00      	cmp	r3, #0
 810627a:	d1e6      	bne.n	810624a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810627c:	68fb      	ldr	r3, [r7, #12]
 810627e:	681b      	ldr	r3, [r3, #0]
 8106280:	3308      	adds	r3, #8
 8106282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106284:	697b      	ldr	r3, [r7, #20]
 8106286:	e853 3f00 	ldrex	r3, [r3]
 810628a:	613b      	str	r3, [r7, #16]
   return(result);
 810628c:	693b      	ldr	r3, [r7, #16]
 810628e:	f023 0301 	bic.w	r3, r3, #1
 8106292:	66bb      	str	r3, [r7, #104]	; 0x68
 8106294:	68fb      	ldr	r3, [r7, #12]
 8106296:	681b      	ldr	r3, [r3, #0]
 8106298:	3308      	adds	r3, #8
 810629a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810629c:	623a      	str	r2, [r7, #32]
 810629e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81062a0:	69f9      	ldr	r1, [r7, #28]
 81062a2:	6a3a      	ldr	r2, [r7, #32]
 81062a4:	e841 2300 	strex	r3, r2, [r1]
 81062a8:	61bb      	str	r3, [r7, #24]
   return(result);
 81062aa:	69bb      	ldr	r3, [r7, #24]
 81062ac:	2b00      	cmp	r3, #0
 81062ae:	d1e5      	bne.n	810627c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 81062b0:	68fb      	ldr	r3, [r7, #12]
 81062b2:	2220      	movs	r2, #32
 81062b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 81062b8:	68fb      	ldr	r3, [r7, #12]
 81062ba:	2220      	movs	r2, #32
 81062bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81062c0:	68fb      	ldr	r3, [r7, #12]
 81062c2:	2220      	movs	r2, #32
 81062c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81062c8:	68fb      	ldr	r3, [r7, #12]
 81062ca:	2200      	movs	r2, #0
 81062cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 81062d0:	2303      	movs	r3, #3
 81062d2:	e010      	b.n	81062f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81062d4:	68fb      	ldr	r3, [r7, #12]
 81062d6:	681b      	ldr	r3, [r3, #0]
 81062d8:	69da      	ldr	r2, [r3, #28]
 81062da:	68bb      	ldr	r3, [r7, #8]
 81062dc:	4013      	ands	r3, r2
 81062de:	68ba      	ldr	r2, [r7, #8]
 81062e0:	429a      	cmp	r2, r3
 81062e2:	bf0c      	ite	eq
 81062e4:	2301      	moveq	r3, #1
 81062e6:	2300      	movne	r3, #0
 81062e8:	b2db      	uxtb	r3, r3
 81062ea:	461a      	mov	r2, r3
 81062ec:	79fb      	ldrb	r3, [r7, #7]
 81062ee:	429a      	cmp	r2, r3
 81062f0:	f43f af46 	beq.w	8106180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81062f4:	2300      	movs	r3, #0
}
 81062f6:	4618      	mov	r0, r3
 81062f8:	3770      	adds	r7, #112	; 0x70
 81062fa:	46bd      	mov	sp, r7
 81062fc:	bd80      	pop	{r7, pc}

081062fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81062fe:	b480      	push	{r7}
 8106300:	b095      	sub	sp, #84	; 0x54
 8106302:	af00      	add	r7, sp, #0
 8106304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	681b      	ldr	r3, [r3, #0]
 810630a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810630e:	e853 3f00 	ldrex	r3, [r3]
 8106312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8106314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	461a      	mov	r2, r3
 8106322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106324:	643b      	str	r3, [r7, #64]	; 0x40
 8106326:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810632a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810632c:	e841 2300 	strex	r3, r2, [r1]
 8106330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8106332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106334:	2b00      	cmp	r3, #0
 8106336:	d1e6      	bne.n	8106306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	3308      	adds	r3, #8
 810633e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106340:	6a3b      	ldr	r3, [r7, #32]
 8106342:	e853 3f00 	ldrex	r3, [r3]
 8106346:	61fb      	str	r3, [r7, #28]
   return(result);
 8106348:	69fb      	ldr	r3, [r7, #28]
 810634a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810634e:	f023 0301 	bic.w	r3, r3, #1
 8106352:	64bb      	str	r3, [r7, #72]	; 0x48
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	681b      	ldr	r3, [r3, #0]
 8106358:	3308      	adds	r3, #8
 810635a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810635c:	62fa      	str	r2, [r7, #44]	; 0x2c
 810635e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106364:	e841 2300 	strex	r3, r2, [r1]
 8106368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810636c:	2b00      	cmp	r3, #0
 810636e:	d1e3      	bne.n	8106338 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106374:	2b01      	cmp	r3, #1
 8106376:	d118      	bne.n	81063aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810637e:	68fb      	ldr	r3, [r7, #12]
 8106380:	e853 3f00 	ldrex	r3, [r3]
 8106384:	60bb      	str	r3, [r7, #8]
   return(result);
 8106386:	68bb      	ldr	r3, [r7, #8]
 8106388:	f023 0310 	bic.w	r3, r3, #16
 810638c:	647b      	str	r3, [r7, #68]	; 0x44
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	681b      	ldr	r3, [r3, #0]
 8106392:	461a      	mov	r2, r3
 8106394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106396:	61bb      	str	r3, [r7, #24]
 8106398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810639a:	6979      	ldr	r1, [r7, #20]
 810639c:	69ba      	ldr	r2, [r7, #24]
 810639e:	e841 2300 	strex	r3, r2, [r1]
 81063a2:	613b      	str	r3, [r7, #16]
   return(result);
 81063a4:	693b      	ldr	r3, [r7, #16]
 81063a6:	2b00      	cmp	r3, #0
 81063a8:	d1e6      	bne.n	8106378 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	2220      	movs	r2, #32
 81063ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	2200      	movs	r2, #0
 81063b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	2200      	movs	r2, #0
 81063bc:	671a      	str	r2, [r3, #112]	; 0x70
}
 81063be:	bf00      	nop
 81063c0:	3754      	adds	r7, #84	; 0x54
 81063c2:	46bd      	mov	sp, r7
 81063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063c8:	4770      	bx	lr

081063ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81063ca:	b580      	push	{r7, lr}
 81063cc:	b084      	sub	sp, #16
 81063ce:	af00      	add	r7, sp, #0
 81063d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81063d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 81063d8:	68fb      	ldr	r3, [r7, #12]
 81063da:	2200      	movs	r2, #0
 81063dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 81063e0:	68fb      	ldr	r3, [r7, #12]
 81063e2:	2200      	movs	r2, #0
 81063e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 81063e8:	68f8      	ldr	r0, [r7, #12]
 81063ea:	f7ff f855 	bl	8105498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81063ee:	bf00      	nop
 81063f0:	3710      	adds	r7, #16
 81063f2:	46bd      	mov	sp, r7
 81063f4:	bd80      	pop	{r7, pc}

081063f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 81063f6:	b580      	push	{r7, lr}
 81063f8:	b088      	sub	sp, #32
 81063fa:	af00      	add	r7, sp, #0
 81063fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	681b      	ldr	r3, [r3, #0]
 8106402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106404:	68fb      	ldr	r3, [r7, #12]
 8106406:	e853 3f00 	ldrex	r3, [r3]
 810640a:	60bb      	str	r3, [r7, #8]
   return(result);
 810640c:	68bb      	ldr	r3, [r7, #8]
 810640e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106412:	61fb      	str	r3, [r7, #28]
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	461a      	mov	r2, r3
 810641a:	69fb      	ldr	r3, [r7, #28]
 810641c:	61bb      	str	r3, [r7, #24]
 810641e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106420:	6979      	ldr	r1, [r7, #20]
 8106422:	69ba      	ldr	r2, [r7, #24]
 8106424:	e841 2300 	strex	r3, r2, [r1]
 8106428:	613b      	str	r3, [r7, #16]
   return(result);
 810642a:	693b      	ldr	r3, [r7, #16]
 810642c:	2b00      	cmp	r3, #0
 810642e:	d1e6      	bne.n	81063fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	2220      	movs	r2, #32
 8106434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	2200      	movs	r2, #0
 810643c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810643e:	6878      	ldr	r0, [r7, #4]
 8106440:	f7ff f820 	bl	8105484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106444:	bf00      	nop
 8106446:	3720      	adds	r7, #32
 8106448:	46bd      	mov	sp, r7
 810644a:	bd80      	pop	{r7, pc}

0810644c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810644c:	b480      	push	{r7}
 810644e:	b083      	sub	sp, #12
 8106450:	af00      	add	r7, sp, #0
 8106452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8106454:	bf00      	nop
 8106456:	370c      	adds	r7, #12
 8106458:	46bd      	mov	sp, r7
 810645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810645e:	4770      	bx	lr

08106460 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8106460:	b480      	push	{r7}
 8106462:	b083      	sub	sp, #12
 8106464:	af00      	add	r7, sp, #0
 8106466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8106468:	bf00      	nop
 810646a:	370c      	adds	r7, #12
 810646c:	46bd      	mov	sp, r7
 810646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106472:	4770      	bx	lr

08106474 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8106474:	b480      	push	{r7}
 8106476:	b083      	sub	sp, #12
 8106478:	af00      	add	r7, sp, #0
 810647a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810647c:	bf00      	nop
 810647e:	370c      	adds	r7, #12
 8106480:	46bd      	mov	sp, r7
 8106482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106486:	4770      	bx	lr

08106488 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106488:	b480      	push	{r7}
 810648a:	b085      	sub	sp, #20
 810648c:	af00      	add	r7, sp, #0
 810648e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106496:	2b01      	cmp	r3, #1
 8106498:	d101      	bne.n	810649e <HAL_UARTEx_DisableFifoMode+0x16>
 810649a:	2302      	movs	r3, #2
 810649c:	e027      	b.n	81064ee <HAL_UARTEx_DisableFifoMode+0x66>
 810649e:	687b      	ldr	r3, [r7, #4]
 81064a0:	2201      	movs	r2, #1
 81064a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	2224      	movs	r2, #36	; 0x24
 81064aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	681b      	ldr	r3, [r3, #0]
 81064b2:	681b      	ldr	r3, [r3, #0]
 81064b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	681b      	ldr	r3, [r3, #0]
 81064ba:	681a      	ldr	r2, [r3, #0]
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	f022 0201 	bic.w	r2, r2, #1
 81064c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81064c6:	68fb      	ldr	r3, [r7, #12]
 81064c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81064cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	2200      	movs	r2, #0
 81064d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	681b      	ldr	r3, [r3, #0]
 81064d8:	68fa      	ldr	r2, [r7, #12]
 81064da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	2220      	movs	r2, #32
 81064e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	2200      	movs	r2, #0
 81064e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81064ec:	2300      	movs	r3, #0
}
 81064ee:	4618      	mov	r0, r3
 81064f0:	3714      	adds	r7, #20
 81064f2:	46bd      	mov	sp, r7
 81064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064f8:	4770      	bx	lr

081064fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81064fa:	b580      	push	{r7, lr}
 81064fc:	b084      	sub	sp, #16
 81064fe:	af00      	add	r7, sp, #0
 8106500:	6078      	str	r0, [r7, #4]
 8106502:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810650a:	2b01      	cmp	r3, #1
 810650c:	d101      	bne.n	8106512 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810650e:	2302      	movs	r3, #2
 8106510:	e02d      	b.n	810656e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	2201      	movs	r2, #1
 8106516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	2224      	movs	r2, #36	; 0x24
 810651e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	681b      	ldr	r3, [r3, #0]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	681a      	ldr	r2, [r3, #0]
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	f022 0201 	bic.w	r2, r2, #1
 8106538:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	689b      	ldr	r3, [r3, #8]
 8106540:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	681b      	ldr	r3, [r3, #0]
 8106548:	683a      	ldr	r2, [r7, #0]
 810654a:	430a      	orrs	r2, r1
 810654c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810654e:	6878      	ldr	r0, [r7, #4]
 8106550:	f000 f850 	bl	81065f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	68fa      	ldr	r2, [r7, #12]
 810655a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	2220      	movs	r2, #32
 8106560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	2200      	movs	r2, #0
 8106568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810656c:	2300      	movs	r3, #0
}
 810656e:	4618      	mov	r0, r3
 8106570:	3710      	adds	r7, #16
 8106572:	46bd      	mov	sp, r7
 8106574:	bd80      	pop	{r7, pc}

08106576 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106576:	b580      	push	{r7, lr}
 8106578:	b084      	sub	sp, #16
 810657a:	af00      	add	r7, sp, #0
 810657c:	6078      	str	r0, [r7, #4]
 810657e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106586:	2b01      	cmp	r3, #1
 8106588:	d101      	bne.n	810658e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810658a:	2302      	movs	r3, #2
 810658c:	e02d      	b.n	81065ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	2201      	movs	r2, #1
 8106592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	2224      	movs	r2, #36	; 0x24
 810659a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	681b      	ldr	r3, [r3, #0]
 81065a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	681a      	ldr	r2, [r3, #0]
 81065ac:	687b      	ldr	r3, [r7, #4]
 81065ae:	681b      	ldr	r3, [r3, #0]
 81065b0:	f022 0201 	bic.w	r2, r2, #1
 81065b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	681b      	ldr	r3, [r3, #0]
 81065ba:	689b      	ldr	r3, [r3, #8]
 81065bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	681b      	ldr	r3, [r3, #0]
 81065c4:	683a      	ldr	r2, [r7, #0]
 81065c6:	430a      	orrs	r2, r1
 81065c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81065ca:	6878      	ldr	r0, [r7, #4]
 81065cc:	f000 f812 	bl	81065f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	68fa      	ldr	r2, [r7, #12]
 81065d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	2220      	movs	r2, #32
 81065dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	2200      	movs	r2, #0
 81065e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81065e8:	2300      	movs	r3, #0
}
 81065ea:	4618      	mov	r0, r3
 81065ec:	3710      	adds	r7, #16
 81065ee:	46bd      	mov	sp, r7
 81065f0:	bd80      	pop	{r7, pc}
	...

081065f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81065f4:	b480      	push	{r7}
 81065f6:	b085      	sub	sp, #20
 81065f8:	af00      	add	r7, sp, #0
 81065fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106600:	2b00      	cmp	r3, #0
 8106602:	d108      	bne.n	8106616 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	2201      	movs	r2, #1
 8106608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	2201      	movs	r2, #1
 8106610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106614:	e031      	b.n	810667a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8106616:	2310      	movs	r3, #16
 8106618:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810661a:	2310      	movs	r3, #16
 810661c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	689b      	ldr	r3, [r3, #8]
 8106624:	0e5b      	lsrs	r3, r3, #25
 8106626:	b2db      	uxtb	r3, r3
 8106628:	f003 0307 	and.w	r3, r3, #7
 810662c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	681b      	ldr	r3, [r3, #0]
 8106632:	689b      	ldr	r3, [r3, #8]
 8106634:	0f5b      	lsrs	r3, r3, #29
 8106636:	b2db      	uxtb	r3, r3
 8106638:	f003 0307 	and.w	r3, r3, #7
 810663c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810663e:	7bbb      	ldrb	r3, [r7, #14]
 8106640:	7b3a      	ldrb	r2, [r7, #12]
 8106642:	4911      	ldr	r1, [pc, #68]	; (8106688 <UARTEx_SetNbDataToProcess+0x94>)
 8106644:	5c8a      	ldrb	r2, [r1, r2]
 8106646:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810664a:	7b3a      	ldrb	r2, [r7, #12]
 810664c:	490f      	ldr	r1, [pc, #60]	; (810668c <UARTEx_SetNbDataToProcess+0x98>)
 810664e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106650:	fb93 f3f2 	sdiv	r3, r3, r2
 8106654:	b29a      	uxth	r2, r3
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810665c:	7bfb      	ldrb	r3, [r7, #15]
 810665e:	7b7a      	ldrb	r2, [r7, #13]
 8106660:	4909      	ldr	r1, [pc, #36]	; (8106688 <UARTEx_SetNbDataToProcess+0x94>)
 8106662:	5c8a      	ldrb	r2, [r1, r2]
 8106664:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106668:	7b7a      	ldrb	r2, [r7, #13]
 810666a:	4908      	ldr	r1, [pc, #32]	; (810668c <UARTEx_SetNbDataToProcess+0x98>)
 810666c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810666e:	fb93 f3f2 	sdiv	r3, r3, r2
 8106672:	b29a      	uxth	r2, r3
 8106674:	687b      	ldr	r3, [r7, #4]
 8106676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810667a:	bf00      	nop
 810667c:	3714      	adds	r7, #20
 810667e:	46bd      	mov	sp, r7
 8106680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106684:	4770      	bx	lr
 8106686:	bf00      	nop
 8106688:	08106728 	.word	0x08106728
 810668c:	08106730 	.word	0x08106730

08106690 <__libc_init_array>:
 8106690:	b570      	push	{r4, r5, r6, lr}
 8106692:	4d0d      	ldr	r5, [pc, #52]	; (81066c8 <__libc_init_array+0x38>)
 8106694:	4c0d      	ldr	r4, [pc, #52]	; (81066cc <__libc_init_array+0x3c>)
 8106696:	1b64      	subs	r4, r4, r5
 8106698:	10a4      	asrs	r4, r4, #2
 810669a:	2600      	movs	r6, #0
 810669c:	42a6      	cmp	r6, r4
 810669e:	d109      	bne.n	81066b4 <__libc_init_array+0x24>
 81066a0:	4d0b      	ldr	r5, [pc, #44]	; (81066d0 <__libc_init_array+0x40>)
 81066a2:	4c0c      	ldr	r4, [pc, #48]	; (81066d4 <__libc_init_array+0x44>)
 81066a4:	f000 f820 	bl	81066e8 <_init>
 81066a8:	1b64      	subs	r4, r4, r5
 81066aa:	10a4      	asrs	r4, r4, #2
 81066ac:	2600      	movs	r6, #0
 81066ae:	42a6      	cmp	r6, r4
 81066b0:	d105      	bne.n	81066be <__libc_init_array+0x2e>
 81066b2:	bd70      	pop	{r4, r5, r6, pc}
 81066b4:	f855 3b04 	ldr.w	r3, [r5], #4
 81066b8:	4798      	blx	r3
 81066ba:	3601      	adds	r6, #1
 81066bc:	e7ee      	b.n	810669c <__libc_init_array+0xc>
 81066be:	f855 3b04 	ldr.w	r3, [r5], #4
 81066c2:	4798      	blx	r3
 81066c4:	3601      	adds	r6, #1
 81066c6:	e7f2      	b.n	81066ae <__libc_init_array+0x1e>
 81066c8:	08106740 	.word	0x08106740
 81066cc:	08106740 	.word	0x08106740
 81066d0:	08106740 	.word	0x08106740
 81066d4:	08106744 	.word	0x08106744

081066d8 <memset>:
 81066d8:	4402      	add	r2, r0
 81066da:	4603      	mov	r3, r0
 81066dc:	4293      	cmp	r3, r2
 81066de:	d100      	bne.n	81066e2 <memset+0xa>
 81066e0:	4770      	bx	lr
 81066e2:	f803 1b01 	strb.w	r1, [r3], #1
 81066e6:	e7f9      	b.n	81066dc <memset+0x4>

081066e8 <_init>:
 81066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81066ea:	bf00      	nop
 81066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81066ee:	bc08      	pop	{r3}
 81066f0:	469e      	mov	lr, r3
 81066f2:	4770      	bx	lr

081066f4 <_fini>:
 81066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81066f6:	bf00      	nop
 81066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81066fa:	bc08      	pop	{r3}
 81066fc:	469e      	mov	lr, r3
 81066fe:	4770      	bx	lr
