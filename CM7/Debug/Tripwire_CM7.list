
Tripwire_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d88  08004d88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d90  08004d90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  24000010  08004da8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400019c  08004da8  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001163e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  0003167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000338d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00034470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038d9a  00000000  00000000  00034f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe16  00000000  00000000  0006dcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017813b  00000000  00000000  0007db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f5c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f04  00000000  00000000  001f5c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004d38 	.word	0x08004d38

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004d38 	.word	0x08004d38

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(UART_HandleTypeDef *huart)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  _rx_buffer = &rx_buffer;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <Ringbuf_init+0x40>)
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <Ringbuf_init+0x44>)
 8000714:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <Ringbuf_init+0x48>)
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <Ringbuf_init+0x4c>)
 800071a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f042 0201 	orr.w	r2, r2, #1
 800072a:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f042 0220 	orr.w	r2, r2, #32
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	240000bc 	.word	0x240000bc
 800074c:	2400002c 	.word	0x2400002c
 8000750:	240000c0 	.word	0x240000c0
 8000754:	24000074 	.word	0x24000074

08000758 <Uart_read>:
    buffer->head = i;
  }
}

int Uart_read(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <Uart_read+0x4c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <Uart_read+0x4c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	429a      	cmp	r2, r3
 800076c:	d102      	bne.n	8000774 <Uart_read+0x1c>
  {
    return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e010      	b.n	8000796 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <Uart_read+0x4c>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <Uart_read+0x4c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <Uart_read+0x4c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <Uart_read+0x4c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000792:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000794:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	240000bc 	.word	0x240000bc

080007a8 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <IsDataAvailable+0x2c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <IsDataAvailable+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	3340      	adds	r3, #64	; 0x40
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	240000bc 	.word	0x240000bc

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e4:	bf00      	nop
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <main+0xac>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <main+0x24>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dcf4      	bgt.n	80007e6 <main+0xe>
  if ( timeout < 0 )
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da01      	bge.n	8000806 <main+0x2e>
  {
  Error_Handler();
 8000802:	f000 f915 	bl	8000a30 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 fb1f 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f841 	bl	8000890 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <main+0xac>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <main+0xac>)
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <main+0xac>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800082c:	2000      	movs	r0, #0
 800082e:	f000 fe3d 	bl	80014ac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fe53 	bl	80014e0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800083a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000840:	bf00      	nop
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <main+0xac>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <main+0x80>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dcf4      	bgt.n	8000842 <main+0x6a>
if ( timeout < 0 )
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	da01      	bge.n	8000862 <main+0x8a>
{
Error_Handler();
 800085e:	f000 f8e7 	bl	8000a30 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f8cb 	bl	80009fc <MX_GPIO_Init>
  MX_UART5_Init();
 8000866:	f000 f87d 	bl	8000964 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  xbee_init(&huart5); 						// Communicate with the xbee module to begin data transmission
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <main+0xb0>)
 800086c:	f000 f990 	bl	8000b90 <xbee_init>
  frameRead();
 8000870:	f000 f9b8 	bl	8000be4 <frameRead>
  if (Frame.data == 1){
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <main+0xb4>)
 8000876:	7cdb      	ldrb	r3, [r3, #19]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d101      	bne.n	8000880 <main+0xa8>
	  frameClear();
 800087c:	f000 fa94 	bl	8000da8 <frameClear>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0xa8>
 8000882:	bf00      	nop
 8000884:	58024400 	.word	0x58024400
 8000888:	240000c4 	.word	0x240000c4
 800088c:	24000158 	.word	0x24000158

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	; 0x70
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	224c      	movs	r2, #76	; 0x4c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f004 fa42 	bl	8004d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2220      	movs	r2, #32
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fa3c 	bl	8004d28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b0:	2004      	movs	r0, #4
 80008b2:	f000 fe29 	bl	8001508 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <SystemClock_Config+0xcc>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <SystemClock_Config+0xcc>)
 80008c0:	f023 0301 	bic.w	r3, r3, #1
 80008c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <SystemClock_Config+0xcc>)
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <SystemClock_Config+0xd0>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <SystemClock_Config+0xd0>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <SystemClock_Config+0xd0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ec:	bf00      	nop
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <SystemClock_Config+0xd0>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fa:	d1f8      	bne.n	80008ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000900:	2301      	movs	r3, #1
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fe53 	bl	80015bc <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800091c:	f000 f888 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	233f      	movs	r3, #63	; 0x3f
 8000922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fa67 	bl	8001e18 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000950:	f000 f86e 	bl	8000a30 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3770      	adds	r7, #112	; 0x70
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58000400 	.word	0x58000400
 8000960:	58024800 	.word	0x58024800

08000964 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_UART5_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <MX_UART5_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_UART5_Init+0x90>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_UART5_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_UART5_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_UART5_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_UART5_Init+0x90>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_UART5_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_UART5_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_UART5_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_UART5_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_UART5_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_UART5_Init+0x90>)
 80009ae:	f003 f927 	bl	8003c00 <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 f83a 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_UART5_Init+0x90>)
 80009c0:	f004 f8c4 	bl	8004b4c <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f831 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_UART5_Init+0x90>)
 80009d2:	f004 f8f9 	bl	8004bc8 <HAL_UARTEx_SetRxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f828 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_UART5_Init+0x90>)
 80009e2:	f004 f87a 	bl	8004ada <HAL_UARTEx_DisableFifoMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f820 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	240000c4 	.word	0x240000c4
 80009f8:	40005000 	.word	0x40005000

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_GPIO_Init+0x30>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <MX_GPIO_Init+0x30>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x30>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	58024400 	.word	0x58024400

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_MspInit+0x30>)
 8000a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x30>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x30>)
 8000a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	58024400 	.word	0x58024400

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b8      	sub	sp, #224	; 0xe0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	22bc      	movs	r2, #188	; 0xbc
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f949 	bl	8004d28 <memset>
  if(huart->Instance==UART5)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <HAL_UART_MspInit+0xc0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d142      	bne.n	8000b26 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fd3e 	bl	8002530 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f7ff ffb9 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_UART_MspInit+0xc4>)
 8000ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0xc4>)
 8000ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000aca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0xc4>)
 8000ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0xc4>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0xc4>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0xc4>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000afa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000afe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000b14:	230e      	movs	r3, #14
 8000b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_UART_MspInit+0xc8>)
 8000b22:	f000 fb13 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	37e0      	adds	r7, #224	; 0xe0
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40005000 	.word	0x40005000
 8000b34:	58024400 	.word	0x58024400
 8000b38:	58020400 	.word	0x58020400

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f9d0 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <xbee_init>:
#include "xbee.h"
#include "UartRingbuffer.h"

xbeeFrame frame;

void xbee_init(UART_HandleTypeDef *huart){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	Ringbuf_init(huart);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fdb5 	bl	8000708 <Ringbuf_init>
	frame.delimit = DELIMIT_XBEE;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <xbee_init+0x50>)
 8000ba0:	227e      	movs	r2, #126	; 0x7e
 8000ba2:	701a      	strb	r2, [r3, #0]
	frame.length = 0xE;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <xbee_init+0x50>)
 8000ba6:	220e      	movs	r2, #14
 8000ba8:	705a      	strb	r2, [r3, #1]
	frame.api = TRANSMIT_XBEE;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <xbee_init+0x50>)
 8000bac:	2210      	movs	r2, #16
 8000bae:	709a      	strb	r2, [r3, #2]
	frame.srcAddr64 = RESUME;
 8000bb0:	490b      	ldr	r1, [pc, #44]	; (8000be0 <xbee_init+0x50>)
 8000bb2:	f04f 0201 	mov.w	r2, #1
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	frame.srcAddr16 = RESUME;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <xbee_init+0x50>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	821a      	strh	r2, [r3, #16]
	frame.rcvOpt = END;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <xbee_init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	749a      	strb	r2, [r3, #18]
	frame.data = ACKNOWLEDGE;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <xbee_init+0x50>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	74da      	strb	r2, [r3, #19]
	frame.chksum = 0x6E;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <xbee_init+0x50>)
 8000bd2:	226e      	movs	r2, #110	; 0x6e
 8000bd4:	751a      	strb	r2, [r3, #20]
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000178 	.word	0x24000178

08000be4 <frameRead>:

void frameRead (void){
 8000be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be8:	b087      	sub	sp, #28
 8000bea:	af00      	add	r7, sp, #0
	uint8_t frame_read_state = FRAME_START_DELIM;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]

	switch (frame_read_state){
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	f200 80d1 	bhi.w	8000d9a <frameRead+0x1b6>
 8000bf8:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <frameRead+0x1c>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c1d 	.word	0x08000c1d
 8000c04:	08000c2d 	.word	0x08000c2d
 8000c08:	08000c63 	.word	0x08000c63
 8000c0c:	08000c7f 	.word	0x08000c7f
 8000c10:	08000d35 	.word	0x08000d35
 8000c14:	08000d4f 	.word	0x08000d4f
 8000c18:	08000d73 	.word	0x08000d73
	case FRAME_START_DELIM:
		if (Uart_read() == DELIMIT_XBEE){
 8000c1c:	f7ff fd9c 	bl	8000758 <Uart_read>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b7e      	cmp	r3, #126	; 0x7e
 8000c24:	f040 80ae 	bne.w	8000d84 <frameRead+0x1a0>
			frame_read_state = FRAME_LENGTH;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	71fb      	strb	r3, [r7, #7]
		else {
			break;
		}

	case FRAME_LENGTH:
		if (IsDataAvailable() >= 2){
 8000c2c:	f7ff fdbc 	bl	80007a8 <IsDataAvailable>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	f340 80a8 	ble.w	8000d88 <frameRead+0x1a4>
			frame.length = Uart_read();
 8000c38:	f7ff fd8e 	bl	8000758 <Uart_read>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <frameRead+0x1c0>)
 8000c42:	705a      	strb	r2, [r3, #1]
			frame.length = (frame.length << 1) | Uart_read();
 8000c44:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <frameRead+0x1c0>)
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	b25e      	sxtb	r6, r3
 8000c4c:	f7ff fd84 	bl	8000758 <Uart_read>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	4333      	orrs	r3, r6
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b52      	ldr	r3, [pc, #328]	; (8000da4 <frameRead+0x1c0>)
 8000c5c:	705a      	strb	r2, [r3, #1]
			frame_read_state = FRAME_API;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	71fb      	strb	r3, [r7, #7]
		}
		else {
			break;
		}
	case FRAME_API:
		if (IsDataAvailable()){
 8000c62:	f7ff fda1 	bl	80007a8 <IsDataAvailable>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 808f 	beq.w	8000d8c <frameRead+0x1a8>
			frame.api = Uart_read();
 8000c6e:	f7ff fd73 	bl	8000758 <Uart_read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <frameRead+0x1c0>)
 8000c78:	709a      	strb	r2, [r3, #2]
			frame_read_state = FRAME_ADDR;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	71fb      	strb	r3, [r7, #7]
		}
		else {
			break;
		}
	case FRAME_ADDR:
		if (IsDataAvailable() >= frame.length){
 8000c7e:	f7ff fd93 	bl	80007a8 <IsDataAvailable>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <frameRead+0x1c0>)
 8000c86:	7852      	ldrb	r2, [r2, #1]
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	f2c0 8081 	blt.w	8000d90 <frameRead+0x1ac>
			int index64 = ADDR_64_INDX;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	617b      	str	r3, [r7, #20]
			int index16 = ADDR_16_INDX;
 8000c92:	2302      	movs	r3, #2
 8000c94:	613b      	str	r3, [r7, #16]
			// For loop to store 64-bit address
			for (int i = 0; i < index64; i++){
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	e026      	b.n	8000cea <frameRead+0x106>
				uint8_t serialRead = Uart_read();
 8000c9c:	f7ff fd5c 	bl	8000758 <Uart_read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	717b      	strb	r3, [r7, #5]
				frame.srcAddr64 = (frame.srcAddr64 << index64) | serialRead;
 8000ca4:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <frameRead+0x1c0>)
 8000ca6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000caa:	6979      	ldr	r1, [r7, #20]
 8000cac:	f1a1 0620 	sub.w	r6, r1, #32
 8000cb0:	f1c1 0020 	rsb	r0, r1, #32
 8000cb4:	fa03 f501 	lsl.w	r5, r3, r1
 8000cb8:	fa02 f606 	lsl.w	r6, r2, r6
 8000cbc:	4335      	orrs	r5, r6
 8000cbe:	fa22 f000 	lsr.w	r0, r2, r0
 8000cc2:	4305      	orrs	r5, r0
 8000cc4:	fa02 f401 	lsl.w	r4, r2, r1
 8000cc8:	797b      	ldrb	r3, [r7, #5]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4698      	mov	r8, r3
 8000cce:	4691      	mov	r9, r2
 8000cd0:	ea44 0a08 	orr.w	sl, r4, r8
 8000cd4:	ea45 0b09 	orr.w	fp, r5, r9
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <frameRead+0x1c0>)
 8000cda:	e9c3 ab02 	strd	sl, fp, [r3, #8]
				index64--;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < index64; i++){
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbd4      	blt.n	8000c9c <frameRead+0xb8>
			}

			// For loop to store 16-bit address
			for (int i = 0; i < index16; i++){
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	e017      	b.n	8000d28 <frameRead+0x144>
				uint8_t serialRead = Uart_read();
 8000cf8:	f7ff fd2e 	bl	8000758 <Uart_read>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71bb      	strb	r3, [r7, #6]
				frame.srcAddr16 = (frame.srcAddr16 << index16) | serialRead;
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <frameRead+0x1c0>)
 8000d02:	8a1b      	ldrh	r3, [r3, #16]
 8000d04:	461a      	mov	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <frameRead+0x1c0>)
 8000d1a:	821a      	strh	r2, [r3, #16]
				index16--;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
			for (int i = 0; i < index16; i++){
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbe3      	blt.n	8000cf8 <frameRead+0x114>
			}
			frame_read_state = FRAME_OPT;
 8000d30:	2304      	movs	r3, #4
 8000d32:	71fb      	strb	r3, [r7, #7]
		}
		else {
			break;
		}
	case FRAME_OPT:
		if (IsDataAvailable()){
 8000d34:	f7ff fd38 	bl	80007a8 <IsDataAvailable>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d02a      	beq.n	8000d94 <frameRead+0x1b0>
			frame.rcvOpt = Uart_read();
 8000d3e:	f7ff fd0b 	bl	8000758 <Uart_read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <frameRead+0x1c0>)
 8000d48:	749a      	strb	r2, [r3, #18]
			frame_read_state = FRAME_DATA;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	71fb      	strb	r3, [r7, #7]
		}
		else {
			break;
		}
	case FRAME_DATA:
		frame.length = frame.length - 12;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <frameRead+0x1c0>)
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	3b0c      	subs	r3, #12
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <frameRead+0x1c0>)
 8000d58:	705a      	strb	r2, [r3, #1]
		if (frame.length > 8){
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <frameRead+0x1c0>)
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d91a      	bls.n	8000d98 <frameRead+0x1b4>
			frame.data = (uint8_t) Uart_read();
 8000d62:	f7ff fcf9 	bl	8000758 <Uart_read>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <frameRead+0x1c0>)
 8000d6c:	74da      	strb	r2, [r3, #19]
		}
		else {
			break;
		}
		frame_read_state = FRAME_CHKSM;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	71fb      	strb	r3, [r7, #7]
	case FRAME_CHKSM:
		frame.chksum = Uart_read();
 8000d72:	f7ff fcf1 	bl	8000758 <Uart_read>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <frameRead+0x1c0>)
 8000d7c:	751a      	strb	r2, [r3, #20]
		frame_read_state = FRAME_START_DELIM;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
	}
}
 8000d82:	e00a      	b.n	8000d9a <frameRead+0x1b6>
			break;
 8000d84:	bf00      	nop
 8000d86:	e008      	b.n	8000d9a <frameRead+0x1b6>
			break;
 8000d88:	bf00      	nop
 8000d8a:	e006      	b.n	8000d9a <frameRead+0x1b6>
			break;
 8000d8c:	bf00      	nop
 8000d8e:	e004      	b.n	8000d9a <frameRead+0x1b6>
			break;
 8000d90:	bf00      	nop
 8000d92:	e002      	b.n	8000d9a <frameRead+0x1b6>
			break;
 8000d94:	bf00      	nop
 8000d96:	e000      	b.n	8000d9a <frameRead+0x1b6>
			break;
 8000d98:	bf00      	nop
}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000da4:	24000178 	.word	0x24000178

08000da8 <frameClear>:

void frameGenerate(UART_HandleTypeDef *huart){
	Uart_write(frame.data, huart);
}

void frameClear(){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	frame.delimit = 0;
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <frameClear+0x48>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	frame.length = 0;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <frameClear+0x48>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	705a      	strb	r2, [r3, #1]
	frame.api = 0;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <frameClear+0x48>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	709a      	strb	r2, [r3, #2]
	frame.srcAddr64 = 0;
 8000dbe:	490c      	ldr	r1, [pc, #48]	; (8000df0 <frameClear+0x48>)
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	frame.srcAddr16 = 0;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <frameClear+0x48>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	821a      	strh	r2, [r3, #16]
	frame.rcvOpt = 0;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <frameClear+0x48>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	749a      	strb	r2, [r3, #18]
	frame.data = 0;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <frameClear+0x48>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	74da      	strb	r2, [r3, #19]
	frame.chksum = 0;
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <frameClear+0x48>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	751a      	strb	r2, [r3, #20]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000178 	.word	0x24000178

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f7ff fbf0 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f003 ff5d 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fcd7 	bl	80007d8 <main>
  bx  lr
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e34:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e38:	08004d98 	.word	0x08004d98
  ldr r2, =_sbss
 8000e3c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e40:	2400019c 	.word	0x2400019c

08000e44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC3_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f94a 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e54:	f001 f996 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_Init+0x68>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	f003 030f 	and.w	r3, r3, #15
 8000e64:	4913      	ldr	r1, [pc, #76]	; (8000eb4 <HAL_Init+0x6c>)
 8000e66:	5ccb      	ldrb	r3, [r1, r3]
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_Init+0x68>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_Init+0x6c>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_Init+0x70>)
 8000e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <HAL_Init+0x74>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 f814 	bl	8000ec0 <HAL_InitTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e002      	b.n	8000ea8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea2:	f7ff fdcb 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	08004d50 	.word	0x08004d50
 8000eb8:	24000004 	.word	0x24000004
 8000ebc:	24000000 	.word	0x24000000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_InitTick+0x60>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e021      	b.n	8000f18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_InitTick+0x64>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_InitTick+0x60>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f921 	bl	8001132 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f8f9 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x68>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2400000c 	.word	0x2400000c
 8000f24:	24000000 	.word	0x24000000
 8000f28:	24000008 	.word	0x24000008

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2400000c 	.word	0x2400000c
 8000f50:	24000198 	.word	0x24000198

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	24000198 	.word	0x24000198

08000f6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetREVID+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0c1b      	lsrs	r3, r3, #16
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	5c001000 	.word	0x5c001000

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	05fa0000 	.word	0x05fa0000

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff47 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff5e 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff90 	bl	800103c <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5f 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffb2 	bl	80010a4 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800115a:	4b89      	ldr	r3, [pc, #548]	; (8001380 <HAL_GPIO_Init+0x234>)
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800115e:	e194      	b.n	800148a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8186 	beq.w	8001484 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x44>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	69b9      	ldr	r1, [r7, #24]
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0203 	and.w	r2, r3, #3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80e0 	beq.w	8001484 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_GPIO_Init+0x238>)
 80012c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <HAL_GPIO_Init+0x238>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_GPIO_Init+0x238>)
 80012d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a29      	ldr	r2, [pc, #164]	; (8001388 <HAL_GPIO_Init+0x23c>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a20      	ldr	r2, [pc, #128]	; (800138c <HAL_GPIO_Init+0x240>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d052      	beq.n	80013b4 <HAL_GPIO_Init+0x268>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_GPIO_Init+0x244>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d031      	beq.n	800137a <HAL_GPIO_Init+0x22e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_GPIO_Init+0x248>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x22a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_GPIO_Init+0x24c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_GPIO_Init+0x250>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_GPIO_Init+0x254>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <HAL_GPIO_Init+0x258>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <HAL_GPIO_Init+0x25c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a18      	ldr	r2, [pc, #96]	; (80013ac <HAL_GPIO_Init+0x260>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_GPIO_Init+0x264>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x20e>
 8001356:	2309      	movs	r3, #9
 8001358:	e02d      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800135a:	230a      	movs	r3, #10
 800135c:	e02b      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800135e:	2308      	movs	r3, #8
 8001360:	e029      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001362:	2307      	movs	r3, #7
 8001364:	e027      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001366:	2306      	movs	r3, #6
 8001368:	e025      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800136a:	2305      	movs	r3, #5
 800136c:	e023      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800136e:	2304      	movs	r3, #4
 8001370:	e021      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001372:	2303      	movs	r3, #3
 8001374:	e01f      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001376:	2302      	movs	r3, #2
 8001378:	e01d      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800137a:	2301      	movs	r3, #1
 800137c:	e01b      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800137e:	bf00      	nop
 8001380:	58000080 	.word	0x58000080
 8001384:	58024400 	.word	0x58024400
 8001388:	58000400 	.word	0x58000400
 800138c:	58020000 	.word	0x58020000
 8001390:	58020400 	.word	0x58020400
 8001394:	58020800 	.word	0x58020800
 8001398:	58020c00 	.word	0x58020c00
 800139c:	58021000 	.word	0x58021000
 80013a0:	58021400 	.word	0x58021400
 80013a4:	58021800 	.word	0x58021800
 80013a8:	58021c00 	.word	0x58021c00
 80013ac:	58022000 	.word	0x58022000
 80013b0:	58022400 	.word	0x58022400
 80013b4:	2300      	movs	r3, #0
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	f002 0203 	and.w	r2, r2, #3
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	4093      	lsls	r3, r2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c6:	4938      	ldr	r1, [pc, #224]	; (80014a8 <HAL_GPIO_Init+0x35c>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	3301      	adds	r3, #1
 8001488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f ae63 	bne.w	8001160 <HAL_GPIO_Init+0x14>
  }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3724      	adds	r7, #36	; 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	58000400 	.word	0x58000400

080014ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_HSEM_FastTake+0x2c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3320      	adds	r3, #32
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_HSEM_FastTake+0x30>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d101      	bne.n	80014c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	58026400 	.word	0x58026400
 80014dc:	80000300 	.word	0x80000300

080014e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014ea:	4906      	ldr	r1, [pc, #24]	; (8001504 <HAL_HSEM_Release+0x24>)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	58026400 	.word	0x58026400

08001508 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	2b06      	cmp	r3, #6
 800151a:	d00a      	beq.n	8001532 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d001      	beq.n	800152e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e040      	b.n	80015b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e03e      	b.n	80015b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800153a:	491f      	ldr	r1, [pc, #124]	; (80015b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001542:	f7ff fd07 	bl	8000f54 <HAL_GetTick>
 8001546:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001548:	e009      	b.n	800155e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800154a:	f7ff fd03 	bl	8000f54 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001558:	d901      	bls.n	800155e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e028      	b.n	80015b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800156a:	d1ee      	bne.n	800154a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b1e      	cmp	r3, #30
 8001570:	d008      	beq.n	8001584 <HAL_PWREx_ConfigSupply+0x7c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b2e      	cmp	r3, #46	; 0x2e
 8001576:	d005      	beq.n	8001584 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b1d      	cmp	r3, #29
 800157c:	d002      	beq.n	8001584 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b2d      	cmp	r3, #45	; 0x2d
 8001582:	d114      	bne.n	80015ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001584:	f7ff fce6 	bl	8000f54 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800158a:	e009      	b.n	80015a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800158c:	f7ff fce2 	bl	8000f54 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800159a:	d901      	bls.n	80015a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e007      	b.n	80015b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d1ee      	bne.n	800158c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	58024800 	.word	0x58024800

080015bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f000 bc1d 	b.w	8001e0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8087 	beq.w	80016ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015de:	4b99      	ldr	r3, [pc, #612]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015e8:	4b96      	ldr	r3, [pc, #600]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f0:	2b10      	cmp	r3, #16
 80015f2:	d007      	beq.n	8001604 <HAL_RCC_OscConfig+0x48>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	2b18      	cmp	r3, #24
 80015f8:	d110      	bne.n	800161c <HAL_RCC_OscConfig+0x60>
 80015fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b8f      	ldr	r3, [pc, #572]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d06c      	beq.n	80016ea <HAL_RCC_OscConfig+0x12e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d168      	bne.n	80016ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e3f6      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x78>
 8001626:	4b87      	ldr	r3, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a86      	ldr	r2, [pc, #536]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e02e      	b.n	8001692 <HAL_RCC_OscConfig+0xd6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x9a>
 800163c:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a80      	ldr	r2, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a7d      	ldr	r2, [pc, #500]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e01d      	b.n	8001692 <HAL_RCC_OscConfig+0xd6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0xbe>
 8001660:	4b78      	ldr	r3, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a77      	ldr	r2, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b75      	ldr	r3, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a74      	ldr	r2, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0xd6>
 800167a:	4b72      	ldr	r3, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a71      	ldr	r2, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800168c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d013      	beq.n	80016c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fc5b 	bl	8000f54 <HAL_GetTick>
 800169e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a2:	f7ff fc57 	bl	8000f54 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e3aa      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016b4:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0xe6>
 80016c0:	e014      	b.n	80016ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff fc47 	bl	8000f54 <HAL_GetTick>
 80016c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ca:	f7ff fc43 	bl	8000f54 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e396      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x10e>
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80cb 	beq.w	8001890 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fa:	4b52      	ldr	r3, [pc, #328]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001702:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_RCC_OscConfig+0x164>
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	2b18      	cmp	r3, #24
 8001714:	d156      	bne.n	80017c4 <HAL_RCC_OscConfig+0x208>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d151      	bne.n	80017c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001720:	4b48      	ldr	r3, [pc, #288]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x17c>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e368      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 0219 	bic.w	r2, r3, #25
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	493f      	ldr	r1, [pc, #252]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800174a:	f7ff fc03 	bl	8000f54 <HAL_GetTick>
 800174e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fbff 	bl	8000f54 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e352      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001764:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	f7ff fbfc 	bl	8000f6c <HAL_GetREVID>
 8001774:	4603      	mov	r3, r0
 8001776:	f241 0203 	movw	r2, #4099	; 0x1003
 800177a:	4293      	cmp	r3, r2
 800177c:	d817      	bhi.n	80017ae <HAL_RCC_OscConfig+0x1f2>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x1dc>
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800178e:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001796:	e07b      	b.n	8001890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	031b      	lsls	r3, r3, #12
 80017a6:	4927      	ldr	r1, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ac:	e070      	b.n	8001890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	4921      	ldr	r1, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c2:	e065      	b.n	8001890 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d048      	beq.n	800185e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 0219 	bic.w	r2, r3, #25
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	491a      	ldr	r1, [pc, #104]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fbb9 	bl	8000f54 <HAL_GetTick>
 80017e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fbb5 	bl	8000f54 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e308      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	f7ff fbb2 	bl	8000f6c <HAL_GetREVID>
 8001808:	4603      	mov	r3, r0
 800180a:	f241 0203 	movw	r2, #4099	; 0x1003
 800180e:	4293      	cmp	r3, r2
 8001810:	d81a      	bhi.n	8001848 <HAL_RCC_OscConfig+0x28c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	d108      	bne.n	800182c <HAL_RCC_OscConfig+0x270>
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	6053      	str	r3, [r2, #4]
 800182a:	e031      	b.n	8001890 <HAL_RCC_OscConfig+0x2d4>
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	031b      	lsls	r3, r3, #12
 800183a:	4902      	ldr	r1, [pc, #8]	; (8001844 <HAL_RCC_OscConfig+0x288>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e026      	b.n	8001890 <HAL_RCC_OscConfig+0x2d4>
 8001842:	bf00      	nop
 8001844:	58024400 	.word	0x58024400
 8001848:	4b9a      	ldr	r3, [pc, #616]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	4997      	ldr	r1, [pc, #604]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
 800185c:	e018      	b.n	8001890 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185e:	4b95      	ldr	r3, [pc, #596]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a94      	ldr	r2, [pc, #592]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fb73 	bl	8000f54 <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fb6f 	bl	8000f54 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e2c2      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001884:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a9 	beq.w	80019f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800189e:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018a8:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d007      	beq.n	80018c4 <HAL_RCC_OscConfig+0x308>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b18      	cmp	r3, #24
 80018b8:	d13a      	bne.n	8001930 <HAL_RCC_OscConfig+0x374>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d135      	bne.n	8001930 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018c4:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_OscConfig+0x320>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e296      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018dc:	f7ff fb46 	bl	8000f6c <HAL_GetREVID>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d817      	bhi.n	800191a <HAL_RCC_OscConfig+0x35e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	d108      	bne.n	8001904 <HAL_RCC_OscConfig+0x348>
 80018f2:	4b70      	ldr	r3, [pc, #448]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80018fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001900:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001902:	e075      	b.n	80019f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001904:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	069b      	lsls	r3, r3, #26
 8001912:	4968      	ldr	r1, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001918:	e06a      	b.n	80019f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800191a:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	061b      	lsls	r3, r3, #24
 8001928:	4962      	ldr	r1, [pc, #392]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	4313      	orrs	r3, r2
 800192c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800192e:	e05f      	b.n	80019f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d042      	beq.n	80019be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001938:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800193e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb06 	bl	8000f54 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800194c:	f7ff fb02 	bl	8000f54 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e255      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800195e:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800196a:	f7ff faff 	bl	8000f6c <HAL_GetREVID>
 800196e:	4603      	mov	r3, r0
 8001970:	f241 0203 	movw	r2, #4099	; 0x1003
 8001974:	4293      	cmp	r3, r2
 8001976:	d817      	bhi.n	80019a8 <HAL_RCC_OscConfig+0x3ec>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	2b20      	cmp	r3, #32
 800197e:	d108      	bne.n	8001992 <HAL_RCC_OscConfig+0x3d6>
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001988:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800198a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800198e:	6053      	str	r3, [r2, #4]
 8001990:	e02e      	b.n	80019f0 <HAL_RCC_OscConfig+0x434>
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	069b      	lsls	r3, r3, #26
 80019a0:	4944      	ldr	r1, [pc, #272]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
 80019a6:	e023      	b.n	80019f0 <HAL_RCC_OscConfig+0x434>
 80019a8:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	493f      	ldr	r1, [pc, #252]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a3c      	ldr	r2, [pc, #240]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80019c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fac3 	bl	8000f54 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019d2:	f7ff fabf 	bl	8000f54 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e212      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019e4:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d036      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d019      	beq.n	8001a38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a08:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a10:	f7ff faa0 	bl	8000f54 <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fa9c 	bl	8000f54 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1ef      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x45c>
 8001a36:	e018      	b.n	8001a6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fa86 	bl	8000f54 <HAL_GetTick>
 8001a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fa82 	bl	8000f54 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1d5      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d039      	beq.n	8001aea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa63 	bl	8000f54 <HAL_GetTick>
 8001a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a92:	f7ff fa5f 	bl	8000f54 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1b2      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x4d6>
 8001ab0:	e01b      	b.n	8001aea <HAL_RCC_OscConfig+0x52e>
 8001ab2:	bf00      	nop
 8001ab4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ab8:	4b9b      	ldr	r3, [pc, #620]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a9a      	ldr	r2, [pc, #616]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa46 	bl	8000f54 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001acc:	f7ff fa42 	bl	8000f54 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e195      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ade:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8081 	beq.w	8001bfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001af8:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <HAL_RCC_OscConfig+0x770>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a8b      	ldr	r2, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x770>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b04:	f7ff fa26 	bl	8000f54 <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b0c:	f7ff fa22 	bl	8000f54 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e175      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b1e:	4b83      	ldr	r3, [pc, #524]	; (8001d2c <HAL_RCC_OscConfig+0x770>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x584>
 8001b32:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a7c      	ldr	r2, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3e:	e02d      	b.n	8001b9c <HAL_RCC_OscConfig+0x5e0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5a6>
 8001b48:	4b77      	ldr	r3, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a76      	ldr	r2, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	4b74      	ldr	r3, [pc, #464]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a73      	ldr	r2, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x5e0>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5c8>
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a6b      	ldr	r2, [pc, #428]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x5e0>
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a64      	ldr	r2, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f9d6 	bl	8000f54 <HAL_GetTick>
 8001ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff f9d2 	bl	8000f54 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e123      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc2:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ee      	beq.n	8001bac <HAL_RCC_OscConfig+0x5f0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f9c0 	bl	8000f54 <HAL_GetTick>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f9bc 	bl	8000f54 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e10d      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bee:	4b4e      	ldr	r3, [pc, #312]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8102 	beq.w	8001e08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c04:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c0c:	2b18      	cmp	r3, #24
 8001c0e:	f000 80bd 	beq.w	8001d8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 809e 	bne.w	8001d58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a41      	ldr	r2, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f994 	bl	8000f54 <HAL_GetTick>
 8001c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f990 	bl	8000f54 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0e3      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c52:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_RCC_OscConfig+0x774>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	430a      	orrs	r2, r1
 8001c62:	4931      	ldr	r1, [pc, #196]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	628b      	str	r3, [r1, #40]	; 0x28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	3b01      	subs	r3, #1
 8001c78:	025b      	lsls	r3, r3, #9
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	3b01      	subs	r3, #1
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	3b01      	subs	r3, #1
 8001c92:	061b      	lsls	r3, r3, #24
 8001c94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c98:	4923      	ldr	r1, [pc, #140]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cb6:	00d2      	lsls	r2, r2, #3
 8001cb8:	491b      	ldr	r1, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f023 020c 	bic.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4917      	ldr	r1, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f023 0202 	bic.w	r2, r3, #2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	4912      	ldr	r1, [pc, #72]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_RCC_OscConfig+0x76c>)
 8001d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f919 	bl	8000f54 <HAL_GetTick>
 8001d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d24:	e011      	b.n	8001d4a <HAL_RCC_OscConfig+0x78e>
 8001d26:	bf00      	nop
 8001d28:	58024400 	.word	0x58024400
 8001d2c:	58024800 	.word	0x58024800
 8001d30:	fffffc0c 	.word	0xfffffc0c
 8001d34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f90c 	bl	8000f54 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e05f      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCC_OscConfig+0x858>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x77c>
 8001d56:	e057      	b.n	8001e08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_RCC_OscConfig+0x858>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a2d      	ldr	r2, [pc, #180]	; (8001e14 <HAL_RCC_OscConfig+0x858>)
 8001d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f8f6 	bl	8000f54 <HAL_GetTick>
 8001d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f8f2 	bl	8000f54 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e045      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_OscConfig+0x858>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x7b0>
 8001d8a:	e03d      	b.n	8001e08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x858>)
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCC_OscConfig+0x858>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d031      	beq.n	8001e04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0203 	and.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d12a      	bne.n	8001e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d122      	bne.n	8001e04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d11a      	bne.n	8001e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0a5b      	lsrs	r3, r3, #9
 8001dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d111      	bne.n	8001e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0e1b      	lsrs	r3, r3, #24
 8001df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	58024400 	.word	0x58024400

08001e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e19c      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b87      	ldr	r3, [pc, #540]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 020f 	bic.w	r2, r3, #15
 8001e42:	4985      	ldr	r1, [pc, #532]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b83      	ldr	r3, [pc, #524]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e184      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	4b7b      	ldr	r3, [pc, #492]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e78:	4b78      	ldr	r3, [pc, #480]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	4975      	ldr	r1, [pc, #468]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d908      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	496a      	ldr	r1, [pc, #424]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	4b64      	ldr	r3, [pc, #400]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d908      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ed4:	4b61      	ldr	r3, [pc, #388]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	495e      	ldr	r1, [pc, #376]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d010      	beq.n	8001f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d908      	bls.n	8001f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f02:	4b56      	ldr	r3, [pc, #344]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4953      	ldr	r1, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b4d      	ldr	r3, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d908      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f023 020f 	bic.w	r2, r3, #15
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4947      	ldr	r1, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d055      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4940      	ldr	r1, [pc, #256]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d121      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0f6      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d115      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0ea      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f98:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0de      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0d6      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f023 0207 	bic.w	r2, r3, #7
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4925      	ldr	r1, [pc, #148]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7fe ffc3 	bl	8000f54 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7fe ffbf 	bl	8000f54 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0be      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d1eb      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	429a      	cmp	r2, r3
 8002014:	d208      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f023 020f 	bic.w	r2, r3, #15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8002024:	4313      	orrs	r3, r2
 8002026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d214      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 020f 	bic.w	r2, r3, #15
 800203e:	4906      	ldr	r1, [pc, #24]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e086      	b.n	8002166 <HAL_RCC_ClockConfig+0x34e>
 8002058:	52002000 	.word	0x52002000
 800205c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002078:	429a      	cmp	r2, r3
 800207a:	d208      	bcs.n	800208e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	4939      	ldr	r1, [pc, #228]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 800208a:	4313      	orrs	r3, r2
 800208c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d208      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	492e      	ldr	r1, [pc, #184]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d208      	bcs.n	80020ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4922      	ldr	r1, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d010      	beq.n	8002118 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002102:	429a      	cmp	r2, r3
 8002104:	d208      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4917      	ldr	r1, [pc, #92]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002114:	4313      	orrs	r3, r2
 8002116:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002118:	f000 f834 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	4912      	ldr	r1, [pc, #72]	; (8002174 <HAL_RCC_ClockConfig+0x35c>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x358>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_RCC_ClockConfig+0x35c>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x360>)
 800214e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x364>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x368>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe feb0 	bl	8000ec0 <HAL_InitTick>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	58024400 	.word	0x58024400
 8002174:	08004d50 	.word	0x08004d50
 8002178:	24000004 	.word	0x24000004
 800217c:	24000000 	.word	0x24000000
 8002180:	24000008 	.word	0x24000008

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800218a:	4bb3      	ldr	r3, [pc, #716]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002192:	2b18      	cmp	r3, #24
 8002194:	f200 8155 	bhi.w	8002442 <HAL_RCC_GetSysClockFreq+0x2be>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	08002205 	.word	0x08002205
 80021a4:	08002443 	.word	0x08002443
 80021a8:	08002443 	.word	0x08002443
 80021ac:	08002443 	.word	0x08002443
 80021b0:	08002443 	.word	0x08002443
 80021b4:	08002443 	.word	0x08002443
 80021b8:	08002443 	.word	0x08002443
 80021bc:	08002443 	.word	0x08002443
 80021c0:	0800222b 	.word	0x0800222b
 80021c4:	08002443 	.word	0x08002443
 80021c8:	08002443 	.word	0x08002443
 80021cc:	08002443 	.word	0x08002443
 80021d0:	08002443 	.word	0x08002443
 80021d4:	08002443 	.word	0x08002443
 80021d8:	08002443 	.word	0x08002443
 80021dc:	08002443 	.word	0x08002443
 80021e0:	08002231 	.word	0x08002231
 80021e4:	08002443 	.word	0x08002443
 80021e8:	08002443 	.word	0x08002443
 80021ec:	08002443 	.word	0x08002443
 80021f0:	08002443 	.word	0x08002443
 80021f4:	08002443 	.word	0x08002443
 80021f8:	08002443 	.word	0x08002443
 80021fc:	08002443 	.word	0x08002443
 8002200:	08002237 	.word	0x08002237
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002204:	4b94      	ldr	r3, [pc, #592]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002210:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	4a90      	ldr	r2, [pc, #576]	; (800245c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002222:	e111      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002224:	4b8d      	ldr	r3, [pc, #564]	; (800245c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002226:	61bb      	str	r3, [r7, #24]
    break;
 8002228:	e10e      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800222a:	4b8d      	ldr	r3, [pc, #564]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800222c:	61bb      	str	r3, [r7, #24]
    break;
 800222e:	e10b      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002232:	61bb      	str	r3, [r7, #24]
    break;
 8002234:	e108      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800224a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002256:	4b80      	ldr	r3, [pc, #512]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80e1 	beq.w	800243c <HAL_RCC_GetSysClockFreq+0x2b8>
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b02      	cmp	r3, #2
 800227e:	f000 8083 	beq.w	8002388 <HAL_RCC_GetSysClockFreq+0x204>
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b02      	cmp	r3, #2
 8002286:	f200 80a1 	bhi.w	80023cc <HAL_RCC_GetSysClockFreq+0x248>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x114>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d056      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002296:	e099      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	4a6b      	ldr	r2, [pc, #428]	; (800245c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ce:	4b62      	ldr	r3, [pc, #392]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022de:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80022fe:	e087      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800246c <HAL_RCC_GetSysClockFreq+0x2e8>
 800230e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002312:	4b51      	ldr	r3, [pc, #324]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002322:	ed97 6a02 	vldr	s12, [r7, #8]
 8002326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800232a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002342:	e065      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002356:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002366:	ed97 6a02 	vldr	s12, [r7, #8]
 800236a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800236e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002386:	e043      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023ca:	e021      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800240e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	0a5b      	lsrs	r3, r3, #9
 8002416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800241a:	3301      	adds	r3, #1
 800241c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002428:	edd7 6a07 	vldr	s13, [r7, #28]
 800242c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002434:	ee17 3a90 	vmov	r3, s15
 8002438:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
    break;
 8002440:	e002      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002444:	61bb      	str	r3, [r7, #24]
    break;
 8002446:	bf00      	nop
  }

  return sysclockfreq;
 8002448:	69bb      	ldr	r3, [r7, #24]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	58024400 	.word	0x58024400
 800245c:	03d09000 	.word	0x03d09000
 8002460:	003d0900 	.word	0x003d0900
 8002464:	017d7840 	.word	0x017d7840
 8002468:	46000000 	.word	0x46000000
 800246c:	4c742400 	.word	0x4c742400
 8002470:	4a742400 	.word	0x4a742400
 8002474:	4bbebc20 	.word	0x4bbebc20

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800247e:	f7ff fe81 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	490f      	ldr	r1, [pc, #60]	; (80024cc <HAL_RCC_GetHCLKFreq+0x54>)
 8002490:	5ccb      	ldrb	r3, [r1, r3]
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_GetHCLKFreq+0x54>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	58024400 	.word	0x58024400
 80024cc:	08004d50 	.word	0x08004d50
 80024d0:	24000004 	.word	0x24000004
 80024d4:	24000000 	.word	0x24000000

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80024dc:	f7ff ffcc 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4904      	ldr	r1, [pc, #16]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	58024400 	.word	0x58024400
 8002500:	08004d50 	.word	0x08004d50

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002508:	f7ff ffb6 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4904      	ldr	r1, [pc, #16]	; (800252c <HAL_RCC_GetPCLK2Freq+0x28>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	58024400 	.word	0x58024400
 800252c:	08004d50 	.word	0x08004d50

08002530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800253c:	2300      	movs	r3, #0
 800253e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03f      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002554:	d02a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002556:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800255a:	d824      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800255c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002560:	d018      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002566:	d81e      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800256c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002570:	d007      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002572:	e018      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4ba3      	ldr	r3, [pc, #652]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4aa2      	ldr	r2, [pc, #648]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002580:	e015      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2102      	movs	r1, #2
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f9d5 	bl	8003938 <RCCEx_PLL2_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002592:	e00c      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3324      	adds	r3, #36	; 0x24
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f001 fa7e 	bl	8003a9c <RCCEx_PLL3_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025a4:	e003      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
      break;
 80025aa:	e000      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025b4:	4b93      	ldr	r3, [pc, #588]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c0:	4990      	ldr	r1, [pc, #576]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	650b      	str	r3, [r1, #80]	; 0x50
 80025c6:	e001      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03d      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d826      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025e0:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80025e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	080025fd 	.word	0x080025fd
 80025ec:	0800260b 	.word	0x0800260b
 80025f0:	0800261d 	.word	0x0800261d
 80025f4:	08002635 	.word	0x08002635
 80025f8:	08002635 	.word	0x08002635
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025fc:	4b81      	ldr	r3, [pc, #516]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	4a80      	ldr	r2, [pc, #512]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002606:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002608:	e015      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f001 f991 	bl	8003938 <RCCEx_PLL2_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800261a:	e00c      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3324      	adds	r3, #36	; 0x24
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fa3a 	bl	8003a9c <RCCEx_PLL3_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800262c:	e003      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
      break;
 8002632:	e000      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800263c:	4b71      	ldr	r3, [pc, #452]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800263e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002640:	f023 0207 	bic.w	r2, r3, #7
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	496e      	ldr	r1, [pc, #440]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	650b      	str	r3, [r1, #80]	; 0x50
 800264e:	e001      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265c:	2b00      	cmp	r3, #0
 800265e:	d042      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002668:	d02b      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800266a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266e:	d825      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002670:	2bc0      	cmp	r3, #192	; 0xc0
 8002672:	d028      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002674:	2bc0      	cmp	r3, #192	; 0xc0
 8002676:	d821      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d016      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d81d      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d007      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002688:	e018      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268a:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	4a5d      	ldr	r2, [pc, #372]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002696:	e017      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f94a 	bl	8003938 <RCCEx_PLL2_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026a8:	e00e      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3324      	adds	r3, #36	; 0x24
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 f9f3 	bl	8003a9c <RCCEx_PLL3_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026ba:	e005      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
      break;
 80026c0:	e002      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80026c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80026ce:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	494a      	ldr	r1, [pc, #296]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	650b      	str	r3, [r1, #80]	; 0x50
 80026e0:	e001      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d049      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026fc:	d030      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80026fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002702:	d82a      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002704:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002708:	d02c      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800270a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800270e:	d824      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002714:	d018      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271a:	d81e      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002724:	d007      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002726:	e018      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	4a35      	ldr	r2, [pc, #212]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800272e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002734:	e017      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f001 f8fb 	bl	8003938 <RCCEx_PLL2_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002746:	e00e      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3324      	adds	r3, #36	; 0x24
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f001 f9a4 	bl	8003a9c <RCCEx_PLL3_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002758:	e005      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002760:	bf00      	nop
 8002762:	e000      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800277a:	4922      	ldr	r1, [pc, #136]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	658b      	str	r3, [r1, #88]	; 0x58
 8002780:	e001      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278e:	2b00      	cmp	r3, #0
 8002790:	d04b      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800279c:	d030      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800279e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a2:	d82a      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027a8:	d02e      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80027aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ae:	d824      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027b4:	d018      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80027b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ba:	d81e      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80027c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c4:	d007      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80027c6:	e018      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027d4:	e019      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 f8ab 	bl	8003938 <RCCEx_PLL2_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80027e6:	e010      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3324      	adds	r3, #36	; 0x24
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 f954 	bl	8003a9c <RCCEx_PLL3_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027f8:	e007      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
      break;
 80027fe:	e004      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002800:	bf00      	nop
 8002802:	e002      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002804:	58024400 	.word	0x58024400
      break;
 8002808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002810:	4b99      	ldr	r3, [pc, #612]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800281e:	4996      	ldr	r1, [pc, #600]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002820:	4313      	orrs	r3, r2
 8002822:	658b      	str	r3, [r1, #88]	; 0x58
 8002824:	e001      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d032      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283a:	2b30      	cmp	r3, #48	; 0x30
 800283c:	d01c      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800283e:	2b30      	cmp	r3, #48	; 0x30
 8002840:	d817      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002842:	2b20      	cmp	r3, #32
 8002844:	d00c      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002846:	2b20      	cmp	r3, #32
 8002848:	d813      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800284e:	2b10      	cmp	r3, #16
 8002850:	d10f      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002852:	4b89      	ldr	r3, [pc, #548]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	4a88      	ldr	r2, [pc, #544]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800285e:	e00e      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f001 f866 	bl	8003938 <RCCEx_PLL2_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002870:	e005      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
      break;
 8002876:	e002      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800287c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002884:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002890:	4979      	ldr	r1, [pc, #484]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002892:	4313      	orrs	r3, r2
 8002894:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002896:	e001      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d047      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b0:	d030      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80028b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b6:	d82a      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80028b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028bc:	d02c      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80028be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028c2:	d824      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80028c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c8:	d018      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80028ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ce:	d81e      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d8:	d007      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80028da:	e018      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028dc:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	4a65      	ldr	r2, [pc, #404]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028e8:	e017      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 f821 	bl	8003938 <RCCEx_PLL2_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028fa:	e00e      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3324      	adds	r3, #36	; 0x24
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f8ca 	bl	8003a9c <RCCEx_PLL3_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800290c:	e005      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
      break;
 8002912:	e002      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	4952      	ldr	r1, [pc, #328]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800292e:	4313      	orrs	r3, r2
 8002930:	650b      	str	r3, [r1, #80]	; 0x50
 8002932:	e001      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d049      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800294c:	d02e      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800294e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002952:	d828      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002958:	d02a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800295a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800295e:	d822      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002964:	d026      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800296a:	d81c      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800296c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002970:	d010      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002976:	d816      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d111      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f000 ffd5 	bl	8003938 <RCCEx_PLL2_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002992:	e012      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3324      	adds	r3, #36	; 0x24
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f87e 	bl	8003a9c <RCCEx_PLL3_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029a4:	e009      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
      break;
 80029aa:	e006      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029ac:	bf00      	nop
 80029ae:	e004      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029b0:	bf00      	nop
 80029b2:	e002      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029cc:	492a      	ldr	r1, [pc, #168]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	650b      	str	r3, [r1, #80]	; 0x50
 80029d2:	e001      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d04d      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ee:	d02e      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80029f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f4:	d828      	bhi.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d02a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d822      	bhi.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002a02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a06:	d026      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002a08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a0c:	d81c      	bhi.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a12:	d010      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a18:	d816      	bhi.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01d      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a22:	d111      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 ff84 	bl	8003938 <RCCEx_PLL2_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a34:	e012      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3324      	adds	r3, #36	; 0x24
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 f82d 	bl	8003a9c <RCCEx_PLL3_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a46:	e009      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4c:	e006      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e004      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a52:	bf00      	nop
 8002a54:	e002      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a70:	4901      	ldr	r1, [pc, #4]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	658b      	str	r3, [r1, #88]	; 0x58
 8002a76:	e003      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002a78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02f      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a94:	d00e      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a9a:	d814      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa6:	4baf      	ldr	r3, [pc, #700]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	4aae      	ldr	r2, [pc, #696]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ab2:	e00c      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 ff3c 	bl	8003938 <RCCEx_PLL2_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ac4:	e003      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ad4:	4ba3      	ldr	r3, [pc, #652]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae0:	49a0      	ldr	r1, [pc, #640]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ae6:	e001      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d032      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d81b      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b3f 	.word	0x08002b3f
 8002b0c:	08002b19 	.word	0x08002b19
 8002b10:	08002b27 	.word	0x08002b27
 8002b14:	08002b3f 	.word	0x08002b3f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b18:	4b92      	ldr	r3, [pc, #584]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	4a91      	ldr	r2, [pc, #580]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b24:	e00c      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 ff03 	bl	8003938 <RCCEx_PLL2_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b36:	e003      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b46:	4b87      	ldr	r3, [pc, #540]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4984      	ldr	r1, [pc, #528]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b58:	e001      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8086 	beq.w	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b6c:	4b7e      	ldr	r3, [pc, #504]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7d      	ldr	r2, [pc, #500]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b78:	f7fe f9ec 	bl	8000f54 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b7e:	e009      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fe f9e8 	bl	8000f54 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d902      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	75fb      	strb	r3, [r7, #23]
        break;
 8002b92:	e005      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b94:	4b74      	ldr	r3, [pc, #464]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d166      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ba6:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ba8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bb0:	4053      	eors	r3, r2
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d013      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bba:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc4:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a66      	ldr	r2, [pc, #408]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd0:	4b64      	ldr	r3, [pc, #400]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a63      	ldr	r2, [pc, #396]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bdc:	4a61      	ldr	r2, [pc, #388]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bec:	d115      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe f9b1 	bl	8000f54 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe f9ad 	bl	8000f54 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d902      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	75fb      	strb	r3, [r7, #23]
            break;
 8002c0c:	e005      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c0e:	4b55      	ldr	r3, [pc, #340]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ed      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d126      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c2e:	d10d      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002c30:	4b4c      	ldr	r3, [pc, #304]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c3e:	0919      	lsrs	r1, r3, #4
 8002c40:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002c42:	400b      	ands	r3, r1
 8002c44:	4947      	ldr	r1, [pc, #284]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]
 8002c4a:	e005      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	4a44      	ldr	r2, [pc, #272]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c56:	6113      	str	r3, [r2, #16]
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c66:	493f      	ldr	r1, [pc, #252]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	670b      	str	r3, [r1, #112]	; 0x70
 8002c6c:	e004      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	75bb      	strb	r3, [r7, #22]
 8002c72:	e001      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8085 	beq.w	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c8a:	2b28      	cmp	r3, #40	; 0x28
 8002c8c:	d866      	bhi.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002d71 	.word	0x08002d71
 8002c98:	08002d5d 	.word	0x08002d5d
 8002c9c:	08002d5d 	.word	0x08002d5d
 8002ca0:	08002d5d 	.word	0x08002d5d
 8002ca4:	08002d5d 	.word	0x08002d5d
 8002ca8:	08002d5d 	.word	0x08002d5d
 8002cac:	08002d5d 	.word	0x08002d5d
 8002cb0:	08002d5d 	.word	0x08002d5d
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002d5d 	.word	0x08002d5d
 8002cbc:	08002d5d 	.word	0x08002d5d
 8002cc0:	08002d5d 	.word	0x08002d5d
 8002cc4:	08002d5d 	.word	0x08002d5d
 8002cc8:	08002d5d 	.word	0x08002d5d
 8002ccc:	08002d5d 	.word	0x08002d5d
 8002cd0:	08002d5d 	.word	0x08002d5d
 8002cd4:	08002d4b 	.word	0x08002d4b
 8002cd8:	08002d5d 	.word	0x08002d5d
 8002cdc:	08002d5d 	.word	0x08002d5d
 8002ce0:	08002d5d 	.word	0x08002d5d
 8002ce4:	08002d5d 	.word	0x08002d5d
 8002ce8:	08002d5d 	.word	0x08002d5d
 8002cec:	08002d5d 	.word	0x08002d5d
 8002cf0:	08002d5d 	.word	0x08002d5d
 8002cf4:	08002d71 	.word	0x08002d71
 8002cf8:	08002d5d 	.word	0x08002d5d
 8002cfc:	08002d5d 	.word	0x08002d5d
 8002d00:	08002d5d 	.word	0x08002d5d
 8002d04:	08002d5d 	.word	0x08002d5d
 8002d08:	08002d5d 	.word	0x08002d5d
 8002d0c:	08002d5d 	.word	0x08002d5d
 8002d10:	08002d5d 	.word	0x08002d5d
 8002d14:	08002d71 	.word	0x08002d71
 8002d18:	08002d5d 	.word	0x08002d5d
 8002d1c:	08002d5d 	.word	0x08002d5d
 8002d20:	08002d5d 	.word	0x08002d5d
 8002d24:	08002d5d 	.word	0x08002d5d
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	08002d5d 	.word	0x08002d5d
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08002d71 	.word	0x08002d71
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fdfa 	bl	8003938 <RCCEx_PLL2_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d48:	e013      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3324      	adds	r3, #36	; 0x24
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fea3 	bl	8003a9c <RCCEx_PLL3_Config>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d60:	e007      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d62:	bf00      	nop
 8002d64:	58024400 	.word	0x58024400
 8002d68:	58024800 	.word	0x58024800
 8002d6c:	00ffffcf 	.word	0x00ffffcf
      break;
 8002d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d78:	4b96      	ldr	r3, [pc, #600]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d84:	4993      	ldr	r1, [pc, #588]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	654b      	str	r3, [r1, #84]	; 0x54
 8002d8a:	e001      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d038      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d821      	bhi.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002def 	.word	0x08002def
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dd7 	.word	0x08002dd7
 8002db8:	08002def 	.word	0x08002def
 8002dbc:	08002def 	.word	0x08002def
 8002dc0:	08002def 	.word	0x08002def
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fdb4 	bl	8003938 <RCCEx_PLL2_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002dd4:	e00c      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3324      	adds	r3, #36	; 0x24
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fe5d 	bl	8003a9c <RCCEx_PLL3_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002de6:	e003      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
      break;
 8002dec:	e000      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002df6:	4b77      	ldr	r3, [pc, #476]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	4974      	ldr	r1, [pc, #464]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	654b      	str	r3, [r1, #84]	; 0x54
 8002e08:	e001      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d821      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e6f 	.word	0x08002e6f
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e57 	.word	0x08002e57
 8002e38:	08002e6f 	.word	0x08002e6f
 8002e3c:	08002e6f 	.word	0x08002e6f
 8002e40:	08002e6f 	.word	0x08002e6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fd74 	bl	8003938 <RCCEx_PLL2_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e54:	e00c      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fe1d 	bl	8003a9c <RCCEx_PLL3_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e66:	e003      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6c:	e000      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	4953      	ldr	r1, [pc, #332]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	658b      	str	r3, [r1, #88]	; 0x58
 8002e8a:	e001      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d04b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea6:	d02e      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eac:	d828      	bhi.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d02a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb8:	d822      	bhi.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ebe:	d026      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ec4:	d81c      	bhi.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eca:	d010      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed0:	d816      	bhi.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01d      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eda:	d111      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fd28 	bl	8003938 <RCCEx_PLL2_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002eec:	e012      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3324      	adds	r3, #36	; 0x24
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fdd1 	bl	8003a9c <RCCEx_PLL3_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002efe:	e009      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
      break;
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e004      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	492a      	ldr	r1, [pc, #168]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	654b      	str	r3, [r1, #84]	; 0x54
 8002f2e:	e001      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d04d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f4a:	d02e      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002f4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f50:	d828      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d02a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d822      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f62:	d026      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f68:	d81c      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f74:	d816      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01d      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d111      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fcd6 	bl	8003938 <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f90:	e012      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3324      	adds	r3, #36	; 0x24
 8002f96:	2102      	movs	r1, #2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fd7f 	bl	8003a9c <RCCEx_PLL3_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fa2:	e009      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa8:	e006      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002faa:	bf00      	nop
 8002fac:	e004      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fcc:	4901      	ldr	r1, [pc, #4]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8002fd2:	e003      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d04b      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ff2:	d02e      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002ff4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ff8:	d828      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffe:	d02a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003004:	d822      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003006:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800300a:	d026      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800300c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003010:	d81c      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003016:	d010      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800301c:	d816      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01d      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003026:	d111      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fc82 	bl	8003938 <RCCEx_PLL2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003038:	e012      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3324      	adds	r3, #36	; 0x24
 800303e:	2102      	movs	r1, #2
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fd2b 	bl	8003a9c <RCCEx_PLL3_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800304a:	e009      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	75fb      	strb	r3, [r7, #23]
      break;
 8003050:	e006      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003052:	bf00      	nop
 8003054:	e004      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003056:	bf00      	nop
 8003058:	e002      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800305a:	bf00      	nop
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800305e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003066:	4b9d      	ldr	r3, [pc, #628]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003074:	4999      	ldr	r1, [pc, #612]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003076:	4313      	orrs	r3, r2
 8003078:	658b      	str	r3, [r1, #88]	; 0x58
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d10a      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	2102      	movs	r1, #2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fcfc 	bl	8003a9c <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030ae:	4b8b      	ldr	r3, [pc, #556]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030bc:	4987      	ldr	r1, [pc, #540]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d8:	d10a      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3324      	adds	r3, #36	; 0x24
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fcdb 	bl	8003a9c <RCCEx_PLL3_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030f0:	4b7a      	ldr	r3, [pc, #488]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fe:	4977      	ldr	r1, [pc, #476]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003100:	4313      	orrs	r3, r2
 8003102:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d034      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800311a:	d01d      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800311c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003120:	d817      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d009      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800312c:	e011      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fbff 	bl	8003938 <RCCEx_PLL2_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800313e:	e00c      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3324      	adds	r3, #36	; 0x24
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fca8 	bl	8003a9c <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003150:	e003      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
      break;
 8003156:	e000      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003160:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800316e:	495b      	ldr	r1, [pc, #364]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003170:	4313      	orrs	r3, r2
 8003172:	658b      	str	r3, [r1, #88]	; 0x58
 8003174:	e001      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d033      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003190:	d01c      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003196:	d816      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800319c:	d003      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800319e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a2:	d007      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80031a4:	e00f      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a6:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	4a4c      	ldr	r2, [pc, #304]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80031b2:	e00c      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3324      	adds	r3, #36	; 0x24
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fc6e 	bl	8003a9c <RCCEx_PLL3_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80031c4:	e003      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ca:	e000      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80031cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d4:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e2:	493e      	ldr	r1, [pc, #248]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	654b      	str	r3, [r1, #84]	; 0x54
 80031e8:	e001      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d029      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003206:	d007      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003208:	e00f      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003216:	e00b      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	2102      	movs	r1, #2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fb8a 	bl	8003938 <RCCEx_PLL2_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003228:	e002      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
      break;
 800322e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	4926      	ldr	r1, [pc, #152]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003244:	4313      	orrs	r3, r2
 8003246:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003248:	e001      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3324      	adds	r3, #36	; 0x24
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fc1b 	bl	8003a9c <RCCEx_PLL3_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d033      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003284:	d017      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328a:	d811      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d013      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003296:	d80b      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800329c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a0:	d106      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80032ae:	e007      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	e004      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80032be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d2:	4902      	ldr	r1, [pc, #8]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	654b      	str	r3, [r1, #84]	; 0x54
 80032d8:	e004      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80032da:	bf00      	nop
 80032dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	492e      	ldr	r1, [pc, #184]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800331c:	4926      	ldr	r1, [pc, #152]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800331e:	4313      	orrs	r3, r2
 8003320:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003332:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800333a:	491f      	ldr	r1, [pc, #124]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800333c:	4313      	orrs	r3, r2
 800333e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003352:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003356:	6113      	str	r3, [r2, #16]
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003362:	4915      	ldr	r1, [pc, #84]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003364:	4313      	orrs	r3, r2
 8003366:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	da08      	bge.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003374:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800337e:	4313      	orrs	r3, r2
 8003380:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	4906      	ldr	r1, [pc, #24]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80033a2:	7dbb      	ldrb	r3, [r7, #22]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	58024400 	.word	0x58024400

080033bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80033c0:	f7ff f85a 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4904      	ldr	r1, [pc, #16]	; (80033e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	58024400 	.word	0x58024400
 80033e4:	08004d50 	.word	0x08004d50

080033e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033f0:	4ba1      	ldr	r3, [pc, #644]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80033fa:	4b9f      	ldr	r3, [pc, #636]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	0b1b      	lsrs	r3, r3, #12
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003406:	4b9c      	ldr	r3, [pc, #624]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003412:	4b99      	ldr	r3, [pc, #612]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8111 	beq.w	8003658 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b02      	cmp	r3, #2
 800343a:	f000 8083 	beq.w	8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b02      	cmp	r3, #2
 8003442:	f200 80a1 	bhi.w	8003588 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d056      	beq.n	8003500 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003452:	e099      	b.n	8003588 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003454:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02d      	beq.n	80034bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003460:	4b85      	ldr	r3, [pc, #532]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	08db      	lsrs	r3, r3, #3
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	4a84      	ldr	r2, [pc, #528]	; (800367c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348a:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349a:	ed97 6a03 	vldr	s12, [r7, #12]
 800349e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034ba:	e087      	b.n	80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80034ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ce:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034de:	ed97 6a03 	vldr	s12, [r7, #12]
 80034e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034fe:	e065      	b.n	80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800350e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003512:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003522:	ed97 6a03 	vldr	s12, [r7, #12]
 8003526:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800352a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800352e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003542:	e043      	b.n	80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800368c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003556:	4b48      	ldr	r3, [pc, #288]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003566:	ed97 6a03 	vldr	s12, [r7, #12]
 800356a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800356e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003586:	e021      	b.n	80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003592:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80035ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	0a5b      	lsrs	r3, r3, #9
 80035d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80035ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f2:	ee17 2a90 	vmov	r2, s15
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003610:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003614:	edd7 6a07 	vldr	s13, [r7, #28]
 8003618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003620:	ee17 2a90 	vmov	r2, s15
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	0e1b      	lsrs	r3, r3, #24
 800362e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800363e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003642:	edd7 6a07 	vldr	s13, [r7, #28]
 8003646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364e:	ee17 2a90 	vmov	r2, s15
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003656:	e008      	b.n	800366a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	58024400 	.word	0x58024400
 800367c:	03d09000 	.word	0x03d09000
 8003680:	46000000 	.word	0x46000000
 8003684:	4c742400 	.word	0x4c742400
 8003688:	4a742400 	.word	0x4a742400
 800368c:	4bbebc20 	.word	0x4bbebc20

08003690 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	; 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003698:	4ba1      	ldr	r3, [pc, #644]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036a2:	4b9f      	ldr	r3, [pc, #636]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	0d1b      	lsrs	r3, r3, #20
 80036a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036ae:	4b9c      	ldr	r3, [pc, #624]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036ba:	4b99      	ldr	r3, [pc, #612]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	08db      	lsrs	r3, r3, #3
 80036c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8111 	beq.w	8003900 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	f000 8083 	beq.w	80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	f200 80a1 	bhi.w	8003830 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d056      	beq.n	80037a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80036fa:	e099      	b.n	8003830 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036fc:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02d      	beq.n	8003764 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003708:	4b85      	ldr	r3, [pc, #532]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	4a84      	ldr	r2, [pc, #528]	; (8003924 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a03 	vldr	s12, [r7, #12]
 8003746:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003762:	e087      	b.n	8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800392c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a03 	vldr	s12, [r7, #12]
 800378a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037a6:	e065      	b.n	8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037ea:	e043      	b.n	8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b48      	ldr	r3, [pc, #288]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003812:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800382e:	e021      	b.n	8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a03 	vldr	s12, [r7, #12]
 8003856:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003872:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	0a5b      	lsrs	r3, r3, #9
 800387a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800388e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389a:	ee17 2a90 	vmov	r2, s15
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80038a2:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c8:	ee17 2a90 	vmov	r2, s15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	0e1b      	lsrs	r3, r3, #24
 80038d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 2a90 	vmov	r2, s15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80038fe:	e008      	b.n	8003912 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
}
 8003912:	bf00      	nop
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	58024400 	.word	0x58024400
 8003924:	03d09000 	.word	0x03d09000
 8003928:	46000000 	.word	0x46000000
 800392c:	4c742400 	.word	0x4c742400
 8003930:	4a742400 	.word	0x4a742400
 8003934:	4bbebc20 	.word	0x4bbebc20

08003938 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003946:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b03      	cmp	r3, #3
 8003950:	d101      	bne.n	8003956 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e099      	b.n	8003a8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003956:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4e      	ldr	r2, [pc, #312]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 800395c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003962:	f7fd faf7 	bl	8000f54 <HAL_GetTick>
 8003966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003968:	e008      	b.n	800397c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800396a:	f7fd faf3 	bl	8000f54 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e086      	b.n	8003a8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800397c:	4b45      	ldr	r3, [pc, #276]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003988:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	031b      	lsls	r3, r3, #12
 8003996:	493f      	ldr	r1, [pc, #252]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	628b      	str	r3, [r1, #40]	; 0x28
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	025b      	lsls	r3, r3, #9
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039cc:	4931      	ldr	r1, [pc, #196]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039d2:	4b30      	ldr	r3, [pc, #192]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	492d      	ldr	r1, [pc, #180]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039e4:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	f023 0220 	bic.w	r2, r3, #32
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	4928      	ldr	r1, [pc, #160]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039f6:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	4a26      	ldr	r2, [pc, #152]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a02:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <RCCEx_PLL2_Config+0x160>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	69d2      	ldr	r2, [r2, #28]
 8003a0e:	00d2      	lsls	r2, r2, #3
 8003a10:	4920      	ldr	r1, [pc, #128]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a16:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a1c:	f043 0310 	orr.w	r3, r3, #16
 8003a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a34:	e00f      	b.n	8003a56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a48:	e005      	b.n	8003a56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a62:	f7fd fa77 	bl	8000f54 <HAL_GetTick>
 8003a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a6a:	f7fd fa73 	bl	8000f54 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <RCCEx_PLL2_Config+0x15c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	58024400 	.word	0x58024400
 8003a98:	ffff0007 	.word	0xffff0007

08003a9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003aaa:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d101      	bne.n	8003aba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e099      	b.n	8003bee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003aba:	4b4f      	ldr	r3, [pc, #316]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4e      	ldr	r2, [pc, #312]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fa45 	bl	8000f54 <HAL_GetTick>
 8003aca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ace:	f7fd fa41 	bl	8000f54 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e086      	b.n	8003bee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ae0:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003aec:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	051b      	lsls	r3, r3, #20
 8003afa:	493f      	ldr	r1, [pc, #252]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	628b      	str	r3, [r1, #40]	; 0x28
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	025b      	lsls	r3, r3, #9
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b30:	4931      	ldr	r1, [pc, #196]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	492d      	ldr	r1, [pc, #180]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	4928      	ldr	r1, [pc, #160]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <RCCEx_PLL3_Config+0x160>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	69d2      	ldr	r2, [r2, #28]
 8003b72:	00d2      	lsls	r2, r2, #3
 8003b74:	4920      	ldr	r1, [pc, #128]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b98:	e00f      	b.n	8003bba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003ba6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bac:	e005      	b.n	8003bba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc6:	f7fd f9c5 	bl	8000f54 <HAL_GetTick>
 8003bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bcc:	e008      	b.n	8003be0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bce:	f7fd f9c1 	bl	8000f54 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e006      	b.n	8003bee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <RCCEx_PLL3_Config+0x15c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	ffff0007 	.word	0xffff0007

08003c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e042      	b.n	8003c98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fc ff23 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2224      	movs	r2, #36	; 0x24
 8003c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f82c 	bl	8003ca0 <UART_SetConfig>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e022      	b.n	8003c98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fd88 	bl	8004770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fe0f 	bl	80048b4 <UART_CheckIdleState>
 8003c96:	4603      	mov	r3, r0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b092      	sub	sp, #72	; 0x48
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4bbe      	ldr	r3, [pc, #760]	; (8003fc8 <UART_SetConfig+0x328>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4ab3      	ldr	r2, [pc, #716]	; (8003fcc <UART_SetConfig+0x32c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	4baf      	ldr	r3, [pc, #700]	; (8003fd0 <UART_SetConfig+0x330>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	f023 010f 	bic.w	r1, r3, #15
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4aa6      	ldr	r2, [pc, #664]	; (8003fd4 <UART_SetConfig+0x334>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d177      	bne.n	8003e30 <UART_SetConfig+0x190>
 8003d40:	4ba5      	ldr	r3, [pc, #660]	; (8003fd8 <UART_SetConfig+0x338>)
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d48:	2b28      	cmp	r3, #40	; 0x28
 8003d4a:	d86d      	bhi.n	8003e28 <UART_SetConfig+0x188>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <UART_SetConfig+0xb4>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003df9 	.word	0x08003df9
 8003d58:	08003e29 	.word	0x08003e29
 8003d5c:	08003e29 	.word	0x08003e29
 8003d60:	08003e29 	.word	0x08003e29
 8003d64:	08003e29 	.word	0x08003e29
 8003d68:	08003e29 	.word	0x08003e29
 8003d6c:	08003e29 	.word	0x08003e29
 8003d70:	08003e29 	.word	0x08003e29
 8003d74:	08003e01 	.word	0x08003e01
 8003d78:	08003e29 	.word	0x08003e29
 8003d7c:	08003e29 	.word	0x08003e29
 8003d80:	08003e29 	.word	0x08003e29
 8003d84:	08003e29 	.word	0x08003e29
 8003d88:	08003e29 	.word	0x08003e29
 8003d8c:	08003e29 	.word	0x08003e29
 8003d90:	08003e29 	.word	0x08003e29
 8003d94:	08003e09 	.word	0x08003e09
 8003d98:	08003e29 	.word	0x08003e29
 8003d9c:	08003e29 	.word	0x08003e29
 8003da0:	08003e29 	.word	0x08003e29
 8003da4:	08003e29 	.word	0x08003e29
 8003da8:	08003e29 	.word	0x08003e29
 8003dac:	08003e29 	.word	0x08003e29
 8003db0:	08003e29 	.word	0x08003e29
 8003db4:	08003e11 	.word	0x08003e11
 8003db8:	08003e29 	.word	0x08003e29
 8003dbc:	08003e29 	.word	0x08003e29
 8003dc0:	08003e29 	.word	0x08003e29
 8003dc4:	08003e29 	.word	0x08003e29
 8003dc8:	08003e29 	.word	0x08003e29
 8003dcc:	08003e29 	.word	0x08003e29
 8003dd0:	08003e29 	.word	0x08003e29
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e29 	.word	0x08003e29
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	08003e29 	.word	0x08003e29
 8003de4:	08003e29 	.word	0x08003e29
 8003de8:	08003e29 	.word	0x08003e29
 8003dec:	08003e29 	.word	0x08003e29
 8003df0:	08003e29 	.word	0x08003e29
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dfe:	e222      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e06:	e21e      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e0e:	e21a      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e16:	e216      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e18:	2320      	movs	r3, #32
 8003e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e1e:	e212      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e20:	2340      	movs	r3, #64	; 0x40
 8003e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e26:	e20e      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e2e:	e20a      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a69      	ldr	r2, [pc, #420]	; (8003fdc <UART_SetConfig+0x33c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d130      	bne.n	8003e9c <UART_SetConfig+0x1fc>
 8003e3a:	4b67      	ldr	r3, [pc, #412]	; (8003fd8 <UART_SetConfig+0x338>)
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d826      	bhi.n	8003e94 <UART_SetConfig+0x1f4>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x1ac>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e65 	.word	0x08003e65
 8003e50:	08003e6d 	.word	0x08003e6d
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e6a:	e1ec      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e72:	e1e8      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e7a:	e1e4      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e82:	e1e0      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e84:	2320      	movs	r3, #32
 8003e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e8a:	e1dc      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e8c:	2340      	movs	r3, #64	; 0x40
 8003e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e92:	e1d8      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e9a:	e1d4      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a4f      	ldr	r2, [pc, #316]	; (8003fe0 <UART_SetConfig+0x340>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d130      	bne.n	8003f08 <UART_SetConfig+0x268>
 8003ea6:	4b4c      	ldr	r3, [pc, #304]	; (8003fd8 <UART_SetConfig+0x338>)
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d826      	bhi.n	8003f00 <UART_SetConfig+0x260>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <UART_SetConfig+0x218>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ed1 	.word	0x08003ed1
 8003ebc:	08003ed9 	.word	0x08003ed9
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ed6:	e1b6      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ede:	e1b2      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee6:	e1ae      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eee:	e1aa      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ef6:	e1a6      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003ef8:	2340      	movs	r3, #64	; 0x40
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efe:	e1a2      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f06:	e19e      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <UART_SetConfig+0x344>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d130      	bne.n	8003f74 <UART_SetConfig+0x2d4>
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <UART_SetConfig+0x338>)
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d826      	bhi.n	8003f6c <UART_SetConfig+0x2cc>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x284>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f3d 	.word	0x08003f3d
 8003f28:	08003f45 	.word	0x08003f45
 8003f2c:	08003f4d 	.word	0x08003f4d
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f42:	e180      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f44:	2304      	movs	r3, #4
 8003f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4a:	e17c      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f52:	e178      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f54:	2310      	movs	r3, #16
 8003f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f5a:	e174      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f62:	e170      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f64:	2340      	movs	r3, #64	; 0x40
 8003f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f6a:	e16c      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f72:	e168      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <UART_SetConfig+0x348>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d142      	bne.n	8004004 <UART_SetConfig+0x364>
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <UART_SetConfig+0x338>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d838      	bhi.n	8003ffc <UART_SetConfig+0x35c>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0x2f0>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa9 	.word	0x08003fa9
 8003f94:	08003fb1 	.word	0x08003fb1
 8003f98:	08003fb9 	.word	0x08003fb9
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fed 	.word	0x08003fed
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fae:	e14a      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fb6:	e146      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fbe:	e142      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fc6:	e13e      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003fc8:	cfff69f3 	.word	0xcfff69f3
 8003fcc:	58000c00 	.word	0x58000c00
 8003fd0:	11fff4ff 	.word	0x11fff4ff
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	40004800 	.word	0x40004800
 8003fe4:	40004c00 	.word	0x40004c00
 8003fe8:	40005000 	.word	0x40005000
 8003fec:	2320      	movs	r3, #32
 8003fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ff2:	e128      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003ff4:	2340      	movs	r3, #64	; 0x40
 8003ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ffa:	e124      	b.n	8004246 <UART_SetConfig+0x5a6>
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004002:	e120      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4acb      	ldr	r2, [pc, #812]	; (8004338 <UART_SetConfig+0x698>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d176      	bne.n	80040fc <UART_SetConfig+0x45c>
 800400e:	4bcb      	ldr	r3, [pc, #812]	; (800433c <UART_SetConfig+0x69c>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004016:	2b28      	cmp	r3, #40	; 0x28
 8004018:	d86c      	bhi.n	80040f4 <UART_SetConfig+0x454>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x380>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	080040c5 	.word	0x080040c5
 8004024:	080040f5 	.word	0x080040f5
 8004028:	080040f5 	.word	0x080040f5
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040f5 	.word	0x080040f5
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040cd 	.word	0x080040cd
 8004044:	080040f5 	.word	0x080040f5
 8004048:	080040f5 	.word	0x080040f5
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040f5 	.word	0x080040f5
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040d5 	.word	0x080040d5
 8004064:	080040f5 	.word	0x080040f5
 8004068:	080040f5 	.word	0x080040f5
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040f5 	.word	0x080040f5
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040dd 	.word	0x080040dd
 8004084:	080040f5 	.word	0x080040f5
 8004088:	080040f5 	.word	0x080040f5
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040f5 	.word	0x080040f5
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040e5 	.word	0x080040e5
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	080040f5 	.word	0x080040f5
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ca:	e0bc      	b.n	8004246 <UART_SetConfig+0x5a6>
 80040cc:	2304      	movs	r3, #4
 80040ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040d2:	e0b8      	b.n	8004246 <UART_SetConfig+0x5a6>
 80040d4:	2308      	movs	r3, #8
 80040d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040da:	e0b4      	b.n	8004246 <UART_SetConfig+0x5a6>
 80040dc:	2310      	movs	r3, #16
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040e2:	e0b0      	b.n	8004246 <UART_SetConfig+0x5a6>
 80040e4:	2320      	movs	r3, #32
 80040e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ea:	e0ac      	b.n	8004246 <UART_SetConfig+0x5a6>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040f2:	e0a8      	b.n	8004246 <UART_SetConfig+0x5a6>
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040fa:	e0a4      	b.n	8004246 <UART_SetConfig+0x5a6>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a8f      	ldr	r2, [pc, #572]	; (8004340 <UART_SetConfig+0x6a0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d130      	bne.n	8004168 <UART_SetConfig+0x4c8>
 8004106:	4b8d      	ldr	r3, [pc, #564]	; (800433c <UART_SetConfig+0x69c>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b05      	cmp	r3, #5
 8004110:	d826      	bhi.n	8004160 <UART_SetConfig+0x4c0>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x478>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004131 	.word	0x08004131
 800411c:	08004139 	.word	0x08004139
 8004120:	08004141 	.word	0x08004141
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004136:	e086      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004138:	2304      	movs	r3, #4
 800413a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800413e:	e082      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004140:	2308      	movs	r3, #8
 8004142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004146:	e07e      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004148:	2310      	movs	r3, #16
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800414e:	e07a      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004150:	2320      	movs	r3, #32
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004156:	e076      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800415e:	e072      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004166:	e06e      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a75      	ldr	r2, [pc, #468]	; (8004344 <UART_SetConfig+0x6a4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d130      	bne.n	80041d4 <UART_SetConfig+0x534>
 8004172:	4b72      	ldr	r3, [pc, #456]	; (800433c <UART_SetConfig+0x69c>)
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	2b05      	cmp	r3, #5
 800417c:	d826      	bhi.n	80041cc <UART_SetConfig+0x52c>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <UART_SetConfig+0x4e4>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	0800419d 	.word	0x0800419d
 8004188:	080041a5 	.word	0x080041a5
 800418c:	080041ad 	.word	0x080041ad
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041c5 	.word	0x080041c5
 800419c:	2300      	movs	r3, #0
 800419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a2:	e050      	b.n	8004246 <UART_SetConfig+0x5a6>
 80041a4:	2304      	movs	r3, #4
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041aa:	e04c      	b.n	8004246 <UART_SetConfig+0x5a6>
 80041ac:	2308      	movs	r3, #8
 80041ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b2:	e048      	b.n	8004246 <UART_SetConfig+0x5a6>
 80041b4:	2310      	movs	r3, #16
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ba:	e044      	b.n	8004246 <UART_SetConfig+0x5a6>
 80041bc:	2320      	movs	r3, #32
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c2:	e040      	b.n	8004246 <UART_SetConfig+0x5a6>
 80041c4:	2340      	movs	r3, #64	; 0x40
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ca:	e03c      	b.n	8004246 <UART_SetConfig+0x5a6>
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d2:	e038      	b.n	8004246 <UART_SetConfig+0x5a6>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5b      	ldr	r2, [pc, #364]	; (8004348 <UART_SetConfig+0x6a8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d130      	bne.n	8004240 <UART_SetConfig+0x5a0>
 80041de:	4b57      	ldr	r3, [pc, #348]	; (800433c <UART_SetConfig+0x69c>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d826      	bhi.n	8004238 <UART_SetConfig+0x598>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <UART_SetConfig+0x550>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004209 	.word	0x08004209
 80041f4:	08004211 	.word	0x08004211
 80041f8:	08004219 	.word	0x08004219
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	2302      	movs	r3, #2
 800420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420e:	e01a      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004210:	2304      	movs	r3, #4
 8004212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004216:	e016      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004218:	2308      	movs	r3, #8
 800421a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421e:	e012      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004220:	2310      	movs	r3, #16
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004226:	e00e      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004228:	2320      	movs	r3, #32
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422e:	e00a      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004236:	e006      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423e:	e002      	b.n	8004246 <UART_SetConfig+0x5a6>
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <UART_SetConfig+0x6a8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	f040 80f8 	bne.w	8004442 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004252:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004256:	2b20      	cmp	r3, #32
 8004258:	dc46      	bgt.n	80042e8 <UART_SetConfig+0x648>
 800425a:	2b02      	cmp	r3, #2
 800425c:	f2c0 8082 	blt.w	8004364 <UART_SetConfig+0x6c4>
 8004260:	3b02      	subs	r3, #2
 8004262:	2b1e      	cmp	r3, #30
 8004264:	d87e      	bhi.n	8004364 <UART_SetConfig+0x6c4>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x5cc>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042ef 	.word	0x080042ef
 8004270:	08004365 	.word	0x08004365
 8004274:	080042f7 	.word	0x080042f7
 8004278:	08004365 	.word	0x08004365
 800427c:	08004365 	.word	0x08004365
 8004280:	08004365 	.word	0x08004365
 8004284:	08004307 	.word	0x08004307
 8004288:	08004365 	.word	0x08004365
 800428c:	08004365 	.word	0x08004365
 8004290:	08004365 	.word	0x08004365
 8004294:	08004365 	.word	0x08004365
 8004298:	08004365 	.word	0x08004365
 800429c:	08004365 	.word	0x08004365
 80042a0:	08004365 	.word	0x08004365
 80042a4:	08004317 	.word	0x08004317
 80042a8:	08004365 	.word	0x08004365
 80042ac:	08004365 	.word	0x08004365
 80042b0:	08004365 	.word	0x08004365
 80042b4:	08004365 	.word	0x08004365
 80042b8:	08004365 	.word	0x08004365
 80042bc:	08004365 	.word	0x08004365
 80042c0:	08004365 	.word	0x08004365
 80042c4:	08004365 	.word	0x08004365
 80042c8:	08004365 	.word	0x08004365
 80042cc:	08004365 	.word	0x08004365
 80042d0:	08004365 	.word	0x08004365
 80042d4:	08004365 	.word	0x08004365
 80042d8:	08004365 	.word	0x08004365
 80042dc:	08004365 	.word	0x08004365
 80042e0:	08004365 	.word	0x08004365
 80042e4:	08004357 	.word	0x08004357
 80042e8:	2b40      	cmp	r3, #64	; 0x40
 80042ea:	d037      	beq.n	800435c <UART_SetConfig+0x6bc>
 80042ec:	e03a      	b.n	8004364 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80042ee:	f7ff f865 	bl	80033bc <HAL_RCCEx_GetD3PCLK1Freq>
 80042f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80042f4:	e03c      	b.n	8004370 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f874 	bl	80033e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004304:	e034      	b.n	8004370 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004306:	f107 0318 	add.w	r3, r7, #24
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f9c0 	bl	8003690 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004314:	e02c      	b.n	8004370 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <UART_SetConfig+0x69c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d016      	beq.n	8004350 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <UART_SetConfig+0x69c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	08db      	lsrs	r3, r3, #3
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <UART_SetConfig+0x6ac>)
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004334:	e01c      	b.n	8004370 <UART_SetConfig+0x6d0>
 8004336:	bf00      	nop
 8004338:	40011400 	.word	0x40011400
 800433c:	58024400 	.word	0x58024400
 8004340:	40007800 	.word	0x40007800
 8004344:	40007c00 	.word	0x40007c00
 8004348:	58000c00 	.word	0x58000c00
 800434c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004350:	4b9d      	ldr	r3, [pc, #628]	; (80045c8 <UART_SetConfig+0x928>)
 8004352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004354:	e00c      	b.n	8004370 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004356:	4b9d      	ldr	r3, [pc, #628]	; (80045cc <UART_SetConfig+0x92c>)
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800435a:	e009      	b.n	8004370 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004362:	e005      	b.n	8004370 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800436e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 81de 	beq.w	8004734 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	4a94      	ldr	r2, [pc, #592]	; (80045d0 <UART_SetConfig+0x930>)
 800437e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004382:	461a      	mov	r2, r3
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	fbb3 f3f2 	udiv	r3, r3, r2
 800438a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004398:	429a      	cmp	r2, r3
 800439a:	d305      	bcc.n	80043a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d903      	bls.n	80043b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80043ae:	e1c1      	b.n	8004734 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	2200      	movs	r2, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	60fa      	str	r2, [r7, #12]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	4a84      	ldr	r2, [pc, #528]	; (80045d0 <UART_SetConfig+0x930>)
 80043be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2200      	movs	r2, #0
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043d2:	f7fb ff81 	bl	80002d8 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	020b      	lsls	r3, r1, #8
 80043e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043ec:	0202      	lsls	r2, r0, #8
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	6849      	ldr	r1, [r1, #4]
 80043f2:	0849      	lsrs	r1, r1, #1
 80043f4:	2000      	movs	r0, #0
 80043f6:	460c      	mov	r4, r1
 80043f8:	4605      	mov	r5, r0
 80043fa:	eb12 0804 	adds.w	r8, r2, r4
 80043fe:	eb43 0905 	adc.w	r9, r3, r5
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	469a      	mov	sl, r3
 800440a:	4693      	mov	fp, r2
 800440c:	4652      	mov	r2, sl
 800440e:	465b      	mov	r3, fp
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	f7fb ff60 	bl	80002d8 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004426:	d308      	bcc.n	800443a <UART_SetConfig+0x79a>
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d204      	bcs.n	800443a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e17c      	b.n	8004734 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004440:	e178      	b.n	8004734 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444a:	f040 80c5 	bne.w	80045d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800444e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004452:	2b20      	cmp	r3, #32
 8004454:	dc48      	bgt.n	80044e8 <UART_SetConfig+0x848>
 8004456:	2b00      	cmp	r3, #0
 8004458:	db7b      	blt.n	8004552 <UART_SetConfig+0x8b2>
 800445a:	2b20      	cmp	r3, #32
 800445c:	d879      	bhi.n	8004552 <UART_SetConfig+0x8b2>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x7c4>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	080044ef 	.word	0x080044ef
 8004468:	080044f7 	.word	0x080044f7
 800446c:	08004553 	.word	0x08004553
 8004470:	08004553 	.word	0x08004553
 8004474:	080044ff 	.word	0x080044ff
 8004478:	08004553 	.word	0x08004553
 800447c:	08004553 	.word	0x08004553
 8004480:	08004553 	.word	0x08004553
 8004484:	0800450f 	.word	0x0800450f
 8004488:	08004553 	.word	0x08004553
 800448c:	08004553 	.word	0x08004553
 8004490:	08004553 	.word	0x08004553
 8004494:	08004553 	.word	0x08004553
 8004498:	08004553 	.word	0x08004553
 800449c:	08004553 	.word	0x08004553
 80044a0:	08004553 	.word	0x08004553
 80044a4:	0800451f 	.word	0x0800451f
 80044a8:	08004553 	.word	0x08004553
 80044ac:	08004553 	.word	0x08004553
 80044b0:	08004553 	.word	0x08004553
 80044b4:	08004553 	.word	0x08004553
 80044b8:	08004553 	.word	0x08004553
 80044bc:	08004553 	.word	0x08004553
 80044c0:	08004553 	.word	0x08004553
 80044c4:	08004553 	.word	0x08004553
 80044c8:	08004553 	.word	0x08004553
 80044cc:	08004553 	.word	0x08004553
 80044d0:	08004553 	.word	0x08004553
 80044d4:	08004553 	.word	0x08004553
 80044d8:	08004553 	.word	0x08004553
 80044dc:	08004553 	.word	0x08004553
 80044e0:	08004553 	.word	0x08004553
 80044e4:	08004545 	.word	0x08004545
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d02e      	beq.n	800454a <UART_SetConfig+0x8aa>
 80044ec:	e031      	b.n	8004552 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ee:	f7fd fff3 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80044f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044f4:	e033      	b.n	800455e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f6:	f7fe f805 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 80044fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044fc:	e02f      	b.n	800455e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe ff70 	bl	80033e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800450c:	e027      	b.n	800455e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800450e:	f107 0318 	add.w	r3, r7, #24
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f8bc 	bl	8003690 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800451c:	e01f      	b.n	800455e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451e:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <UART_SetConfig+0x934>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800452a:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <UART_SetConfig+0x934>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	08db      	lsrs	r3, r3, #3
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <UART_SetConfig+0x928>)
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800453c:	e00f      	b.n	800455e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800453e:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <UART_SetConfig+0x928>)
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004542:	e00c      	b.n	800455e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <UART_SetConfig+0x92c>)
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004548:	e009      	b.n	800455e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004550:	e005      	b.n	800455e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800455c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80e7 	beq.w	8004734 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <UART_SetConfig+0x930>)
 800456c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004570:	461a      	mov	r2, r3
 8004572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004574:	fbb3 f3f2 	udiv	r3, r3, r2
 8004578:	005a      	lsls	r2, r3, #1
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	441a      	add	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	2b0f      	cmp	r3, #15
 8004590:	d916      	bls.n	80045c0 <UART_SetConfig+0x920>
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d212      	bcs.n	80045c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	b29b      	uxth	r3, r3
 800459e:	f023 030f 	bic.w	r3, r3, #15
 80045a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045b2:	4313      	orrs	r3, r2
 80045b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	e0b9      	b.n	8004734 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80045c6:	e0b5      	b.n	8004734 <UART_SetConfig+0xa94>
 80045c8:	03d09000 	.word	0x03d09000
 80045cc:	003d0900 	.word	0x003d0900
 80045d0:	08004d60 	.word	0x08004d60
 80045d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045dc:	2b20      	cmp	r3, #32
 80045de:	dc49      	bgt.n	8004674 <UART_SetConfig+0x9d4>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	db7c      	blt.n	80046de <UART_SetConfig+0xa3e>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d87a      	bhi.n	80046de <UART_SetConfig+0xa3e>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x950>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	0800467b 	.word	0x0800467b
 80045f4:	08004683 	.word	0x08004683
 80045f8:	080046df 	.word	0x080046df
 80045fc:	080046df 	.word	0x080046df
 8004600:	0800468b 	.word	0x0800468b
 8004604:	080046df 	.word	0x080046df
 8004608:	080046df 	.word	0x080046df
 800460c:	080046df 	.word	0x080046df
 8004610:	0800469b 	.word	0x0800469b
 8004614:	080046df 	.word	0x080046df
 8004618:	080046df 	.word	0x080046df
 800461c:	080046df 	.word	0x080046df
 8004620:	080046df 	.word	0x080046df
 8004624:	080046df 	.word	0x080046df
 8004628:	080046df 	.word	0x080046df
 800462c:	080046df 	.word	0x080046df
 8004630:	080046ab 	.word	0x080046ab
 8004634:	080046df 	.word	0x080046df
 8004638:	080046df 	.word	0x080046df
 800463c:	080046df 	.word	0x080046df
 8004640:	080046df 	.word	0x080046df
 8004644:	080046df 	.word	0x080046df
 8004648:	080046df 	.word	0x080046df
 800464c:	080046df 	.word	0x080046df
 8004650:	080046df 	.word	0x080046df
 8004654:	080046df 	.word	0x080046df
 8004658:	080046df 	.word	0x080046df
 800465c:	080046df 	.word	0x080046df
 8004660:	080046df 	.word	0x080046df
 8004664:	080046df 	.word	0x080046df
 8004668:	080046df 	.word	0x080046df
 800466c:	080046df 	.word	0x080046df
 8004670:	080046d1 	.word	0x080046d1
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d02e      	beq.n	80046d6 <UART_SetConfig+0xa36>
 8004678:	e031      	b.n	80046de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467a:	f7fd ff2d 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 800467e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004680:	e033      	b.n	80046ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004682:	f7fd ff3f 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8004686:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004688:	e02f      	b.n	80046ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800468a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe feaa 	bl	80033e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004698:	e027      	b.n	80046ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800469a:	f107 0318 	add.w	r3, r7, #24
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fff6 	bl	8003690 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046a8:	e01f      	b.n	80046ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046aa:	4b2d      	ldr	r3, [pc, #180]	; (8004760 <UART_SetConfig+0xac0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <UART_SetConfig+0xac0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	4a28      	ldr	r2, [pc, #160]	; (8004764 <UART_SetConfig+0xac4>)
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046c8:	e00f      	b.n	80046ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <UART_SetConfig+0xac4>)
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046ce:	e00c      	b.n	80046ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <UART_SetConfig+0xac8>)
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046d4:	e009      	b.n	80046ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046dc:	e005      	b.n	80046ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80046e8:	bf00      	nop
    }

    if (pclk != 0U)
 80046ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d021      	beq.n	8004734 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	4a1d      	ldr	r2, [pc, #116]	; (800476c <UART_SetConfig+0xacc>)
 80046f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046fa:	461a      	mov	r2, r3
 80046fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	441a      	add	r2, r3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d909      	bls.n	800472e <UART_SetConfig+0xa8e>
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004720:	d205      	bcs.n	800472e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	b29a      	uxth	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e002      	b.n	8004734 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2201      	movs	r2, #1
 8004738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2201      	movs	r2, #1
 8004740:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2200      	movs	r2, #0
 8004748:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2200      	movs	r2, #0
 800474e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004750:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004754:	4618      	mov	r0, r3
 8004756:	3748      	adds	r7, #72	; 0x48
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	003d0900 	.word	0x003d0900
 800476c:	08004d60 	.word	0x08004d60

08004770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01a      	beq.n	8004886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486e:	d10a      	bne.n	8004886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c4:	f7fc fb46 	bl	8000f54 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d10e      	bne.n	80048f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f82f 	bl	800494a <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e025      	b.n	8004942 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d10e      	bne.n	8004922 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f819 	bl	800494a <UART_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e00f      	b.n	8004942 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b09c      	sub	sp, #112	; 0x70
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	4613      	mov	r3, r2
 8004958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495a:	e0a9      	b.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	f000 80a5 	beq.w	8004ab0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7fc faf5 	bl	8000f54 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <UART_WaitOnFlagUntilTimeout+0x32>
 8004976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004978:	2b00      	cmp	r3, #0
 800497a:	d140      	bne.n	80049fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800498a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004990:	667b      	str	r3, [r7, #100]	; 0x64
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800499a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e6      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	663b      	str	r3, [r7, #96]	; 0x60
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e5      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e069      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d051      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d149      	bne.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
 8004a46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e6      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	613b      	str	r3, [r7, #16]
   return(result);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a78:	623a      	str	r2, [r7, #32]
 8004a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	69f9      	ldr	r1, [r7, #28]
 8004a7e:	6a3a      	ldr	r2, [r7, #32]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e5      	bne.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e010      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69da      	ldr	r2, [r3, #28]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f43f af46 	beq.w	800495c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3770      	adds	r7, #112	; 0x70
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_UARTEx_DisableFifoMode+0x16>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e027      	b.n	8004b40 <HAL_UARTEx_DisableFifoMode+0x66>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e02d      	b.n	8004bc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f84f 	bl	8004c44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e02d      	b.n	8004c3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2224      	movs	r2, #36	; 0x24
 8004bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f811 	bl	8004c44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d108      	bne.n	8004c66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c64:	e031      	b.n	8004cca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c66:	2310      	movs	r3, #16
 8004c68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	0e5b      	lsrs	r3, r3, #25
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	0f5b      	lsrs	r3, r3, #29
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c8e:	7bbb      	ldrb	r3, [r7, #14]
 8004c90:	7b3a      	ldrb	r2, [r7, #12]
 8004c92:	4911      	ldr	r1, [pc, #68]	; (8004cd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004c94:	5c8a      	ldrb	r2, [r1, r2]
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c9a:	7b3a      	ldrb	r2, [r7, #12]
 8004c9c:	490f      	ldr	r1, [pc, #60]	; (8004cdc <UARTEx_SetNbDataToProcess+0x98>)
 8004c9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	7b7a      	ldrb	r2, [r7, #13]
 8004cb0:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004cb2:	5c8a      	ldrb	r2, [r1, r2]
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cb8:	7b7a      	ldrb	r2, [r7, #13]
 8004cba:	4908      	ldr	r1, [pc, #32]	; (8004cdc <UARTEx_SetNbDataToProcess+0x98>)
 8004cbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	08004d78 	.word	0x08004d78
 8004cdc:	08004d80 	.word	0x08004d80

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4d0d      	ldr	r5, [pc, #52]	; (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	; (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1b64      	subs	r4, r4, r5
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2600      	movs	r6, #0
 8004cec:	42a6      	cmp	r6, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4d0b      	ldr	r5, [pc, #44]	; (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	; (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f000 f820 	bl	8004d38 <_init>
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	42a6      	cmp	r6, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d08:	4798      	blx	r3
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08004d90 	.word	0x08004d90
 8004d1c:	08004d90 	.word	0x08004d90
 8004d20:	08004d90 	.word	0x08004d90
 8004d24:	08004d94 	.word	0x08004d94

08004d28 <memset>:
 8004d28:	4402      	add	r2, r0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	f803 1b01 	strb.w	r1, [r3], #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
