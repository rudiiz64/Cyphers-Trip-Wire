
Cypher Trip Wire_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08004ad4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08004ad4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018511  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ed  00000000  00000000  0003854f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0003ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038521  00000000  00000000  0003c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e709  00000000  00000000  00074689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001773d0  00000000  00000000  00082d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fa162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c68  00000000  00000000  001fa1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004a64 	.word	0x08004a64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004a64 	.word	0x08004a64

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <main+0x94>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 f93d 	bl	80009ac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa15 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f831 	bl	800079c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x94>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a15      	ldr	r2, [pc, #84]	; (8000798 <main+0x94>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <main+0x94>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fd4d 	bl	80011f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fd63 	bl	800122c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <main+0x94>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 f90f 	bl	80009ac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f8bd 	bl	800090c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f86f 	bl	8000874 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000796:	e7fe      	b.n	8000796 <main+0x92>
 8000798:	58024400 	.word	0x58024400

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	; 0x70
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	224c      	movs	r2, #76	; 0x4c
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 f952 	bl	8004a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2220      	movs	r2, #32
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 f94c 	bl	8004a54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007bc:	2004      	movs	r0, #4
 80007be:	f000 fd49 	bl	8001254 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <SystemClock_Config+0xd0>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	4a28      	ldr	r2, [pc, #160]	; (800086c <SystemClock_Config+0xd0>)
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <SystemClock_Config+0xd0>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <SystemClock_Config+0xd4>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <SystemClock_Config+0xd4>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <SystemClock_Config+0xd4>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f8:	bf00      	nop
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <SystemClock_Config+0xd4>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000806:	d1f8      	bne.n	80007fa <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800080c:	2301      	movs	r3, #1
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fd73 	bl	8001308 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000828:	f000 f8c0 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	233f      	movs	r3, #63	; 0x3f
 800082e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800084a:	2340      	movs	r3, #64	; 0x40
 800084c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2101      	movs	r1, #1
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f984 	bl	8001b60 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085e:	f000 f8a5 	bl	80009ac <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3770      	adds	r7, #112	; 0x70
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	58000400 	.word	0x58000400
 8000870:	58024800 	.word	0x58024800

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_USART3_UART_Init+0x90>)
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <MX_USART3_UART_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_USART3_UART_Init+0x90>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_USART3_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_USART3_UART_Init+0x90>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008be:	f003 f83d 	bl	800393c <HAL_UART_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 f870 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008d0:	f003 ffd2 	bl	8004878 <HAL_UARTEx_SetTxFifoThreshold>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008da:	f000 f867 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008e2:	f004 f807 	bl	80048f4 <HAL_UARTEx_SetRxFifoThreshold>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 f85e 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_USART3_UART_Init+0x90>)
 80008f2:	f003 ff88 	bl	8004806 <HAL_UARTEx_DisableFifoMode>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f856 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2400002c 	.word	0x2400002c
 8000908:	40004800 	.word	0x40004800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <MX_GPIO_Init+0x98>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_GPIO_Init+0x98>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dataTX_GPIO_Port, dataTX_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2104      	movs	r1, #4
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000964:	f000 fc2e 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : dataRX_Pin */
  GPIO_InitStruct.Pin = dataRX_Pin;
 8000968:	2302      	movs	r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dataRX_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_GPIO_Init+0x9c>)
 800097c:	f000 fa72 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : dataTX_Pin */
  GPIO_InitStruct.Pin = dataTX_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dataTX_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_GPIO_Init+0x9c>)
 8000998:	f000 fa64 	bl	8000e64 <HAL_GPIO_Init>

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58024400 	.word	0x58024400
 80009a8:	58020400 	.word	0x58020400

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_MspInit+0x30>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x30>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x30>)
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	58024400 	.word	0x58024400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0b8      	sub	sp, #224	; 0xe0
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	22bc      	movs	r2, #188	; 0xbc
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 f821 	bl	8004a54 <memset>
  if(huart->Instance==USART3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a25      	ldr	r2, [pc, #148]	; (8000aac <HAL_UART_MspInit+0xc0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d142      	bne.n	8000aa2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fc24 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a36:	f7ff ffb9 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a90:	2307      	movs	r3, #7
 8000a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_UART_MspInit+0xc8>)
 8000a9e:	f000 f9e1 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	37e0      	adds	r7, #224	; 0xe0
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004800 	.word	0x40004800
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	58020c00 	.word	0x58020c00

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f89e 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b10:	f7ff fd5e 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f003 ff67 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fde1 	bl	8000704 <main>
  bx  lr
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b4c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b50:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8000b54:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b58:	240000c0 	.word	0x240000c0

08000b5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC3_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f000 f94a 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b6c:	f001 f9ae 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8000b70:	4602      	mov	r2, r0
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_Init+0x68>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	4913      	ldr	r1, [pc, #76]	; (8000bcc <HAL_Init+0x6c>)
 8000b7e:	5ccb      	ldrb	r3, [r1, r3]
 8000b80:	f003 031f 	and.w	r3, r3, #31
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_Init+0x68>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_Init+0x6c>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	f003 031f 	and.w	r3, r3, #31
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_Init+0x70>)
 8000ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_Init+0x74>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f814 	bl	8000bd8 <HAL_InitTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e002      	b.n	8000bc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bba:	f7ff fefd 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	08004a7c 	.word	0x08004a7c
 8000bd0:	24000004 	.word	0x24000004
 8000bd4:	24000000 	.word	0x24000000

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_InitTick+0x60>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e021      	b.n	8000c30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_InitTick+0x64>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_InitTick+0x60>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f921 	bl	8000e4a <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f8f9 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x68>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2400000c 	.word	0x2400000c
 8000c3c:	24000000 	.word	0x24000000
 8000c40:	24000008 	.word	0x24000008

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	2400000c 	.word	0x2400000c
 8000c68:	240000bc 	.word	0x240000bc

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	240000bc 	.word	0x240000bc

08000c84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetREVID+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	0c1b      	lsrs	r3, r3, #16
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	5c001000 	.word	0x5c001000

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <__NVIC_SetPriorityGrouping+0x40>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x40>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	05fa0000 	.word	0x05fa0000

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff47 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff90 	bl	8000d54 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5f 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb2 	bl	8000dbc <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e72:	4b89      	ldr	r3, [pc, #548]	; (8001098 <HAL_GPIO_Init+0x234>)
 8000e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e76:	e194      	b.n	80011a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8186 	beq.w	800119c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d005      	beq.n	8000ea8 <HAL_GPIO_Init+0x44>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d130      	bne.n	8000f0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	f003 0201 	and.w	r2, r3, #1
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d017      	beq.n	8000f46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d123      	bne.n	8000f9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	69b9      	ldr	r1, [r7, #24]
 8000f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0203 	and.w	r2, r3, #3
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80e0 	beq.w	800119c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_GPIO_Init+0x238>)
 8000fde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe2:	4a2e      	ldr	r2, [pc, #184]	; (800109c <HAL_GPIO_Init+0x238>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_GPIO_Init+0x238>)
 8000fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <HAL_GPIO_Init+0x23c>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <HAL_GPIO_Init+0x240>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d052      	beq.n	80010cc <HAL_GPIO_Init+0x268>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <HAL_GPIO_Init+0x244>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d031      	beq.n	8001092 <HAL_GPIO_Init+0x22e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <HAL_GPIO_Init+0x248>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02b      	beq.n	800108e <HAL_GPIO_Init+0x22a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_GPIO_Init+0x24c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x226>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_GPIO_Init+0x250>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <HAL_GPIO_Init+0x254>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <HAL_GPIO_Init+0x258>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_GPIO_Init+0x25c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x216>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_GPIO_Init+0x260>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <HAL_GPIO_Init+0x264>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x20e>
 800106e:	2309      	movs	r3, #9
 8001070:	e02d      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 8001072:	230a      	movs	r3, #10
 8001074:	e02b      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 8001076:	2308      	movs	r3, #8
 8001078:	e029      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 800107a:	2307      	movs	r3, #7
 800107c:	e027      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 800107e:	2306      	movs	r3, #6
 8001080:	e025      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 8001082:	2305      	movs	r3, #5
 8001084:	e023      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 8001086:	2304      	movs	r3, #4
 8001088:	e021      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 800108a:	2303      	movs	r3, #3
 800108c:	e01f      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 800108e:	2302      	movs	r3, #2
 8001090:	e01d      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 8001092:	2301      	movs	r3, #1
 8001094:	e01b      	b.n	80010ce <HAL_GPIO_Init+0x26a>
 8001096:	bf00      	nop
 8001098:	58000080 	.word	0x58000080
 800109c:	58024400 	.word	0x58024400
 80010a0:	58000400 	.word	0x58000400
 80010a4:	58020000 	.word	0x58020000
 80010a8:	58020400 	.word	0x58020400
 80010ac:	58020800 	.word	0x58020800
 80010b0:	58020c00 	.word	0x58020c00
 80010b4:	58021000 	.word	0x58021000
 80010b8:	58021400 	.word	0x58021400
 80010bc:	58021800 	.word	0x58021800
 80010c0:	58021c00 	.word	0x58021c00
 80010c4:	58022000 	.word	0x58022000
 80010c8:	58022400 	.word	0x58022400
 80010cc:	2300      	movs	r3, #0
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010de:	4938      	ldr	r1, [pc, #224]	; (80011c0 <HAL_GPIO_Init+0x35c>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800111a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	3301      	adds	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f47f ae63 	bne.w	8000e78 <HAL_GPIO_Init+0x14>
  }
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3724      	adds	r7, #36	; 0x24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	58000400 	.word	0x58000400

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_HSEM_FastTake+0x2c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3320      	adds	r3, #32
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_HSEM_FastTake+0x30>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	e000      	b.n	8001216 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	58026400 	.word	0x58026400
 8001228:	80000300 	.word	0x80000300

0800122c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001236:	4906      	ldr	r1, [pc, #24]	; (8001250 <HAL_HSEM_Release+0x24>)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	58026400 	.word	0x58026400

08001254 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_PWREx_ConfigSupply+0xb0>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2b06      	cmp	r3, #6
 8001266:	d00a      	beq.n	800127e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_PWREx_ConfigSupply+0xb0>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d001      	beq.n	800127a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e040      	b.n	80012fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e03e      	b.n	80012fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_PWREx_ConfigSupply+0xb0>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001286:	491f      	ldr	r1, [pc, #124]	; (8001304 <HAL_PWREx_ConfigSupply+0xb0>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4313      	orrs	r3, r2
 800128c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800128e:	f7ff fced 	bl	8000c6c <HAL_GetTick>
 8001292:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001294:	e009      	b.n	80012aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001296:	f7ff fce9 	bl	8000c6c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a4:	d901      	bls.n	80012aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e028      	b.n	80012fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012b6:	d1ee      	bne.n	8001296 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b1e      	cmp	r3, #30
 80012bc:	d008      	beq.n	80012d0 <HAL_PWREx_ConfigSupply+0x7c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b2e      	cmp	r3, #46	; 0x2e
 80012c2:	d005      	beq.n	80012d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b1d      	cmp	r3, #29
 80012c8:	d002      	beq.n	80012d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b2d      	cmp	r3, #45	; 0x2d
 80012ce:	d114      	bne.n	80012fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80012d0:	f7ff fccc 	bl	8000c6c <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012d6:	e009      	b.n	80012ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012d8:	f7ff fcc8 	bl	8000c6c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e6:	d901      	bls.n	80012ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e007      	b.n	80012fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d1ee      	bne.n	80012d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58024800 	.word	0x58024800

08001308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	f000 bc1c 	b.w	8001b54 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8087 	beq.w	8001438 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132a:	4b9e      	ldr	r3, [pc, #632]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001334:	4b9b      	ldr	r3, [pc, #620]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	2b10      	cmp	r3, #16
 800133e:	d007      	beq.n	8001350 <HAL_RCC_OscConfig+0x48>
 8001340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001342:	2b18      	cmp	r3, #24
 8001344:	d110      	bne.n	8001368 <HAL_RCC_OscConfig+0x60>
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d10b      	bne.n	8001368 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	4b94      	ldr	r3, [pc, #592]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d06c      	beq.n	8001436 <HAL_RCC_OscConfig+0x12e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d168      	bne.n	8001436 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e3f5      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001370:	d106      	bne.n	8001380 <HAL_RCC_OscConfig+0x78>
 8001372:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a8b      	ldr	r2, [pc, #556]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e02e      	b.n	80013de <HAL_RCC_OscConfig+0xd6>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x9a>
 8001388:	4b86      	ldr	r3, [pc, #536]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a85      	ldr	r2, [pc, #532]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b83      	ldr	r3, [pc, #524]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a82      	ldr	r2, [pc, #520]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e01d      	b.n	80013de <HAL_RCC_OscConfig+0xd6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0xbe>
 80013ac:	4b7d      	ldr	r3, [pc, #500]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a7c      	ldr	r2, [pc, #496]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b7a      	ldr	r3, [pc, #488]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a79      	ldr	r2, [pc, #484]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e00b      	b.n	80013de <HAL_RCC_OscConfig+0xd6>
 80013c6:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a76      	ldr	r2, [pc, #472]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a73      	ldr	r2, [pc, #460]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d013      	beq.n	800140e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fc41 	bl	8000c6c <HAL_GetTick>
 80013ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ee:	f7ff fc3d 	bl	8000c6c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e3a9      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001400:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0xe6>
 800140c:	e014      	b.n	8001438 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fc2d 	bl	8000c6c <HAL_GetTick>
 8001412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff fc29 	bl	8000c6c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e395      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x10e>
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001436:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80ca 	beq.w	80015da <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800144e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001450:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d007      	beq.n	800146c <HAL_RCC_OscConfig+0x164>
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	2b18      	cmp	r3, #24
 8001460:	d156      	bne.n	8001510 <HAL_RCC_OscConfig+0x208>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d151      	bne.n	8001510 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x17c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e367      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 0219 	bic.w	r2, r3, #25
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4944      	ldr	r1, [pc, #272]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001496:	f7ff fbe9 	bl	8000c6c <HAL_GetTick>
 800149a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fbe5 	bl	8000c6c <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e351      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	f7ff fbe2 	bl	8000c84 <HAL_GetREVID>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d817      	bhi.n	80014fa <HAL_RCC_OscConfig+0x1f2>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b40      	cmp	r3, #64	; 0x40
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x1dc>
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80014da:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e2:	e07a      	b.n	80015da <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	031b      	lsls	r3, r3, #12
 80014f2:	492c      	ldr	r1, [pc, #176]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f8:	e06f      	b.n	80015da <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	4926      	ldr	r1, [pc, #152]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150e:	e064      	b.n	80015da <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d047      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 0219 	bic.w	r2, r3, #25
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	491f      	ldr	r1, [pc, #124]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fb9f 	bl	8000c6c <HAL_GetTick>
 800152e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fb9b 	bl	8000c6c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e307      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	f7ff fb98 	bl	8000c84 <HAL_GetREVID>
 8001554:	4603      	mov	r3, r0
 8001556:	f241 0203 	movw	r2, #4099	; 0x1003
 800155a:	4293      	cmp	r3, r2
 800155c:	d817      	bhi.n	800158e <HAL_RCC_OscConfig+0x286>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d108      	bne.n	8001578 <HAL_RCC_OscConfig+0x270>
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	6053      	str	r3, [r2, #4]
 8001576:	e030      	b.n	80015da <HAL_RCC_OscConfig+0x2d2>
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	031b      	lsls	r3, r3, #12
 8001586:	4907      	ldr	r1, [pc, #28]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e025      	b.n	80015da <HAL_RCC_OscConfig+0x2d2>
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	061b      	lsls	r3, r3, #24
 800159c:	4901      	ldr	r1, [pc, #4]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
 80015a2:	e01a      	b.n	80015da <HAL_RCC_OscConfig+0x2d2>
 80015a4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a8:	4b9e      	ldr	r3, [pc, #632]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a9d      	ldr	r2, [pc, #628]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb5a 	bl	8000c6c <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb56 	bl	8000c6c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e2c2      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ce:	4b95      	ldr	r3, [pc, #596]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a9 	beq.w	800173a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e8:	4b8e      	ldr	r3, [pc, #568]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f2:	4b8c      	ldr	r3, [pc, #560]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d007      	beq.n	800160e <HAL_RCC_OscConfig+0x306>
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b18      	cmp	r3, #24
 8001602:	d13a      	bne.n	800167a <HAL_RCC_OscConfig+0x372>
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d135      	bne.n	800167a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800160e:	4b85      	ldr	r3, [pc, #532]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x31e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b80      	cmp	r3, #128	; 0x80
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e296      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001626:	f7ff fb2d 	bl	8000c84 <HAL_GetREVID>
 800162a:	4603      	mov	r3, r0
 800162c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001630:	4293      	cmp	r3, r2
 8001632:	d817      	bhi.n	8001664 <HAL_RCC_OscConfig+0x35c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	2b20      	cmp	r3, #32
 800163a:	d108      	bne.n	800164e <HAL_RCC_OscConfig+0x346>
 800163c:	4b79      	ldr	r3, [pc, #484]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001644:	4a77      	ldr	r2, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800164a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800164c:	e075      	b.n	800173a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800164e:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	069b      	lsls	r3, r3, #26
 800165c:	4971      	ldr	r1, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001662:	e06a      	b.n	800173a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001664:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	496c      	ldr	r1, [pc, #432]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001674:	4313      	orrs	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001678:	e05f      	b.n	800173a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d042      	beq.n	8001708 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001682:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a67      	ldr	r2, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff faed 	bl	8000c6c <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001696:	f7ff fae9 	bl	8000c6c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e255      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016b4:	f7ff fae6 	bl	8000c84 <HAL_GetREVID>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80016be:	4293      	cmp	r3, r2
 80016c0:	d817      	bhi.n	80016f2 <HAL_RCC_OscConfig+0x3ea>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x3d4>
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016d2:	4a54      	ldr	r2, [pc, #336]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80016d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016d8:	6053      	str	r3, [r2, #4]
 80016da:	e02e      	b.n	800173a <HAL_RCC_OscConfig+0x432>
 80016dc:	4b51      	ldr	r3, [pc, #324]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	069b      	lsls	r3, r3, #26
 80016ea:	494e      	ldr	r1, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e023      	b.n	800173a <HAL_RCC_OscConfig+0x432>
 80016f2:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	061b      	lsls	r3, r3, #24
 8001700:	4948      	ldr	r1, [pc, #288]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001702:	4313      	orrs	r3, r2
 8001704:	60cb      	str	r3, [r1, #12]
 8001706:	e018      	b.n	800173a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a45      	ldr	r2, [pc, #276]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 800170e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff faaa 	bl	8000c6c <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800171c:	f7ff faa6 	bl	8000c6c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e212      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d036      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d019      	beq.n	8001782 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fa87 	bl	8000c6c <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff fa83 	bl	8000c6c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e1ef      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x45a>
 8001780:	e018      	b.n	80017b4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	4a27      	ldr	r2, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fa6d 	bl	8000c6c <HAL_GetTick>
 8001792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fa69 	bl	8000c6c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e1d5      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d039      	beq.n	8001834 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d019      	beq.n	80017fc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a15      	ldr	r2, [pc, #84]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80017ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fa4a 	bl	8000c6c <HAL_GetTick>
 80017d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017dc:	f7ff fa46 	bl	8000c6c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1b2      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x4d4>
 80017fa:	e01b      	b.n	8001834 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_RCC_OscConfig+0x51c>)
 8001802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001806:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001808:	f7ff fa30 	bl	8000c6c <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001810:	f7ff fa2c 	bl	8000c6c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d904      	bls.n	8001828 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e198      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
 8001822:	bf00      	nop
 8001824:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001828:	4ba3      	ldr	r3, [pc, #652]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ed      	bne.n	8001810 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8081 	beq.w	8001944 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001842:	4b9e      	ldr	r3, [pc, #632]	; (8001abc <HAL_RCC_OscConfig+0x7b4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a9d      	ldr	r2, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x7b4>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800184e:	f7ff fa0d 	bl	8000c6c <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001856:	f7ff fa09 	bl	8000c6c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e175      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001868:	4b94      	ldr	r3, [pc, #592]	; (8001abc <HAL_RCC_OscConfig+0x7b4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x582>
 800187c:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a8d      	ldr	r2, [pc, #564]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	e02d      	b.n	80018e6 <HAL_RCC_OscConfig+0x5de>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x5a4>
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a88      	ldr	r2, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a85      	ldr	r2, [pc, #532]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	e01c      	b.n	80018e6 <HAL_RCC_OscConfig+0x5de>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d10c      	bne.n	80018ce <HAL_RCC_OscConfig+0x5c6>
 80018b4:	4b80      	ldr	r3, [pc, #512]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a7f      	ldr	r2, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a7c      	ldr	r2, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0x5de>
 80018ce:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a79      	ldr	r2, [pc, #484]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	4b77      	ldr	r3, [pc, #476]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a76      	ldr	r2, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9bd 	bl	8000c6c <HAL_GetTick>
 80018f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff f9b9 	bl	8000c6c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e123      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ee      	beq.n	80018f6 <HAL_RCC_OscConfig+0x5ee>
 8001918:	e014      	b.n	8001944 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff f9a7 	bl	8000c6c <HAL_GetTick>
 800191e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff f9a3 	bl	8000c6c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e10d      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001938:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1ee      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 8102 	beq.w	8001b52 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800194e:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001956:	2b18      	cmp	r3, #24
 8001958:	f000 80bd 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b02      	cmp	r3, #2
 8001962:	f040 8095 	bne.w	8001a90 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a53      	ldr	r2, [pc, #332]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 800196c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff f97b 	bl	8000c6c <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff f977 	bl	8000c6c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0e3      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 800199a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <HAL_RCC_OscConfig+0x7b8>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	430a      	orrs	r2, r1
 80019ac:	4942      	ldr	r1, [pc, #264]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	628b      	str	r3, [r1, #40]	; 0x28
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c0:	3b01      	subs	r3, #1
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019cc:	3b01      	subs	r3, #1
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	3b01      	subs	r3, #1
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019e2:	4935      	ldr	r1, [pc, #212]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	4a32      	ldr	r2, [pc, #200]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 80019f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_RCC_OscConfig+0x7bc>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a00:	00d2      	lsls	r2, r2, #3
 8001a02:	492d      	ldr	r1, [pc, #180]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f023 020c 	bic.w	r2, r3, #12
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4928      	ldr	r1, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f023 0202 	bic.w	r2, r3, #2
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4924      	ldr	r1, [pc, #144]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f900 	bl	8000c6c <HAL_GetTick>
 8001a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f8fc 	bl	8000c6c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e068      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x768>
 8001a8e:	e060      	b.n	8001b52 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f8e6 	bl	8000c6c <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aa2:	e011      	b.n	8001ac8 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f8e2 	bl	8000c6c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d90a      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04e      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
 8001ab6:	bf00      	nop
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58024800 	.word	0x58024800
 8001ac0:	fffffc0c 	.word	0xfffffc0c
 8001ac4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x854>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e7      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x79c>
 8001ad4:	e03d      	b.n	8001b52 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_RCC_OscConfig+0x854>)
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <HAL_RCC_OscConfig+0x854>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d031      	beq.n	8001b4e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d12a      	bne.n	8001b4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d122      	bne.n	8001b4e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d11a      	bne.n	8001b4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	0a5b      	lsrs	r3, r3, #9
 8001b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d111      	bne.n	8001b4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d108      	bne.n	8001b4e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	0e1b      	lsrs	r3, r3, #24
 8001b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3730      	adds	r7, #48	; 0x30
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58024400 	.word	0x58024400

08001b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e19c      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b8a      	ldr	r3, [pc, #552]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d910      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b87      	ldr	r3, [pc, #540]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 020f 	bic.w	r2, r3, #15
 8001b8a:	4985      	ldr	r1, [pc, #532]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b83      	ldr	r3, [pc, #524]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e184      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b7b      	ldr	r3, [pc, #492]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d908      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bc0:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	4975      	ldr	r1, [pc, #468]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bee:	4b6d      	ldr	r3, [pc, #436]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	496a      	ldr	r1, [pc, #424]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d908      	bls.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	495e      	ldr	r1, [pc, #376]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d908      	bls.n	8001c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4953      	ldr	r1, [pc, #332]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d908      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f023 020f 	bic.w	r2, r3, #15
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4947      	ldr	r1, [pc, #284]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d055      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4940      	ldr	r1, [pc, #256]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb0:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d121      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0f6      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d115      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0ea      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0de      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0d6      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f023 0207 	bic.w	r2, r3, #7
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4925      	ldr	r1, [pc, #148]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7fe ffab 	bl	8000c6c <HAL_GetTick>
 8001d16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1a:	f7fe ffa7 	bl	8000c6c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0be      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d1eb      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d208      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f023 020f 	bic.w	r2, r3, #15
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	490e      	ldr	r1, [pc, #56]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d214      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 020f 	bic.w	r2, r3, #15
 8001d86:	4906      	ldr	r1, [pc, #24]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e086      	b.n	8001eae <HAL_RCC_ClockConfig+0x34e>
 8001da0:	52002000 	.word	0x52002000
 8001da4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d208      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dc4:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	4939      	ldr	r1, [pc, #228]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d208      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	492e      	ldr	r1, [pc, #184]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d208      	bcs.n	8001e32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d010      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d208      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4917      	ldr	r1, [pc, #92]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e60:	f000 f834 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	4912      	ldr	r1, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x35c>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x358>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_RCC_ClockConfig+0x35c>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x360>)
 8001e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x364>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x368>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fe98 	bl	8000bd8 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	08004a7c 	.word	0x08004a7c
 8001ec0:	24000004 	.word	0x24000004
 8001ec4:	24000000 	.word	0x24000000
 8001ec8:	24000008 	.word	0x24000008

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed2:	4bb3      	ldr	r3, [pc, #716]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eda:	2b18      	cmp	r3, #24
 8001edc:	f200 8155 	bhi.w	800218a <HAL_RCC_GetSysClockFreq+0x2be>
 8001ee0:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001f4d 	.word	0x08001f4d
 8001eec:	0800218b 	.word	0x0800218b
 8001ef0:	0800218b 	.word	0x0800218b
 8001ef4:	0800218b 	.word	0x0800218b
 8001ef8:	0800218b 	.word	0x0800218b
 8001efc:	0800218b 	.word	0x0800218b
 8001f00:	0800218b 	.word	0x0800218b
 8001f04:	0800218b 	.word	0x0800218b
 8001f08:	08001f73 	.word	0x08001f73
 8001f0c:	0800218b 	.word	0x0800218b
 8001f10:	0800218b 	.word	0x0800218b
 8001f14:	0800218b 	.word	0x0800218b
 8001f18:	0800218b 	.word	0x0800218b
 8001f1c:	0800218b 	.word	0x0800218b
 8001f20:	0800218b 	.word	0x0800218b
 8001f24:	0800218b 	.word	0x0800218b
 8001f28:	08001f79 	.word	0x08001f79
 8001f2c:	0800218b 	.word	0x0800218b
 8001f30:	0800218b 	.word	0x0800218b
 8001f34:	0800218b 	.word	0x0800218b
 8001f38:	0800218b 	.word	0x0800218b
 8001f3c:	0800218b 	.word	0x0800218b
 8001f40:	0800218b 	.word	0x0800218b
 8001f44:	0800218b 	.word	0x0800218b
 8001f48:	08001f7f 	.word	0x08001f7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f4c:	4b94      	ldr	r3, [pc, #592]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f58:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	4a90      	ldr	r2, [pc, #576]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001f6a:	e111      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f6c:	4b8d      	ldr	r3, [pc, #564]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f6e:	61bb      	str	r3, [r7, #24]
    break;
 8001f70:	e10e      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f72:	4b8d      	ldr	r3, [pc, #564]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f74:	61bb      	str	r3, [r7, #24]
    break;
 8001f76:	e10b      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f7a:	61bb      	str	r3, [r7, #24]
    break;
 8001f7c:	e108      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f7e:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f88:	4b85      	ldr	r3, [pc, #532]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f94:	4b82      	ldr	r3, [pc, #520]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f9e:	4b80      	ldr	r3, [pc, #512]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	08db      	lsrs	r3, r3, #3
 8001fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80e1 	beq.w	8002184 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	f000 8083 	beq.w	80020d0 <HAL_RCC_GetSysClockFreq+0x204>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	f200 80a1 	bhi.w	8002114 <HAL_RCC_GetSysClockFreq+0x248>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d056      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fde:	e099      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02d      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fec:	4b6c      	ldr	r3, [pc, #432]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	4a6b      	ldr	r2, [pc, #428]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002016:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002026:	ed97 6a02 	vldr	s12, [r7, #8]
 800202a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800202e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800203a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002046:	e087      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002052:	eddf 6a58 	vldr	s13, [pc, #352]	; 80021b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800206a:	ed97 6a02 	vldr	s12, [r7, #8]
 800206e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800207a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800207e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800208a:	e065      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002096:	eddf 6a48 	vldr	s13, [pc, #288]	; 80021b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800209a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209e:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80020b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020ce:	e043      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80021bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80020de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800210a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002112:	e021      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80021b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002136:	ed97 6a02 	vldr	s12, [r7, #8]
 800213a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80021b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800213e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800214a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002156:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	0a5b      	lsrs	r3, r3, #9
 800215e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002162:	3301      	adds	r3, #1
 8002164:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002170:	edd7 6a07 	vldr	s13, [r7, #28]
 8002174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
    break;
 8002188:	e002      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800218c:	61bb      	str	r3, [r7, #24]
    break;
 800218e:	bf00      	nop
  }

  return sysclockfreq;
 8002190:	69bb      	ldr	r3, [r7, #24]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	58024400 	.word	0x58024400
 80021a4:	03d09000 	.word	0x03d09000
 80021a8:	003d0900 	.word	0x003d0900
 80021ac:	007a1200 	.word	0x007a1200
 80021b0:	46000000 	.word	0x46000000
 80021b4:	4c742400 	.word	0x4c742400
 80021b8:	4a742400 	.word	0x4a742400
 80021bc:	4af42400 	.word	0x4af42400

080021c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80021c6:	f7ff fe81 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_GetHCLKFreq+0x50>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490f      	ldr	r1, [pc, #60]	; (8002214 <HAL_RCC_GetHCLKFreq+0x54>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_GetHCLKFreq+0x50>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_RCC_GetHCLKFreq+0x54>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <HAL_RCC_GetHCLKFreq+0x58>)
 80021fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021fe:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_RCC_GetHCLKFreq+0x58>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	58024400 	.word	0x58024400
 8002214:	08004a7c 	.word	0x08004a7c
 8002218:	24000004 	.word	0x24000004
 800221c:	24000000 	.word	0x24000000

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002224:	f7ff ffcc 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4904      	ldr	r1, [pc, #16]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58024400 	.word	0x58024400
 8002248:	08004a7c 	.word	0x08004a7c

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002250:	f7ff ffb6 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4904      	ldr	r1, [pc, #16]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	58024400 	.word	0x58024400
 8002274:	08004a7c 	.word	0x08004a7c

08002278 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002280:	2300      	movs	r3, #0
 8002282:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002284:	2300      	movs	r3, #0
 8002286:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03f      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800229c:	d02a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800229e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80022a2:	d824      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022a8:	d018      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ae:	d81e      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b8:	d007      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022ba:	e018      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022bc:	4bab      	ldr	r3, [pc, #684]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	4aaa      	ldr	r2, [pc, #680]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022c8:	e015      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 f9cf 	bl	8003674 <RCCEx_PLL2_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022da:	e00c      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3324      	adds	r3, #36	; 0x24
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 fa78 	bl	80037d8 <RCCEx_PLL3_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022ec:	e003      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
      break;
 80022f2:	e000      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022fc:	4b9b      	ldr	r3, [pc, #620]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002308:	4998      	ldr	r1, [pc, #608]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	650b      	str	r3, [r1, #80]	; 0x50
 800230e:	e001      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d03d      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	2b04      	cmp	r3, #4
 8002326:	d826      	bhi.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002345 	.word	0x08002345
 8002334:	08002353 	.word	0x08002353
 8002338:	08002365 	.word	0x08002365
 800233c:	0800237d 	.word	0x0800237d
 8002340:	0800237d 	.word	0x0800237d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002344:	4b89      	ldr	r3, [pc, #548]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	4a88      	ldr	r2, [pc, #544]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800234a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002350:	e015      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f98b 	bl	8003674 <RCCEx_PLL2_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002362:	e00c      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3324      	adds	r3, #36	; 0x24
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fa34 	bl	80037d8 <RCCEx_PLL3_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002374:	e003      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
      break;
 800237a:	e000      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800237c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002384:	4b79      	ldr	r3, [pc, #484]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	4976      	ldr	r1, [pc, #472]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	650b      	str	r3, [r1, #80]	; 0x50
 8002396:	e001      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d042      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b0:	d02b      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80023b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b6:	d825      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80023b8:	2bc0      	cmp	r3, #192	; 0xc0
 80023ba:	d028      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80023bc:	2bc0      	cmp	r3, #192	; 0xc0
 80023be:	d821      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d016      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d81d      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d007      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80023d0:	e018      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d2:	4b66      	ldr	r3, [pc, #408]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	4a65      	ldr	r2, [pc, #404]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023de:	e017      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f944 	bl	8003674 <RCCEx_PLL2_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023f0:	e00e      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3324      	adds	r3, #36	; 0x24
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f9ed 	bl	80037d8 <RCCEx_PLL3_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002402:	e005      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800240e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002416:	4b55      	ldr	r3, [pc, #340]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4952      	ldr	r1, [pc, #328]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	650b      	str	r3, [r1, #80]	; 0x50
 8002428:	e001      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	2b00      	cmp	r3, #0
 8002438:	d049      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002440:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002444:	d030      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800244a:	d82a      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800244c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002450:	d02c      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002452:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002456:	d824      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245c:	d018      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800245e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002462:	d81e      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800246c:	d007      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800246e:	e018      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	4a3d      	ldr	r2, [pc, #244]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800247c:	e017      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f001 f8f5 	bl	8003674 <RCCEx_PLL2_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800248e:	e00e      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f001 f99e 	bl	80037d8 <RCCEx_PLL3_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024a0:	e005      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80024ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024c2:	492a      	ldr	r1, [pc, #168]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	658b      	str	r3, [r1, #88]	; 0x58
 80024c8:	e001      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04c      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e4:	d030      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80024e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ea:	d82a      	bhi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024f0:	d02c      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80024f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024f6:	d824      	bhi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024fc:	d018      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80024fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002502:	d81e      	bhi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d007      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800250e:	e018      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800251c:	e017      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f001 f8a5 	bl	8003674 <RCCEx_PLL2_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800252e:	e00e      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3324      	adds	r3, #36	; 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f001 f94e 	bl	80037d8 <RCCEx_PLL3_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002540:	e005      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
      break;
 8002546:	e002      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800254c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002562:	4902      	ldr	r1, [pc, #8]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	658b      	str	r3, [r1, #88]	; 0x58
 8002568:	e004      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800256a:	bf00      	nop
 800256c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	2b30      	cmp	r3, #48	; 0x30
 8002586:	d01c      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002588:	2b30      	cmp	r3, #48	; 0x30
 800258a:	d817      	bhi.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800258c:	2b20      	cmp	r3, #32
 800258e:	d00c      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002590:	2b20      	cmp	r3, #32
 8002592:	d813      	bhi.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d016      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002598:	2b10      	cmp	r3, #16
 800259a:	d10f      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800259c:	4baf      	ldr	r3, [pc, #700]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	4aae      	ldr	r2, [pc, #696]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80025a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80025a8:	e00e      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2102      	movs	r1, #2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f85f 	bl	8003674 <RCCEx_PLL2_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80025ba:	e005      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	75fb      	strb	r3, [r7, #23]
      break;
 80025c0:	e002      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80025c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80025ce:	4ba3      	ldr	r3, [pc, #652]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025da:	49a0      	ldr	r1, [pc, #640]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025e0:	e001      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d047      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025fa:	d030      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80025fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002600:	d82a      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002606:	d02c      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002608:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800260c:	d824      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002612:	d018      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002618:	d81e      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800261e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002622:	d007      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002624:	e018      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002626:	4b8d      	ldr	r3, [pc, #564]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	4a8c      	ldr	r2, [pc, #560]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002632:	e017      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f001 f81a 	bl	8003674 <RCCEx_PLL2_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002644:	e00e      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3324      	adds	r3, #36	; 0x24
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f001 f8c3 	bl	80037d8 <RCCEx_PLL3_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002656:	e005      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	75fb      	strb	r3, [r7, #23]
      break;
 800265c:	e002      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800266a:	4b7c      	ldr	r3, [pc, #496]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800266c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	4979      	ldr	r1, [pc, #484]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	650b      	str	r3, [r1, #80]	; 0x50
 800267c:	e001      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d049      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002696:	d02e      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269c:	d828      	bhi.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800269e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026a2:	d02a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x482>
 80026a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026a8:	d822      	bhi.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80026aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026ae:	d026      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 80026b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b4:	d81c      	bhi.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80026b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ba:	d010      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x466>
 80026bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c0:	d816      	bhi.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01d      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ca:	d111      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ffce 	bl	8003674 <RCCEx_PLL2_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026dc:	e012      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3324      	adds	r3, #36	; 0x24
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 f877 	bl	80037d8 <RCCEx_PLL3_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026ee:	e009      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	75fb      	strb	r3, [r7, #23]
      break;
 80026f4:	e006      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80026f6:	bf00      	nop
 80026f8:	e004      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800270a:	4b54      	ldr	r3, [pc, #336]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800270c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	4951      	ldr	r1, [pc, #324]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	650b      	str	r3, [r1, #80]	; 0x50
 800271c:	e001      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d04b      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002738:	d02e      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800273a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273e:	d828      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d02a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d822      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800274c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002750:	d026      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002756:	d81c      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800275c:	d010      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800275e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002762:	d816      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01d      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800276c:	d111      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f000 ff7d 	bl	8003674 <RCCEx_PLL2_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800277e:	e012      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3324      	adds	r3, #36	; 0x24
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f001 f826 	bl	80037d8 <RCCEx_PLL3_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002790:	e009      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
      break;
 8002796:	e006      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002798:	bf00      	nop
 800279a:	e004      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800279c:	bf00      	nop
 800279e:	e002      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80027a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027ba:	4928      	ldr	r1, [pc, #160]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	658b      	str	r3, [r1, #88]	; 0x58
 80027c0:	e001      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02f      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027da:	d00e      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80027dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e0:	d814      	bhi.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80027e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ea:	d10f      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027f8:	e00c      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f000 ff37 	bl	8003674 <RCCEx_PLL2_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800280a:	e003      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
      break;
 8002810:	e000      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002826:	490d      	ldr	r1, [pc, #52]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	650b      	str	r3, [r1, #80]	; 0x50
 800282c:	e001      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d033      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	2b03      	cmp	r3, #3
 8002844:	d81c      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002846:	a201      	add	r2, pc, #4	; (adr r2, 800284c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	08002887 	.word	0x08002887
 8002850:	08002861 	.word	0x08002861
 8002854:	0800286f 	.word	0x0800286f
 8002858:	08002887 	.word	0x08002887
 800285c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002860:	4bb8      	ldr	r3, [pc, #736]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	4ab7      	ldr	r2, [pc, #732]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800286c:	e00c      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fefd 	bl	8003674 <RCCEx_PLL2_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800287e:	e003      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
      break;
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800288e:	4bad      	ldr	r3, [pc, #692]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	49aa      	ldr	r1, [pc, #680]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80028a0:	e001      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8086 	beq.w	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b4:	4ba4      	ldr	r3, [pc, #656]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4aa3      	ldr	r2, [pc, #652]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c0:	f7fe f9d4 	bl	8000c6c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe f9d0 	bl	8000c6c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d902      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	75fb      	strb	r3, [r7, #23]
        break;
 80028da:	e005      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028dc:	4b9a      	ldr	r3, [pc, #616]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d166      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80028ee:	4b95      	ldr	r3, [pc, #596]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80028f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028f8:	4053      	eors	r3, r2
 80028fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d013      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002902:	4b90      	ldr	r3, [pc, #576]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800290c:	4b8d      	ldr	r3, [pc, #564]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a8c      	ldr	r2, [pc, #560]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002918:	4b8a      	ldr	r3, [pc, #552]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a89      	ldr	r2, [pc, #548]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002924:	4a87      	ldr	r2, [pc, #540]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002934:	d115      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe f999 	bl	8000c6c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800293c:	e00b      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe f995 	bl	8000c6c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d902      	bls.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	75fb      	strb	r3, [r7, #23]
            break;
 8002954:	e005      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002956:	4b7b      	ldr	r3, [pc, #492]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ed      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d126      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002976:	d10d      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002978:	4b72      	ldr	r3, [pc, #456]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002986:	0919      	lsrs	r1, r3, #4
 8002988:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800298a:	400b      	ands	r3, r1
 800298c:	496d      	ldr	r1, [pc, #436]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	610b      	str	r3, [r1, #16]
 8002992:	e005      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002994:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800299a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800299e:	6113      	str	r3, [r2, #16]
 80029a0:	4b68      	ldr	r3, [pc, #416]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ae:	4965      	ldr	r1, [pc, #404]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	670b      	str	r3, [r1, #112]	; 0x70
 80029b4:	e004      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	75bb      	strb	r3, [r7, #22]
 80029ba:	e001      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d07e      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d0:	2b28      	cmp	r3, #40	; 0x28
 80029d2:	d867      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	08002aab 	.word	0x08002aab
 80029e0:	08002aa5 	.word	0x08002aa5
 80029e4:	08002aa5 	.word	0x08002aa5
 80029e8:	08002aa5 	.word	0x08002aa5
 80029ec:	08002aa5 	.word	0x08002aa5
 80029f0:	08002aa5 	.word	0x08002aa5
 80029f4:	08002aa5 	.word	0x08002aa5
 80029f8:	08002aa5 	.word	0x08002aa5
 80029fc:	08002a81 	.word	0x08002a81
 8002a00:	08002aa5 	.word	0x08002aa5
 8002a04:	08002aa5 	.word	0x08002aa5
 8002a08:	08002aa5 	.word	0x08002aa5
 8002a0c:	08002aa5 	.word	0x08002aa5
 8002a10:	08002aa5 	.word	0x08002aa5
 8002a14:	08002aa5 	.word	0x08002aa5
 8002a18:	08002aa5 	.word	0x08002aa5
 8002a1c:	08002a93 	.word	0x08002a93
 8002a20:	08002aa5 	.word	0x08002aa5
 8002a24:	08002aa5 	.word	0x08002aa5
 8002a28:	08002aa5 	.word	0x08002aa5
 8002a2c:	08002aa5 	.word	0x08002aa5
 8002a30:	08002aa5 	.word	0x08002aa5
 8002a34:	08002aa5 	.word	0x08002aa5
 8002a38:	08002aa5 	.word	0x08002aa5
 8002a3c:	08002aab 	.word	0x08002aab
 8002a40:	08002aa5 	.word	0x08002aa5
 8002a44:	08002aa5 	.word	0x08002aa5
 8002a48:	08002aa5 	.word	0x08002aa5
 8002a4c:	08002aa5 	.word	0x08002aa5
 8002a50:	08002aa5 	.word	0x08002aa5
 8002a54:	08002aa5 	.word	0x08002aa5
 8002a58:	08002aa5 	.word	0x08002aa5
 8002a5c:	08002aab 	.word	0x08002aab
 8002a60:	08002aa5 	.word	0x08002aa5
 8002a64:	08002aa5 	.word	0x08002aa5
 8002a68:	08002aa5 	.word	0x08002aa5
 8002a6c:	08002aa5 	.word	0x08002aa5
 8002a70:	08002aa5 	.word	0x08002aa5
 8002a74:	08002aa5 	.word	0x08002aa5
 8002a78:	08002aa5 	.word	0x08002aa5
 8002a7c:	08002aab 	.word	0x08002aab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	2101      	movs	r1, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fdf4 	bl	8003674 <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a90:	e00c      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3324      	adds	r3, #36	; 0x24
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fe9d 	bl	80037d8 <RCCEx_PLL3_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002aa2:	e003      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002abe:	4921      	ldr	r1, [pc, #132]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	654b      	str	r3, [r1, #84]	; 0x54
 8002ac4:	e001      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03e      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d820      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b27 	.word	0x08002b27
 8002ae8:	08002afd 	.word	0x08002afd
 8002aec:	08002b0f 	.word	0x08002b0f
 8002af0:	08002b27 	.word	0x08002b27
 8002af4:	08002b27 	.word	0x08002b27
 8002af8:	08002b27 	.word	0x08002b27
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2101      	movs	r1, #1
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fdb6 	bl	8003674 <RCCEx_PLL2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3324      	adds	r3, #36	; 0x24
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fe5f 	bl	80037d8 <RCCEx_PLL3_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b1e:	e003      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	75fb      	strb	r3, [r7, #23]
      break;
 8002b24:	e000      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d110      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	4902      	ldr	r1, [pc, #8]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	654b      	str	r3, [r1, #84]	; 0x54
 8002b40:	e008      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002b42:	bf00      	nop
 8002b44:	58024400 	.word	0x58024400
 8002b48:	58024800 	.word	0x58024800
 8002b4c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d039      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d820      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002b6a:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002bb3 	.word	0x08002bb3
 8002b74:	08002b89 	.word	0x08002b89
 8002b78:	08002b9b 	.word	0x08002b9b
 8002b7c:	08002bb3 	.word	0x08002bb3
 8002b80:	08002bb3 	.word	0x08002bb3
 8002b84:	08002bb3 	.word	0x08002bb3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fd70 	bl	8003674 <RCCEx_PLL2_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b98:	e00c      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3324      	adds	r3, #36	; 0x24
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fe19 	bl	80037d8 <RCCEx_PLL3_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002baa:	e003      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8002bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bba:	4bb7      	ldr	r3, [pc, #732]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	49b3      	ldr	r1, [pc, #716]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	658b      	str	r3, [r1, #88]	; 0x58
 8002bce:	e001      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d04b      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bea:	d02e      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8002bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf0:	d828      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf6:	d02a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfc:	d822      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002bfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c02:	d026      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002c04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c08:	d81c      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0e:	d010      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c14:	d816      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01d      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c1e:	d111      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fd24 	bl	8003674 <RCCEx_PLL2_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c30:	e012      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3324      	adds	r3, #36	; 0x24
 8002c36:	2102      	movs	r1, #2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fdcd 	bl	80037d8 <RCCEx_PLL3_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c42:	e009      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	75fb      	strb	r3, [r7, #23]
      break;
 8002c48:	e006      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e004      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c5e:	4b8e      	ldr	r3, [pc, #568]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6c:	498a      	ldr	r1, [pc, #552]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	654b      	str	r3, [r1, #84]	; 0x54
 8002c72:	e001      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d04b      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c8e:	d02e      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002c90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c94:	d828      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	d02a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d822      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ca6:	d026      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cac:	d81c      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8002cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb8:	d816      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01d      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fcd2 	bl	8003674 <RCCEx_PLL2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cd4:	e012      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fd7b 	bl	80037d8 <RCCEx_PLL3_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ce6:	e009      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	75fb      	strb	r3, [r7, #23]
      break;
 8002cec:	e006      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e004      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e002      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e000      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d02:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d10:	4961      	ldr	r1, [pc, #388]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	658b      	str	r3, [r1, #88]	; 0x58
 8002d16:	e001      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d04b      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d32:	d02e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002d34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d38:	d828      	bhi.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d3e:	d02a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d44:	d822      	bhi.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002d46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d4a:	d026      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002d4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d50:	d81c      	bhi.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d56:	d010      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8002d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d5c:	d816      	bhi.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01d      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	d111      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fc80 	bl	8003674 <RCCEx_PLL2_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d78:	e012      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3324      	adds	r3, #36	; 0x24
 8002d7e:	2102      	movs	r1, #2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fd29 	bl	80037d8 <RCCEx_PLL3_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d8a:	e009      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d90:	e006      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002d92:	bf00      	nop
 8002d94:	e004      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002d96:	bf00      	nop
 8002d98:	e002      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002da6:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002db4:	4938      	ldr	r1, [pc, #224]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	658b      	str	r3, [r1, #88]	; 0x58
 8002dba:	e001      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	d10a      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3324      	adds	r3, #36	; 0x24
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fcfa 	bl	80037d8 <RCCEx_PLL3_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfc:	4926      	ldr	r1, [pc, #152]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e18:	d10a      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3324      	adds	r3, #36	; 0x24
 8002e1e:	2102      	movs	r1, #2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fcd9 	bl	80037d8 <RCCEx_PLL3_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3e:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d036      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e5a:	d01f      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e60:	d817      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d009      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002e6c:	e011      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fbfd 	bl	8003674 <RCCEx_PLL2_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e7e:	e00e      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3324      	adds	r3, #36	; 0x24
 8002e84:	2102      	movs	r1, #2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fca6 	bl	80037d8 <RCCEx_PLL3_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e90:	e005      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8002e98:	58024400 	.word	0x58024400
      break;
 8002e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea4:	4b93      	ldr	r3, [pc, #588]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eb2:	4990      	ldr	r1, [pc, #576]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	658b      	str	r3, [r1, #88]	; 0x58
 8002eb8:	e001      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d033      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ed4:	d01c      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8002ed6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eda:	d816      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8002edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee0:	d003      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ee6:	d007      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8002ee8:	e00f      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eea:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	4a81      	ldr	r2, [pc, #516]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ef6:	e00c      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3324      	adds	r3, #36	; 0x24
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fc6a 	bl	80037d8 <RCCEx_PLL3_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8002f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f18:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f26:	4973      	ldr	r1, [pc, #460]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f2c:	e001      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d029      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d007      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8002f4c:	e00f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f4e:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	4a68      	ldr	r2, [pc, #416]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2102      	movs	r1, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb86 	bl	8003674 <RCCEx_PLL2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
      break;
 8002f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f7a:	4b5e      	ldr	r3, [pc, #376]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	495b      	ldr	r1, [pc, #364]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f8c:	e001      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3324      	adds	r3, #36	; 0x24
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fc17 	bl	80037d8 <RCCEx_PLL3_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d030      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc8:	d017      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8002fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fce:	d811      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd4:	d013      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fda:	d80b      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe6:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	4a42      	ldr	r2, [pc, #264]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002ff2:	e007      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff8:	e004      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003016:	4937      	ldr	r1, [pc, #220]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	654b      	str	r3, [r1, #84]	; 0x54
 800301c:	e001      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	492e      	ldr	r1, [pc, #184]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800305a:	4926      	ldr	r1, [pc, #152]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800305c:	4313      	orrs	r3, r2
 800305e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003078:	491e      	ldr	r1, [pc, #120]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003094:	6113      	str	r3, [r2, #16]
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80030a0:	4914      	ldr	r1, [pc, #80]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da08      	bge.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	490e      	ldr	r1, [pc, #56]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	4906      	ldr	r1, [pc, #24]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80030e0:	7dbb      	ldrb	r3, [r7, #22]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	58024400 	.word	0x58024400

080030f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80030fc:	f7ff f860 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4904      	ldr	r1, [pc, #16]	; (8003120 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	58024400 	.word	0x58024400
 8003120:	08004a7c 	.word	0x08004a7c

08003124 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800312c:	4ba1      	ldr	r3, [pc, #644]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003136:	4b9f      	ldr	r3, [pc, #636]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	0b1b      	lsrs	r3, r3, #12
 800313c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003140:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003142:	4b9c      	ldr	r3, [pc, #624]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800314e:	4b99      	ldr	r3, [pc, #612]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	08db      	lsrs	r3, r3, #3
 8003154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8111 	beq.w	8003394 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b02      	cmp	r3, #2
 8003176:	f000 8083 	beq.w	8003280 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f200 80a1 	bhi.w	80032c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d056      	beq.n	800323c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800318e:	e099      	b.n	80032c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003190:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02d      	beq.n	80031f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800319c:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	4a84      	ldr	r2, [pc, #528]	; (80033b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80031da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80033bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80031f6:	e087      	b.n	8003308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80033c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a03 	vldr	s12, [r7, #12]
 800321e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80033bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800323a:	e065      	b.n	8003308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80033c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003262:	eddf 5a56 	vldr	s11, [pc, #344]	; 80033bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800327e:	e043      	b.n	8003308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80033c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800328e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003292:	4b48      	ldr	r3, [pc, #288]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80032a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80033bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032c2:	e021      	b.n	8003308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80033c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80032d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80033bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003306:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	0a5b      	lsrs	r3, r3, #9
 800330e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800331e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003322:	edd7 6a07 	vldr	s13, [r7, #28]
 8003326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800332e:	ee17 2a90 	vmov	r2, s15
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003336:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800334c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003350:	edd7 6a07 	vldr	s13, [r7, #28]
 8003354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335c:	ee17 2a90 	vmov	r2, s15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	0e1b      	lsrs	r3, r3, #24
 800336a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800337a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800337e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338a:	ee17 2a90 	vmov	r2, s15
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003392:	e008      	b.n	80033a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
}
 80033a6:	bf00      	nop
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	58024400 	.word	0x58024400
 80033b8:	03d09000 	.word	0x03d09000
 80033bc:	46000000 	.word	0x46000000
 80033c0:	4c742400 	.word	0x4c742400
 80033c4:	4a742400 	.word	0x4a742400
 80033c8:	4af42400 	.word	0x4af42400

080033cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033d4:	4ba1      	ldr	r3, [pc, #644]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80033de:	4b9f      	ldr	r3, [pc, #636]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	0d1b      	lsrs	r3, r3, #20
 80033e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80033ea:	4b9c      	ldr	r3, [pc, #624]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80033f6:	4b99      	ldr	r3, [pc, #612]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	08db      	lsrs	r3, r3, #3
 80033fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8111 	beq.w	800363c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b02      	cmp	r3, #2
 800341e:	f000 8083 	beq.w	8003528 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b02      	cmp	r3, #2
 8003426:	f200 80a1 	bhi.w	800356c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d056      	beq.n	80034e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003436:	e099      	b.n	800356c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003438:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d02d      	beq.n	80034a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003444:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	4a84      	ldr	r2, [pc, #528]	; (8003660 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
 8003454:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b7b      	ldr	r3, [pc, #492]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003482:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800349e:	e087      	b.n	80035b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80034ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b2:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80034c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034e2:	e065      	b.n	80035b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800366c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f6:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003506:	ed97 6a03 	vldr	s12, [r7, #12]
 800350a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800350e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003526:	e043      	b.n	80035b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b48      	ldr	r3, [pc, #288]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a03 	vldr	s12, [r7, #12]
 800354e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800356a:	e021      	b.n	80035b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800366c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800357a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003592:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	0a5b      	lsrs	r3, r3, #9
 80035b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80035ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035d6:	ee17 2a90 	vmov	r2, s15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80035de:	4b1f      	ldr	r3, [pc, #124]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80035fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003604:	ee17 2a90 	vmov	r2, s15
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	0e1b      	lsrs	r3, r3, #24
 8003612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003626:	edd7 6a07 	vldr	s13, [r7, #28]
 800362a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800362e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003632:	ee17 2a90 	vmov	r2, s15
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800363a:	e008      	b.n	800364e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
}
 800364e:	bf00      	nop
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
 8003660:	03d09000 	.word	0x03d09000
 8003664:	46000000 	.word	0x46000000
 8003668:	4c742400 	.word	0x4c742400
 800366c:	4a742400 	.word	0x4a742400
 8003670:	4af42400 	.word	0x4af42400

08003674 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003682:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b03      	cmp	r3, #3
 800368c:	d101      	bne.n	8003692 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e099      	b.n	80037c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003692:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a4e      	ldr	r2, [pc, #312]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003698:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800369c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369e:	f7fd fae5 	bl	8000c6c <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036a4:	e008      	b.n	80036b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036a6:	f7fd fae1 	bl	8000c6c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e086      	b.n	80037c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036b8:	4b45      	ldr	r3, [pc, #276]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036c4:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	031b      	lsls	r3, r3, #12
 80036d2:	493f      	ldr	r1, [pc, #252]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	628b      	str	r3, [r1, #40]	; 0x28
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	3b01      	subs	r3, #1
 80036de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	025b      	lsls	r3, r3, #9
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	3b01      	subs	r3, #1
 8003702:	061b      	lsls	r3, r3, #24
 8003704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003708:	4931      	ldr	r1, [pc, #196]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	492d      	ldr	r1, [pc, #180]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003720:	4b2b      	ldr	r3, [pc, #172]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f023 0220 	bic.w	r2, r3, #32
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	4928      	ldr	r1, [pc, #160]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003732:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003738:	f023 0310 	bic.w	r3, r3, #16
 800373c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003742:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <RCCEx_PLL2_Config+0x160>)
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	69d2      	ldr	r2, [r2, #28]
 800374a:	00d2      	lsls	r2, r2, #3
 800374c:	4920      	ldr	r1, [pc, #128]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003758:	f043 0310 	orr.w	r3, r3, #16
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800376a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800376e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003770:	e00f      	b.n	8003792 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800377e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003782:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003784:	e005      	b.n	8003792 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	4a11      	ldr	r2, [pc, #68]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 800378c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003790:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 8003798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800379c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379e:	f7fd fa65 	bl	8000c6c <HAL_GetTick>
 80037a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80037a6:	f7fd fa61 	bl	8000c6c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e006      	b.n	80037c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <RCCEx_PLL2_Config+0x15c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	58024400 	.word	0x58024400
 80037d4:	ffff0007 	.word	0xffff0007

080037d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037e6:	4b53      	ldr	r3, [pc, #332]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d101      	bne.n	80037f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e099      	b.n	800392a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037f6:	4b4f      	ldr	r3, [pc, #316]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a4e      	ldr	r2, [pc, #312]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003802:	f7fd fa33 	bl	8000c6c <HAL_GetTick>
 8003806:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003808:	e008      	b.n	800381c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800380a:	f7fd fa2f 	bl	8000c6c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e086      	b.n	800392a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800381c:	4b45      	ldr	r3, [pc, #276]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f0      	bne.n	800380a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003828:	4b42      	ldr	r3, [pc, #264]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	051b      	lsls	r3, r3, #20
 8003836:	493f      	ldr	r1, [pc, #252]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 8003838:	4313      	orrs	r3, r2
 800383a:	628b      	str	r3, [r1, #40]	; 0x28
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	3b01      	subs	r3, #1
 8003842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	3b01      	subs	r3, #1
 800384c:	025b      	lsls	r3, r3, #9
 800384e:	b29b      	uxth	r3, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	3b01      	subs	r3, #1
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	3b01      	subs	r3, #1
 8003866:	061b      	lsls	r3, r3, #24
 8003868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800386c:	4931      	ldr	r1, [pc, #196]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003872:	4b30      	ldr	r3, [pc, #192]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	492d      	ldr	r1, [pc, #180]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	4928      	ldr	r1, [pc, #160]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003896:	4b27      	ldr	r3, [pc, #156]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	4a26      	ldr	r2, [pc, #152]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 800389c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80038a2:	4b24      	ldr	r3, [pc, #144]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <RCCEx_PLL3_Config+0x160>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	69d2      	ldr	r2, [r2, #28]
 80038ae:	00d2      	lsls	r2, r2, #3
 80038b0:	4920      	ldr	r1, [pc, #128]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a19      	ldr	r2, [pc, #100]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038d4:	e00f      	b.n	80038f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d106      	bne.n	80038ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038e8:	e005      	b.n	80038f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4a11      	ldr	r2, [pc, #68]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003902:	f7fd f9b3 	bl	8000c6c <HAL_GetTick>
 8003906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003908:	e008      	b.n	800391c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800390a:	f7fd f9af 	bl	8000c6c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e006      	b.n	800392a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <RCCEx_PLL3_Config+0x15c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400
 8003938:	ffff0007 	.word	0xffff0007

0800393c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e042      	b.n	80039d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7fd f843 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2224      	movs	r2, #36	; 0x24
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f82c 	bl	80039dc <UART_SetConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fd80 	bl	800449c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fe07 	bl	80045e0 <UART_CheckIdleState>
 80039d2:	4603      	mov	r3, r0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039dc:	b5b0      	push	{r4, r5, r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4bbf      	ldr	r3, [pc, #764]	; (8003d08 <UART_SetConfig+0x32c>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4ab5      	ldr	r2, [pc, #724]	; (8003d0c <UART_SetConfig+0x330>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a42:	4313      	orrs	r3, r2
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	4bb0      	ldr	r3, [pc, #704]	; (8003d10 <UART_SetConfig+0x334>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f023 010f 	bic.w	r1, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4aa7      	ldr	r2, [pc, #668]	; (8003d14 <UART_SetConfig+0x338>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d176      	bne.n	8003b68 <UART_SetConfig+0x18c>
 8003a7a:	4ba7      	ldr	r3, [pc, #668]	; (8003d18 <UART_SetConfig+0x33c>)
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a82:	2b28      	cmp	r3, #40	; 0x28
 8003a84:	d86c      	bhi.n	8003b60 <UART_SetConfig+0x184>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0xb0>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003b31 	.word	0x08003b31
 8003a90:	08003b61 	.word	0x08003b61
 8003a94:	08003b61 	.word	0x08003b61
 8003a98:	08003b61 	.word	0x08003b61
 8003a9c:	08003b61 	.word	0x08003b61
 8003aa0:	08003b61 	.word	0x08003b61
 8003aa4:	08003b61 	.word	0x08003b61
 8003aa8:	08003b61 	.word	0x08003b61
 8003aac:	08003b39 	.word	0x08003b39
 8003ab0:	08003b61 	.word	0x08003b61
 8003ab4:	08003b61 	.word	0x08003b61
 8003ab8:	08003b61 	.word	0x08003b61
 8003abc:	08003b61 	.word	0x08003b61
 8003ac0:	08003b61 	.word	0x08003b61
 8003ac4:	08003b61 	.word	0x08003b61
 8003ac8:	08003b61 	.word	0x08003b61
 8003acc:	08003b41 	.word	0x08003b41
 8003ad0:	08003b61 	.word	0x08003b61
 8003ad4:	08003b61 	.word	0x08003b61
 8003ad8:	08003b61 	.word	0x08003b61
 8003adc:	08003b61 	.word	0x08003b61
 8003ae0:	08003b61 	.word	0x08003b61
 8003ae4:	08003b61 	.word	0x08003b61
 8003ae8:	08003b61 	.word	0x08003b61
 8003aec:	08003b49 	.word	0x08003b49
 8003af0:	08003b61 	.word	0x08003b61
 8003af4:	08003b61 	.word	0x08003b61
 8003af8:	08003b61 	.word	0x08003b61
 8003afc:	08003b61 	.word	0x08003b61
 8003b00:	08003b61 	.word	0x08003b61
 8003b04:	08003b61 	.word	0x08003b61
 8003b08:	08003b61 	.word	0x08003b61
 8003b0c:	08003b51 	.word	0x08003b51
 8003b10:	08003b61 	.word	0x08003b61
 8003b14:	08003b61 	.word	0x08003b61
 8003b18:	08003b61 	.word	0x08003b61
 8003b1c:	08003b61 	.word	0x08003b61
 8003b20:	08003b61 	.word	0x08003b61
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b61 	.word	0x08003b61
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b36:	e222      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b3e:	e21e      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003b40:	2308      	movs	r3, #8
 8003b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b46:	e21a      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b4e:	e216      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003b50:	2320      	movs	r3, #32
 8003b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b56:	e212      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003b58:	2340      	movs	r3, #64	; 0x40
 8003b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b5e:	e20e      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b66:	e20a      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6b      	ldr	r2, [pc, #428]	; (8003d1c <UART_SetConfig+0x340>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d130      	bne.n	8003bd4 <UART_SetConfig+0x1f8>
 8003b72:	4b69      	ldr	r3, [pc, #420]	; (8003d18 <UART_SetConfig+0x33c>)
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d826      	bhi.n	8003bcc <UART_SetConfig+0x1f0>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <UART_SetConfig+0x1a8>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b9d 	.word	0x08003b9d
 8003b88:	08003ba5 	.word	0x08003ba5
 8003b8c:	08003bad 	.word	0x08003bad
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bc5 	.word	0x08003bc5
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ba2:	e1ec      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003baa:	e1e8      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003bac:	2308      	movs	r3, #8
 8003bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bb2:	e1e4      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bba:	e1e0      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bc2:	e1dc      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003bc4:	2340      	movs	r3, #64	; 0x40
 8003bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bca:	e1d8      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bd2:	e1d4      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a51      	ldr	r2, [pc, #324]	; (8003d20 <UART_SetConfig+0x344>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d130      	bne.n	8003c40 <UART_SetConfig+0x264>
 8003bde:	4b4e      	ldr	r3, [pc, #312]	; (8003d18 <UART_SetConfig+0x33c>)
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d826      	bhi.n	8003c38 <UART_SetConfig+0x25c>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0x214>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c09 	.word	0x08003c09
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	08003c19 	.word	0x08003c19
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003c29 	.word	0x08003c29
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c0e:	e1b6      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c16:	e1b2      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c1e:	e1ae      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c26:	e1aa      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c28:	2320      	movs	r3, #32
 8003c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c2e:	e1a6      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c30:	2340      	movs	r3, #64	; 0x40
 8003c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c36:	e1a2      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c3e:	e19e      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a37      	ldr	r2, [pc, #220]	; (8003d24 <UART_SetConfig+0x348>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d130      	bne.n	8003cac <UART_SetConfig+0x2d0>
 8003c4a:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <UART_SetConfig+0x33c>)
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d826      	bhi.n	8003ca4 <UART_SetConfig+0x2c8>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <UART_SetConfig+0x280>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003c7d 	.word	0x08003c7d
 8003c64:	08003c85 	.word	0x08003c85
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c7a:	e180      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c82:	e17c      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c84:	2308      	movs	r3, #8
 8003c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c8a:	e178      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c92:	e174      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c94:	2320      	movs	r3, #32
 8003c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c9a:	e170      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003c9c:	2340      	movs	r3, #64	; 0x40
 8003c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ca2:	e16c      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003caa:	e168      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <UART_SetConfig+0x34c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d142      	bne.n	8003d3c <UART_SetConfig+0x360>
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <UART_SetConfig+0x33c>)
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d838      	bhi.n	8003d34 <UART_SetConfig+0x358>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x2ec>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003ce1 	.word	0x08003ce1
 8003ccc:	08003ce9 	.word	0x08003ce9
 8003cd0:	08003cf1 	.word	0x08003cf1
 8003cd4:	08003cf9 	.word	0x08003cf9
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d2d 	.word	0x08003d2d
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ce6:	e14a      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cee:	e146      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cf6:	e142      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cfe:	e13e      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003d00:	2320      	movs	r3, #32
 8003d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d06:	e13a      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003d08:	cfff69f3 	.word	0xcfff69f3
 8003d0c:	58000c00 	.word	0x58000c00
 8003d10:	11fff4ff 	.word	0x11fff4ff
 8003d14:	40011000 	.word	0x40011000
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	40004400 	.word	0x40004400
 8003d20:	40004800 	.word	0x40004800
 8003d24:	40004c00 	.word	0x40004c00
 8003d28:	40005000 	.word	0x40005000
 8003d2c:	2340      	movs	r3, #64	; 0x40
 8003d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d32:	e124      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d3a:	e120      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4acc      	ldr	r2, [pc, #816]	; (8004074 <UART_SetConfig+0x698>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d176      	bne.n	8003e34 <UART_SetConfig+0x458>
 8003d46:	4bcc      	ldr	r3, [pc, #816]	; (8004078 <UART_SetConfig+0x69c>)
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4e:	2b28      	cmp	r3, #40	; 0x28
 8003d50:	d86c      	bhi.n	8003e2c <UART_SetConfig+0x450>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <UART_SetConfig+0x37c>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003dfd 	.word	0x08003dfd
 8003d5c:	08003e2d 	.word	0x08003e2d
 8003d60:	08003e2d 	.word	0x08003e2d
 8003d64:	08003e2d 	.word	0x08003e2d
 8003d68:	08003e2d 	.word	0x08003e2d
 8003d6c:	08003e2d 	.word	0x08003e2d
 8003d70:	08003e2d 	.word	0x08003e2d
 8003d74:	08003e2d 	.word	0x08003e2d
 8003d78:	08003e05 	.word	0x08003e05
 8003d7c:	08003e2d 	.word	0x08003e2d
 8003d80:	08003e2d 	.word	0x08003e2d
 8003d84:	08003e2d 	.word	0x08003e2d
 8003d88:	08003e2d 	.word	0x08003e2d
 8003d8c:	08003e2d 	.word	0x08003e2d
 8003d90:	08003e2d 	.word	0x08003e2d
 8003d94:	08003e2d 	.word	0x08003e2d
 8003d98:	08003e0d 	.word	0x08003e0d
 8003d9c:	08003e2d 	.word	0x08003e2d
 8003da0:	08003e2d 	.word	0x08003e2d
 8003da4:	08003e2d 	.word	0x08003e2d
 8003da8:	08003e2d 	.word	0x08003e2d
 8003dac:	08003e2d 	.word	0x08003e2d
 8003db0:	08003e2d 	.word	0x08003e2d
 8003db4:	08003e2d 	.word	0x08003e2d
 8003db8:	08003e15 	.word	0x08003e15
 8003dbc:	08003e2d 	.word	0x08003e2d
 8003dc0:	08003e2d 	.word	0x08003e2d
 8003dc4:	08003e2d 	.word	0x08003e2d
 8003dc8:	08003e2d 	.word	0x08003e2d
 8003dcc:	08003e2d 	.word	0x08003e2d
 8003dd0:	08003e2d 	.word	0x08003e2d
 8003dd4:	08003e2d 	.word	0x08003e2d
 8003dd8:	08003e1d 	.word	0x08003e1d
 8003ddc:	08003e2d 	.word	0x08003e2d
 8003de0:	08003e2d 	.word	0x08003e2d
 8003de4:	08003e2d 	.word	0x08003e2d
 8003de8:	08003e2d 	.word	0x08003e2d
 8003dec:	08003e2d 	.word	0x08003e2d
 8003df0:	08003e2d 	.word	0x08003e2d
 8003df4:	08003e2d 	.word	0x08003e2d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e02:	e0bc      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e04:	2304      	movs	r3, #4
 8003e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e0a:	e0b8      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e12:	e0b4      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e14:	2310      	movs	r3, #16
 8003e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e1a:	e0b0      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e22:	e0ac      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e24:	2340      	movs	r3, #64	; 0x40
 8003e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e2a:	e0a8      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e32:	e0a4      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a90      	ldr	r2, [pc, #576]	; (800407c <UART_SetConfig+0x6a0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d130      	bne.n	8003ea0 <UART_SetConfig+0x4c4>
 8003e3e:	4b8e      	ldr	r3, [pc, #568]	; (8004078 <UART_SetConfig+0x69c>)
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	2b05      	cmp	r3, #5
 8003e48:	d826      	bhi.n	8003e98 <UART_SetConfig+0x4bc>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x474>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e69 	.word	0x08003e69
 8003e54:	08003e71 	.word	0x08003e71
 8003e58:	08003e79 	.word	0x08003e79
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e91 	.word	0x08003e91
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e6e:	e086      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e70:	2304      	movs	r3, #4
 8003e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e76:	e082      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e7e:	e07e      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e80:	2310      	movs	r3, #16
 8003e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e86:	e07a      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e88:	2320      	movs	r3, #32
 8003e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e8e:	e076      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e90:	2340      	movs	r3, #64	; 0x40
 8003e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e96:	e072      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e9e:	e06e      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a76      	ldr	r2, [pc, #472]	; (8004080 <UART_SetConfig+0x6a4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d130      	bne.n	8003f0c <UART_SetConfig+0x530>
 8003eaa:	4b73      	ldr	r3, [pc, #460]	; (8004078 <UART_SetConfig+0x69c>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d826      	bhi.n	8003f04 <UART_SetConfig+0x528>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <UART_SetConfig+0x4e0>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ed5 	.word	0x08003ed5
 8003ec0:	08003edd 	.word	0x08003edd
 8003ec4:	08003ee5 	.word	0x08003ee5
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eda:	e050      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003edc:	2304      	movs	r3, #4
 8003ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ee2:	e04c      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eea:	e048      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003eec:	2310      	movs	r3, #16
 8003eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ef2:	e044      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003efa:	e040      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003efc:	2340      	movs	r3, #64	; 0x40
 8003efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f02:	e03c      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f0a:	e038      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5c      	ldr	r2, [pc, #368]	; (8004084 <UART_SetConfig+0x6a8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d130      	bne.n	8003f78 <UART_SetConfig+0x59c>
 8003f16:	4b58      	ldr	r3, [pc, #352]	; (8004078 <UART_SetConfig+0x69c>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d826      	bhi.n	8003f70 <UART_SetConfig+0x594>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x54c>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f41 	.word	0x08003f41
 8003f2c:	08003f49 	.word	0x08003f49
 8003f30:	08003f51 	.word	0x08003f51
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	2302      	movs	r3, #2
 8003f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f46:	e01a      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f4e:	e016      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f50:	2308      	movs	r3, #8
 8003f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f56:	e012      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f5e:	e00e      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f60:	2320      	movs	r3, #32
 8003f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f66:	e00a      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f68:	2340      	movs	r3, #64	; 0x40
 8003f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f6e:	e006      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f76:	e002      	b.n	8003f7e <UART_SetConfig+0x5a2>
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a40      	ldr	r2, [pc, #256]	; (8004084 <UART_SetConfig+0x6a8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	f040 80ef 	bne.w	8004168 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	dc46      	bgt.n	8004020 <UART_SetConfig+0x644>
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	f2c0 8081 	blt.w	800409a <UART_SetConfig+0x6be>
 8003f98:	3b02      	subs	r3, #2
 8003f9a:	2b1e      	cmp	r3, #30
 8003f9c:	d87d      	bhi.n	800409a <UART_SetConfig+0x6be>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0x5c8>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08004027 	.word	0x08004027
 8003fa8:	0800409b 	.word	0x0800409b
 8003fac:	0800402f 	.word	0x0800402f
 8003fb0:	0800409b 	.word	0x0800409b
 8003fb4:	0800409b 	.word	0x0800409b
 8003fb8:	0800409b 	.word	0x0800409b
 8003fbc:	0800403f 	.word	0x0800403f
 8003fc0:	0800409b 	.word	0x0800409b
 8003fc4:	0800409b 	.word	0x0800409b
 8003fc8:	0800409b 	.word	0x0800409b
 8003fcc:	0800409b 	.word	0x0800409b
 8003fd0:	0800409b 	.word	0x0800409b
 8003fd4:	0800409b 	.word	0x0800409b
 8003fd8:	0800409b 	.word	0x0800409b
 8003fdc:	0800404f 	.word	0x0800404f
 8003fe0:	0800409b 	.word	0x0800409b
 8003fe4:	0800409b 	.word	0x0800409b
 8003fe8:	0800409b 	.word	0x0800409b
 8003fec:	0800409b 	.word	0x0800409b
 8003ff0:	0800409b 	.word	0x0800409b
 8003ff4:	0800409b 	.word	0x0800409b
 8003ff8:	0800409b 	.word	0x0800409b
 8003ffc:	0800409b 	.word	0x0800409b
 8004000:	0800409b 	.word	0x0800409b
 8004004:	0800409b 	.word	0x0800409b
 8004008:	0800409b 	.word	0x0800409b
 800400c:	0800409b 	.word	0x0800409b
 8004010:	0800409b 	.word	0x0800409b
 8004014:	0800409b 	.word	0x0800409b
 8004018:	0800409b 	.word	0x0800409b
 800401c:	0800408d 	.word	0x0800408d
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d036      	beq.n	8004092 <UART_SetConfig+0x6b6>
 8004024:	e039      	b.n	800409a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004026:	f7ff f867 	bl	80030f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800402a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800402c:	e03b      	b.n	80040a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff f876 	bl	8003124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800403c:	e033      	b.n	80040a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff f9c2 	bl	80033cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800404c:	e02b      	b.n	80040a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <UART_SetConfig+0x69c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <UART_SetConfig+0x69c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	08db      	lsrs	r3, r3, #3
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <UART_SetConfig+0x6ac>)
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800406c:	e01b      	b.n	80040a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <UART_SetConfig+0x6ac>)
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004072:	e018      	b.n	80040a6 <UART_SetConfig+0x6ca>
 8004074:	40011400 	.word	0x40011400
 8004078:	58024400 	.word	0x58024400
 800407c:	40007800 	.word	0x40007800
 8004080:	40007c00 	.word	0x40007c00
 8004084:	58000c00 	.word	0x58000c00
 8004088:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800408c:	4bc4      	ldr	r3, [pc, #784]	; (80043a0 <UART_SetConfig+0x9c4>)
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004090:	e009      	b.n	80040a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004098:	e005      	b.n	80040a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80040a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 81da 	beq.w	8004462 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	4abc      	ldr	r2, [pc, #752]	; (80043a4 <UART_SetConfig+0x9c8>)
 80040b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b8:	461a      	mov	r2, r3
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d305      	bcc.n	80040de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d903      	bls.n	80040e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80040e4:	e1bd      	b.n	8004462 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	4618      	mov	r0, r3
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	4aac      	ldr	r2, [pc, #688]	; (80043a4 <UART_SetConfig+0x9c8>)
 80040f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	f7fc f8eb 	bl	80002d8 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	020b      	lsls	r3, r1, #8
 8004114:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004118:	0202      	lsls	r2, r0, #8
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	6849      	ldr	r1, [r1, #4]
 800411e:	0849      	lsrs	r1, r1, #1
 8004120:	4608      	mov	r0, r1
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	1814      	adds	r4, r2, r0
 8004128:	eb43 0501 	adc.w	r5, r3, r1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	461a      	mov	r2, r3
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	4620      	mov	r0, r4
 8004138:	4629      	mov	r1, r5
 800413a:	f7fc f8cd 	bl	80002d8 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4613      	mov	r3, r2
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d308      	bcc.n	8004160 <UART_SetConfig+0x784>
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004154:	d204      	bcs.n	8004160 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	e180      	b.n	8004462 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004166:	e17c      	b.n	8004462 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004170:	f040 80be 	bne.w	80042f0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8004174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004178:	2b20      	cmp	r3, #32
 800417a:	dc49      	bgt.n	8004210 <UART_SetConfig+0x834>
 800417c:	2b00      	cmp	r3, #0
 800417e:	db7c      	blt.n	800427a <UART_SetConfig+0x89e>
 8004180:	2b20      	cmp	r3, #32
 8004182:	d87a      	bhi.n	800427a <UART_SetConfig+0x89e>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0x7b0>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	08004217 	.word	0x08004217
 8004190:	0800421f 	.word	0x0800421f
 8004194:	0800427b 	.word	0x0800427b
 8004198:	0800427b 	.word	0x0800427b
 800419c:	08004227 	.word	0x08004227
 80041a0:	0800427b 	.word	0x0800427b
 80041a4:	0800427b 	.word	0x0800427b
 80041a8:	0800427b 	.word	0x0800427b
 80041ac:	08004237 	.word	0x08004237
 80041b0:	0800427b 	.word	0x0800427b
 80041b4:	0800427b 	.word	0x0800427b
 80041b8:	0800427b 	.word	0x0800427b
 80041bc:	0800427b 	.word	0x0800427b
 80041c0:	0800427b 	.word	0x0800427b
 80041c4:	0800427b 	.word	0x0800427b
 80041c8:	0800427b 	.word	0x0800427b
 80041cc:	08004247 	.word	0x08004247
 80041d0:	0800427b 	.word	0x0800427b
 80041d4:	0800427b 	.word	0x0800427b
 80041d8:	0800427b 	.word	0x0800427b
 80041dc:	0800427b 	.word	0x0800427b
 80041e0:	0800427b 	.word	0x0800427b
 80041e4:	0800427b 	.word	0x0800427b
 80041e8:	0800427b 	.word	0x0800427b
 80041ec:	0800427b 	.word	0x0800427b
 80041f0:	0800427b 	.word	0x0800427b
 80041f4:	0800427b 	.word	0x0800427b
 80041f8:	0800427b 	.word	0x0800427b
 80041fc:	0800427b 	.word	0x0800427b
 8004200:	0800427b 	.word	0x0800427b
 8004204:	0800427b 	.word	0x0800427b
 8004208:	0800427b 	.word	0x0800427b
 800420c:	0800426d 	.word	0x0800426d
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d02e      	beq.n	8004272 <UART_SetConfig+0x896>
 8004214:	e031      	b.n	800427a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7fe f803 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 800421a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800421c:	e033      	b.n	8004286 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800421e:	f7fe f815 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8004222:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004224:	e02f      	b.n	8004286 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe ff7a 	bl	8003124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004234:	e027      	b.n	8004286 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004236:	f107 0308 	add.w	r3, r7, #8
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f8c6 	bl	80033cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004244:	e01f      	b.n	8004286 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004246:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <UART_SetConfig+0x9cc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004252:	4b55      	ldr	r3, [pc, #340]	; (80043a8 <UART_SetConfig+0x9cc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	4a53      	ldr	r2, [pc, #332]	; (80043ac <UART_SetConfig+0x9d0>)
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004264:	e00f      	b.n	8004286 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <UART_SetConfig+0x9d0>)
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800426a:	e00c      	b.n	8004286 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800426c:	4b4c      	ldr	r3, [pc, #304]	; (80043a0 <UART_SetConfig+0x9c4>)
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004270:	e009      	b.n	8004286 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004278:	e005      	b.n	8004286 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80ea 	beq.w	8004462 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	4a44      	ldr	r2, [pc, #272]	; (80043a4 <UART_SetConfig+0x9c8>)
 8004294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004298:	461a      	mov	r2, r3
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a0:	005a      	lsls	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	2b0f      	cmp	r3, #15
 80042b8:	d916      	bls.n	80042e8 <UART_SetConfig+0x90c>
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d212      	bcs.n	80042e8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f023 030f 	bic.w	r3, r3, #15
 80042ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042da:	4313      	orrs	r3, r2
 80042dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	e0bc      	b.n	8004462 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80042ee:	e0b8      	b.n	8004462 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	dc4b      	bgt.n	8004390 <UART_SetConfig+0x9b4>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f2c0 8087 	blt.w	800440c <UART_SetConfig+0xa30>
 80042fe:	2b20      	cmp	r3, #32
 8004300:	f200 8084 	bhi.w	800440c <UART_SetConfig+0xa30>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x930>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004397 	.word	0x08004397
 8004310:	080043b1 	.word	0x080043b1
 8004314:	0800440d 	.word	0x0800440d
 8004318:	0800440d 	.word	0x0800440d
 800431c:	080043b9 	.word	0x080043b9
 8004320:	0800440d 	.word	0x0800440d
 8004324:	0800440d 	.word	0x0800440d
 8004328:	0800440d 	.word	0x0800440d
 800432c:	080043c9 	.word	0x080043c9
 8004330:	0800440d 	.word	0x0800440d
 8004334:	0800440d 	.word	0x0800440d
 8004338:	0800440d 	.word	0x0800440d
 800433c:	0800440d 	.word	0x0800440d
 8004340:	0800440d 	.word	0x0800440d
 8004344:	0800440d 	.word	0x0800440d
 8004348:	0800440d 	.word	0x0800440d
 800434c:	080043d9 	.word	0x080043d9
 8004350:	0800440d 	.word	0x0800440d
 8004354:	0800440d 	.word	0x0800440d
 8004358:	0800440d 	.word	0x0800440d
 800435c:	0800440d 	.word	0x0800440d
 8004360:	0800440d 	.word	0x0800440d
 8004364:	0800440d 	.word	0x0800440d
 8004368:	0800440d 	.word	0x0800440d
 800436c:	0800440d 	.word	0x0800440d
 8004370:	0800440d 	.word	0x0800440d
 8004374:	0800440d 	.word	0x0800440d
 8004378:	0800440d 	.word	0x0800440d
 800437c:	0800440d 	.word	0x0800440d
 8004380:	0800440d 	.word	0x0800440d
 8004384:	0800440d 	.word	0x0800440d
 8004388:	0800440d 	.word	0x0800440d
 800438c:	080043ff 	.word	0x080043ff
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d037      	beq.n	8004404 <UART_SetConfig+0xa28>
 8004394:	e03a      	b.n	800440c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004396:	f7fd ff43 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 800439a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800439c:	e03c      	b.n	8004418 <UART_SetConfig+0xa3c>
 800439e:	bf00      	nop
 80043a0:	003d0900 	.word	0x003d0900
 80043a4:	08004a8c 	.word	0x08004a8c
 80043a8:	58024400 	.word	0x58024400
 80043ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7fd ff4c 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 80043b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80043b6:	e02f      	b.n	8004418 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe feb1 	bl	8003124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043c6:	e027      	b.n	8004418 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043c8:	f107 0308 	add.w	r3, r7, #8
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fffd 	bl	80033cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043d6:	e01f      	b.n	8004418 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d8:	4b2c      	ldr	r3, [pc, #176]	; (800448c <UART_SetConfig+0xab0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <UART_SetConfig+0xab0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	08db      	lsrs	r3, r3, #3
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	4a28      	ldr	r2, [pc, #160]	; (8004490 <UART_SetConfig+0xab4>)
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043f6:	e00f      	b.n	8004418 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <UART_SetConfig+0xab4>)
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043fc:	e00c      	b.n	8004418 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <UART_SetConfig+0xab8>)
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004402:	e009      	b.n	8004418 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800440a:	e005      	b.n	8004418 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004416:	bf00      	nop
    }

    if (pclk != 0U)
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d021      	beq.n	8004462 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <UART_SetConfig+0xabc>)
 8004424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004428:	461a      	mov	r2, r3
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	441a      	add	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	2b0f      	cmp	r3, #15
 8004446:	d909      	bls.n	800445c <UART_SetConfig+0xa80>
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444e:	d205      	bcs.n	800445c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e002      	b.n	8004462 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800447e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004482:	4618      	mov	r0, r3
 8004484:	3738      	adds	r7, #56	; 0x38
 8004486:	46bd      	mov	sp, r7
 8004488:	bdb0      	pop	{r4, r5, r7, pc}
 800448a:	bf00      	nop
 800448c:	58024400 	.word	0x58024400
 8004490:	03d09000 	.word	0x03d09000
 8004494:	003d0900 	.word	0x003d0900
 8004498:	08004a8c 	.word	0x08004a8c

0800449c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459a:	d10a      	bne.n	80045b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f0:	f7fc fb3c 	bl	8000c6c <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b08      	cmp	r3, #8
 8004602:	d10e      	bne.n	8004622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f82f 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e025      	b.n	800466e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d10e      	bne.n	800464e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f819 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e00f      	b.n	800466e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b09c      	sub	sp, #112	; 0x70
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004686:	e0a9      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	f000 80a5 	beq.w	80047dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004692:	f7fc faeb 	bl	8000c6c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d140      	bne.n	800472a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046bc:	667b      	str	r3, [r7, #100]	; 0x64
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e6      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	663b      	str	r3, [r7, #96]	; 0x60
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80046fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e069      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d051      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004746:	d149      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004750:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004766:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
 8004772:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e6      	bne.n	8004752 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3308      	adds	r3, #8
 800478a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	613b      	str	r3, [r7, #16]
   return(result);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	66bb      	str	r3, [r7, #104]	; 0x68
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3308      	adds	r3, #8
 80047a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047a4:	623a      	str	r2, [r7, #32]
 80047a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	69f9      	ldr	r1, [r7, #28]
 80047aa:	6a3a      	ldr	r2, [r7, #32]
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e5      	bne.n	8004784 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e010      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	f43f af46 	beq.w	8004688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3770      	adds	r7, #112	; 0x70
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_UARTEx_DisableFifoMode+0x16>
 8004818:	2302      	movs	r3, #2
 800481a:	e027      	b.n	800486c <HAL_UARTEx_DisableFifoMode+0x66>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800484a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e02d      	b.n	80048ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	; 0x24
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f84f 	bl	8004970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e02d      	b.n	8004968 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f811 	bl	8004970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497c:	2b00      	cmp	r3, #0
 800497e:	d108      	bne.n	8004992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004990:	e031      	b.n	80049f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004992:	2310      	movs	r3, #16
 8004994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004996:	2310      	movs	r3, #16
 8004998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	0e5b      	lsrs	r3, r3, #25
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	0f5b      	lsrs	r3, r3, #29
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	7b3a      	ldrb	r2, [r7, #12]
 80049be:	4911      	ldr	r1, [pc, #68]	; (8004a04 <UARTEx_SetNbDataToProcess+0x94>)
 80049c0:	5c8a      	ldrb	r2, [r1, r2]
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049c6:	7b3a      	ldrb	r2, [r7, #12]
 80049c8:	490f      	ldr	r1, [pc, #60]	; (8004a08 <UARTEx_SetNbDataToProcess+0x98>)
 80049ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	7b7a      	ldrb	r2, [r7, #13]
 80049dc:	4909      	ldr	r1, [pc, #36]	; (8004a04 <UARTEx_SetNbDataToProcess+0x94>)
 80049de:	5c8a      	ldrb	r2, [r1, r2]
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049e4:	7b7a      	ldrb	r2, [r7, #13]
 80049e6:	4908      	ldr	r1, [pc, #32]	; (8004a08 <UARTEx_SetNbDataToProcess+0x98>)
 80049e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	08004aa4 	.word	0x08004aa4
 8004a08:	08004aac 	.word	0x08004aac

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4d0d      	ldr	r5, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1b64      	subs	r4, r4, r5
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2600      	movs	r6, #0
 8004a18:	42a6      	cmp	r6, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4d0b      	ldr	r5, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 f820 	bl	8004a64 <_init>
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	42a6      	cmp	r6, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a34:	4798      	blx	r3
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3e:	4798      	blx	r3
 8004a40:	3601      	adds	r6, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08004abc 	.word	0x08004abc
 8004a48:	08004abc 	.word	0x08004abc
 8004a4c:	08004abc 	.word	0x08004abc
 8004a50:	08004ac0 	.word	0x08004ac0

08004a54 <memset>:
 8004a54:	4402      	add	r2, r0
 8004a56:	4603      	mov	r3, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <memset+0xa>
 8004a5c:	4770      	bx	lr
 8004a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a62:	e7f9      	b.n	8004a58 <memset+0x4>

08004a64 <_init>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr

08004a70 <_fini>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	bf00      	nop
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr
